
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000026d4  00002768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800094  00800094  0000279c  2**0
                  ALLOC
  3 .stab         00002d48  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000191e  00000000  00000000  000054e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000070b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a994  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aaf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ad81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b54f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_4>
      14:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__vector_9>
      28:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__vector_10>
      2c:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 05 	call	0xbbc	; 0xbbc <main>
      8a:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PIR_init>:
#include "PIR.h"
#include "gpio.h"

void PIR_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_SENSOR_PORT_ID,PIR_SENSOR_PIN_ID,PIN_INPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <PIR_getState>:

uint8 PIR_getState(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_SENSOR_PORT_ID,PIR_SENSOR_PIN_ID);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	62 e0       	ldi	r22, 0x02	; 2
     b6a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <GPIO_readPin>
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <BUZZER_init>:
#include "buzzer.h"

void BUZZER_init(void)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	67 e0       	ldi	r22, 0x07	; 7
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <BUZZER_on>:
void BUZZER_on(void)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	67 e0       	ldi	r22, 0x07	; 7
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
}
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <BUZZER_off>:
void BUZZER_off(void)
{
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	67 e0       	ldi	r22, 0x07	; 7
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <main>:
void CONTROL_ECU_rotateMotor_CW(void);
void CONTROL_ECU_rotateMotor_ACW(void);
void CONTROL_ECU_TURN_BUZZER(void);
void CONTROL_ECU_receiveChangedPassword(void);

int main(void){
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	67 97       	sbiw	r28, 0x17	; 23
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61

	/*ENABLE I-BIT FOR INTERRUPTS*/
	SREG = (1<<7);
     bd0:	ef e5       	ldi	r30, 0x5F	; 95
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 e8       	ldi	r24, 0x80	; 128
     bd6:	80 83       	st	Z, r24

	/*PIR SENSOR INITIALIZATION*/
	PIR_init();
     bd8:	0e 94 a3 05 	call	0xb46	; 0xb46 <PIR_init>

	/*DC MOTOR INITIALIZATION*/
	DcMotor_init();
     bdc:	0e 94 c5 09 	call	0x138a	; 0x138a <DcMotor_init>

	/*BUZZER INITIALIZATION*/
	BUZZER_init();
     be0:	0e 94 ba 05 	call	0xb74	; 0xb74 <BUZZER_init>

	/*I2C CONFIGURATIONS*/
	TWI_ConfigType TWI_Configurations = {0b00000110,400000};
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	9f 87       	std	Y+15, r25	; 0x0f
     bea:	8e 87       	std	Y+14, r24	; 0x0e
     bec:	e2 e7       	ldi	r30, 0x72	; 114
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	f9 8b       	std	Y+17, r31	; 0x11
     bf2:	e8 8b       	std	Y+16, r30	; 0x10
     bf4:	f5 e0       	ldi	r31, 0x05	; 5
     bf6:	fa 8b       	std	Y+18, r31	; 0x12
     bf8:	e8 89       	ldd	r30, Y+16	; 0x10
     bfa:	f9 89       	ldd	r31, Y+17	; 0x11
     bfc:	00 80       	ld	r0, Z
     bfe:	88 89       	ldd	r24, Y+16	; 0x10
     c00:	99 89       	ldd	r25, Y+17	; 0x11
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	99 8b       	std	Y+17, r25	; 0x11
     c06:	88 8b       	std	Y+16, r24	; 0x10
     c08:	ee 85       	ldd	r30, Y+14	; 0x0e
     c0a:	ff 85       	ldd	r31, Y+15	; 0x0f
     c0c:	00 82       	st	Z, r0
     c0e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c10:	9f 85       	ldd	r25, Y+15	; 0x0f
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	9f 87       	std	Y+15, r25	; 0x0f
     c16:	8e 87       	std	Y+14, r24	; 0x0e
     c18:	9a 89       	ldd	r25, Y+18	; 0x12
     c1a:	91 50       	subi	r25, 0x01	; 1
     c1c:	9a 8b       	std	Y+18, r25	; 0x12
     c1e:	ea 89       	ldd	r30, Y+18	; 0x12
     c20:	ee 23       	and	r30, r30
     c22:	51 f7       	brne	.-44     	; 0xbf8 <main+0x3c>

	/*I2C INITIALIZATION*/
	TWI_init(&TWI_Configurations);
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	0e 94 29 11 	call	0x2252	; 0x2252 <TWI_init>

	/*UART CONFIGURATIONS*/
	UART_ConfigType UART_Configurations = {ASYNC,_8_BIT_MODE,EVEN_PARITY,_1_BIT,BAUD_RATE_9600};
     c2c:	ce 01       	movw	r24, r28
     c2e:	06 96       	adiw	r24, 0x06	; 6
     c30:	9c 8b       	std	Y+20, r25	; 0x14
     c32:	8b 8b       	std	Y+19, r24	; 0x13
     c34:	ea e6       	ldi	r30, 0x6A	; 106
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	fe 8b       	std	Y+22, r31	; 0x16
     c3a:	ed 8b       	std	Y+21, r30	; 0x15
     c3c:	f8 e0       	ldi	r31, 0x08	; 8
     c3e:	ff 8b       	std	Y+23, r31	; 0x17
     c40:	ed 89       	ldd	r30, Y+21	; 0x15
     c42:	fe 89       	ldd	r31, Y+22	; 0x16
     c44:	00 80       	ld	r0, Z
     c46:	8d 89       	ldd	r24, Y+21	; 0x15
     c48:	9e 89       	ldd	r25, Y+22	; 0x16
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	9e 8b       	std	Y+22, r25	; 0x16
     c4e:	8d 8b       	std	Y+21, r24	; 0x15
     c50:	eb 89       	ldd	r30, Y+19	; 0x13
     c52:	fc 89       	ldd	r31, Y+20	; 0x14
     c54:	00 82       	st	Z, r0
     c56:	8b 89       	ldd	r24, Y+19	; 0x13
     c58:	9c 89       	ldd	r25, Y+20	; 0x14
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	9c 8b       	std	Y+20, r25	; 0x14
     c5e:	8b 8b       	std	Y+19, r24	; 0x13
     c60:	9f 89       	ldd	r25, Y+23	; 0x17
     c62:	91 50       	subi	r25, 0x01	; 1
     c64:	9f 8b       	std	Y+23, r25	; 0x17
     c66:	ef 89       	ldd	r30, Y+23	; 0x17
     c68:	ee 23       	and	r30, r30
     c6a:	51 f7       	brne	.-44     	; 0xc40 <main+0x84>

	/*UART Initialization*/
	UART_init(&UART_Configurations);
     c6c:	ce 01       	movw	r24, r28
     c6e:	06 96       	adiw	r24, 0x06	; 6
     c70:	0e 94 c9 11 	call	0x2392	; 0x2392 <UART_init>

	/*RECEIVE CREATED PASSWORD*/
	CONTROL_ECU_receivePassword(created_password);
     c74:	83 ea       	ldi	r24, 0xA3	; 163
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CONTROL_ECU_receivePassword>

	/*RECEIVE SUBMITED PASSWORD*/
	CONTROL_ECU_receivePassword(re_password);
     c7c:	88 ea       	ldi	r24, 0xA8	; 168
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CONTROL_ECU_receivePassword>

	/*CHECK IF THE PASSWORD ARE MATCHED OR NO*/
	CONTROL_ECU_checkReceivedPasswords();
     c84:	0e 94 7e 06 	call	0xcfc	; 0xcfc <CONTROL_ECU_checkReceivedPasswords>

	/*STORE THE CREATED PASSWORD AFTER KNOWING THEY ARE MATCHED IN EEPROM*/
	CONTROL_ECU_storingAtEEPROM();
     c88:	0e 94 bc 06 	call	0xd78	; 0xd78 <CONTROL_ECU_storingAtEEPROM>

	while(1)
	{
		g_mode = UART_recieveByte();
     c8c:	0e 94 94 12 	call	0x2528	; 0x2528 <UART_recieveByte>
     c90:	80 93 94 00 	sts	0x0094, r24

		if(g_mode == OPEN_DOOR)
     c94:	80 91 94 00 	lds	r24, 0x0094
     c98:	8b 32       	cpi	r24, 0x2B	; 43
     c9a:	19 f4       	brne	.+6      	; 0xca2 <main+0xe6>
		{
			CONTROL_ECU_receiveOpenDoor();
     c9c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CONTROL_ECU_receiveOpenDoor>
     ca0:	f5 cf       	rjmp	.-22     	; 0xc8c <main+0xd0>
		}
		else if (g_mode == CHANGE_PASSWORD)
     ca2:	80 91 94 00 	lds	r24, 0x0094
     ca6:	8d 32       	cpi	r24, 0x2D	; 45
     ca8:	89 f7       	brne	.-30     	; 0xc8c <main+0xd0>
		{
			CONTROL_ECU_receiveChangedPassword();
     caa:	0e 94 3b 09 	call	0x1276	; 0x1276 <CONTROL_ECU_receiveChangedPassword>
     cae:	ee cf       	rjmp	.-36     	; 0xc8c <main+0xd0>

00000cb0 <CONTROL_ECU_receivePassword>:
		}
	}
}
void CONTROL_ECU_receivePassword(uint8* received_password)
{
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	00 d0       	rcall	.+0      	; 0xcba <CONTROL_ECU_receivePassword+0xa>
     cba:	0f 92       	push	r0
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	9b 83       	std	Y+3, r25	; 0x03
     cc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i = 0; i < PASSWORD_CHARACTERS; ++i)
     cc4:	19 82       	std	Y+1, r1	; 0x01
     cc6:	0f c0       	rjmp	.+30     	; 0xce6 <CONTROL_ECU_receivePassword+0x36>
	{
		*(received_password+i) = UART_recieveByte();
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	9b 81       	ldd	r25, Y+3	; 0x03
     cd2:	8c 01       	movw	r16, r24
     cd4:	02 0f       	add	r16, r18
     cd6:	13 1f       	adc	r17, r19
     cd8:	0e 94 94 12 	call	0x2528	; 0x2528 <UART_recieveByte>
     cdc:	f8 01       	movw	r30, r16
     cde:	80 83       	st	Z, r24
	}
}
void CONTROL_ECU_receivePassword(uint8* received_password)
{
	uint8 i;
	for(i = 0; i < PASSWORD_CHARACTERS; ++i)
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	8f 5f       	subi	r24, 0xFF	; 255
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	85 30       	cpi	r24, 0x05	; 5
     cea:	70 f3       	brcs	.-36     	; 0xcc8 <CONTROL_ECU_receivePassword+0x18>
	{
		*(received_password+i) = UART_recieveByte();
	}
}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <CONTROL_ECU_checkReceivedPasswords>:
void CONTROL_ECU_checkReceivedPasswords(void)
{
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	0f 92       	push	r0
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	uint8 i ;
	do
	{
		g_check = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 95 00 	sts	0x0095, r24


		for (i = 0; i < PASSWORD_CHARACTERS; i++)
     d0c:	19 82       	std	Y+1, r1	; 0x01
     d0e:	16 c0       	rjmp	.+44     	; 0xd3c <CONTROL_ECU_checkReceivedPasswords+0x40>
		{
			if (created_password[i] != re_password[i])
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	fc 01       	movw	r30, r24
     d18:	ed 55       	subi	r30, 0x5D	; 93
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	20 81       	ld	r18, Z
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	fc 01       	movw	r30, r24
     d26:	e8 55       	subi	r30, 0x58	; 88
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	80 81       	ld	r24, Z
     d2c:	28 17       	cp	r18, r24
     d2e:	19 f0       	breq	.+6      	; 0xd36 <CONTROL_ECU_checkReceivedPasswords+0x3a>
			{
				g_check = 0;
     d30:	10 92 95 00 	sts	0x0095, r1
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <CONTROL_ECU_checkReceivedPasswords+0x46>
	do
	{
		g_check = 1;


		for (i = 0; i < PASSWORD_CHARACTERS; i++)
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	85 30       	cpi	r24, 0x05	; 5
     d40:	38 f3       	brcs	.-50     	; 0xd10 <CONTROL_ECU_checkReceivedPasswords+0x14>
				break;
			}
		}


		if (g_check)
     d42:	80 91 95 00 	lds	r24, 0x0095
     d46:	88 23       	and	r24, r24
     d48:	21 f0       	breq	.+8      	; 0xd52 <CONTROL_ECU_checkReceivedPasswords+0x56>
		{
			UART_sendByte(SUCCESS);
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>
     d50:	0b c0       	rjmp	.+22     	; 0xd68 <CONTROL_ECU_checkReceivedPasswords+0x6c>
		}
		else
		{
			UART_sendByte(FAILED);
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>
			CONTROL_ECU_receivePassword(created_password);
     d58:	83 ea       	ldi	r24, 0xA3	; 163
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CONTROL_ECU_receivePassword>
			CONTROL_ECU_receivePassword(re_password);
     d60:	88 ea       	ldi	r24, 0xA8	; 168
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CONTROL_ECU_receivePassword>

		}

	} while (!g_check);
     d68:	80 91 95 00 	lds	r24, 0x0095
     d6c:	88 23       	and	r24, r24
     d6e:	59 f2       	breq	.-106    	; 0xd06 <CONTROL_ECU_checkReceivedPasswords+0xa>
}
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <CONTROL_ECU_storingAtEEPROM>:
void CONTROL_ECU_storingAtEEPROM(void)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	6d 97       	sbiw	r28, 0x1d	; 29
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	if(g_check)
     d8c:	80 91 95 00 	lds	r24, 0x0095
     d90:	88 23       	and	r24, r24
     d92:	09 f4       	brne	.+2      	; 0xd96 <CONTROL_ECU_storingAtEEPROM+0x1e>
     d94:	16 c1       	rjmp	.+556    	; 0xfc2 <CONTROL_ECU_storingAtEEPROM+0x24a>
	{
		for(i =0; i<PASSWORD_CHARACTERS; ++i)
     d96:	1d 8e       	std	Y+29, r1	; 0x1d
     d98:	86 c0       	rjmp	.+268    	; 0xea6 <CONTROL_ECU_storingAtEEPROM+0x12e>
		{
			EEPROM_writeByte(EEPROM_ADDRESS+i,*(created_password+i));
     d9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	8f 5e       	subi	r24, 0xEF	; 239
     da2:	9c 4f       	sbci	r25, 0xFC	; 252
     da4:	ac 01       	movw	r20, r24
     da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	fc 01       	movw	r30, r24
     dae:	ed 55       	subi	r30, 0x5D	; 93
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	20 81       	ld	r18, Z
     db4:	ca 01       	movw	r24, r20
     db6:	62 2f       	mov	r22, r18
     db8:	0e 94 25 0a 	call	0x144a	; 0x144a <EEPROM_writeByte>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	a0 e2       	ldi	r26, 0x20	; 32
     dc2:	b1 e4       	ldi	r27, 0x41	; 65
     dc4:	89 8f       	std	Y+25, r24	; 0x19
     dc6:	9a 8f       	std	Y+26, r25	; 0x1a
     dc8:	ab 8f       	std	Y+27, r26	; 0x1b
     dca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dcc:	69 8d       	ldd	r22, Y+25	; 0x19
     dce:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	4a ef       	ldi	r20, 0xFA	; 250
     dda:	54 e4       	ldi	r21, 0x44	; 68
     ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	8d 8b       	std	Y+21, r24	; 0x15
     de6:	9e 8b       	std	Y+22, r25	; 0x16
     de8:	af 8b       	std	Y+23, r26	; 0x17
     dea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dec:	6d 89       	ldd	r22, Y+21	; 0x15
     dee:	7e 89       	ldd	r23, Y+22	; 0x16
     df0:	8f 89       	ldd	r24, Y+23	; 0x17
     df2:	98 8d       	ldd	r25, Y+24	; 0x18
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e8       	ldi	r20, 0x80	; 128
     dfa:	5f e3       	ldi	r21, 0x3F	; 63
     dfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e00:	88 23       	and	r24, r24
     e02:	2c f4       	brge	.+10     	; 0xe0e <CONTROL_ECU_storingAtEEPROM+0x96>
		__ticks = 1;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	9c 8b       	std	Y+20, r25	; 0x14
     e0a:	8b 8b       	std	Y+19, r24	; 0x13
     e0c:	3f c0       	rjmp	.+126    	; 0xe8c <CONTROL_ECU_storingAtEEPROM+0x114>
	else if (__tmp > 65535)
     e0e:	6d 89       	ldd	r22, Y+21	; 0x15
     e10:	7e 89       	ldd	r23, Y+22	; 0x16
     e12:	8f 89       	ldd	r24, Y+23	; 0x17
     e14:	98 8d       	ldd	r25, Y+24	; 0x18
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	3f ef       	ldi	r19, 0xFF	; 255
     e1a:	4f e7       	ldi	r20, 0x7F	; 127
     e1c:	57 e4       	ldi	r21, 0x47	; 71
     e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e22:	18 16       	cp	r1, r24
     e24:	4c f5       	brge	.+82     	; 0xe78 <CONTROL_ECU_storingAtEEPROM+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e26:	69 8d       	ldd	r22, Y+25	; 0x19
     e28:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e2       	ldi	r20, 0x20	; 32
     e34:	51 e4       	ldi	r21, 0x41	; 65
     e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	bc 01       	movw	r22, r24
     e40:	cd 01       	movw	r24, r26
     e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	9c 8b       	std	Y+20, r25	; 0x14
     e4c:	8b 8b       	std	Y+19, r24	; 0x13
     e4e:	0f c0       	rjmp	.+30     	; 0xe6e <CONTROL_ECU_storingAtEEPROM+0xf6>
     e50:	88 ec       	ldi	r24, 0xC8	; 200
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9a 8b       	std	Y+18, r25	; 0x12
     e56:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e58:	89 89       	ldd	r24, Y+17	; 0x11
     e5a:	9a 89       	ldd	r25, Y+18	; 0x12
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <CONTROL_ECU_storingAtEEPROM+0xe4>
     e60:	9a 8b       	std	Y+18, r25	; 0x12
     e62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e64:	8b 89       	ldd	r24, Y+19	; 0x13
     e66:	9c 89       	ldd	r25, Y+20	; 0x14
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	9c 8b       	std	Y+20, r25	; 0x14
     e6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6e:	8b 89       	ldd	r24, Y+19	; 0x13
     e70:	9c 89       	ldd	r25, Y+20	; 0x14
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	69 f7       	brne	.-38     	; 0xe50 <CONTROL_ECU_storingAtEEPROM+0xd8>
     e76:	14 c0       	rjmp	.+40     	; 0xea0 <CONTROL_ECU_storingAtEEPROM+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e78:	6d 89       	ldd	r22, Y+21	; 0x15
     e7a:	7e 89       	ldd	r23, Y+22	; 0x16
     e7c:	8f 89       	ldd	r24, Y+23	; 0x17
     e7e:	98 8d       	ldd	r25, Y+24	; 0x18
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9c 8b       	std	Y+20, r25	; 0x14
     e8a:	8b 8b       	std	Y+19, r24	; 0x13
     e8c:	8b 89       	ldd	r24, Y+19	; 0x13
     e8e:	9c 89       	ldd	r25, Y+20	; 0x14
     e90:	98 8b       	std	Y+16, r25	; 0x10
     e92:	8f 87       	std	Y+15, r24	; 0x0f
     e94:	8f 85       	ldd	r24, Y+15	; 0x0f
     e96:	98 89       	ldd	r25, Y+16	; 0x10
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <CONTROL_ECU_storingAtEEPROM+0x120>
     e9c:	98 8b       	std	Y+16, r25	; 0x10
     e9e:	8f 87       	std	Y+15, r24	; 0x0f
void CONTROL_ECU_storingAtEEPROM(void)
{
	uint8 i;
	if(g_check)
	{
		for(i =0; i<PASSWORD_CHARACTERS; ++i)
     ea0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	8d 8f       	std	Y+29, r24	; 0x1d
     ea6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea8:	85 30       	cpi	r24, 0x05	; 5
     eaa:	08 f4       	brcc	.+2      	; 0xeae <CONTROL_ECU_storingAtEEPROM+0x136>
     eac:	76 cf       	rjmp	.-276    	; 0xd9a <CONTROL_ECU_storingAtEEPROM+0x22>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a0 e2       	ldi	r26, 0x20	; 32
     eb4:	b1 e4       	ldi	r27, 0x41	; 65
     eb6:	8b 87       	std	Y+11, r24	; 0x0b
     eb8:	9c 87       	std	Y+12, r25	; 0x0c
     eba:	ad 87       	std	Y+13, r26	; 0x0d
     ebc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ebe:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	4a ef       	ldi	r20, 0xFA	; 250
     ecc:	54 e4       	ldi	r21, 0x44	; 68
     ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	8f 83       	std	Y+7, r24	; 0x07
     ed8:	98 87       	std	Y+8, r25	; 0x08
     eda:	a9 87       	std	Y+9, r26	; 0x09
     edc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ede:	6f 81       	ldd	r22, Y+7	; 0x07
     ee0:	78 85       	ldd	r23, Y+8	; 0x08
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e8       	ldi	r20, 0x80	; 128
     eec:	5f e3       	ldi	r21, 0x3F	; 63
     eee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef2:	88 23       	and	r24, r24
     ef4:	2c f4       	brge	.+10     	; 0xf00 <CONTROL_ECU_storingAtEEPROM+0x188>
		__ticks = 1;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	3f c0       	rjmp	.+126    	; 0xf7e <CONTROL_ECU_storingAtEEPROM+0x206>
	else if (__tmp > 65535)
     f00:	6f 81       	ldd	r22, Y+7	; 0x07
     f02:	78 85       	ldd	r23, Y+8	; 0x08
     f04:	89 85       	ldd	r24, Y+9	; 0x09
     f06:	9a 85       	ldd	r25, Y+10	; 0x0a
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	3f ef       	ldi	r19, 0xFF	; 255
     f0c:	4f e7       	ldi	r20, 0x7F	; 127
     f0e:	57 e4       	ldi	r21, 0x47	; 71
     f10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f14:	18 16       	cp	r1, r24
     f16:	4c f5       	brge	.+82     	; 0xf6a <CONTROL_ECU_storingAtEEPROM+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f18:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e2       	ldi	r20, 0x20	; 32
     f26:	51 e4       	ldi	r21, 0x41	; 65
     f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	9e 83       	std	Y+6, r25	; 0x06
     f3e:	8d 83       	std	Y+5, r24	; 0x05
     f40:	0f c0       	rjmp	.+30     	; 0xf60 <CONTROL_ECU_storingAtEEPROM+0x1e8>
     f42:	88 ec       	ldi	r24, 0xC8	; 200
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	9c 83       	std	Y+4, r25	; 0x04
     f48:	8b 83       	std	Y+3, r24	; 0x03
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <CONTROL_ECU_storingAtEEPROM+0x1d6>
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	69 f7       	brne	.-38     	; 0xf42 <CONTROL_ECU_storingAtEEPROM+0x1ca>
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <CONTROL_ECU_storingAtEEPROM+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6a:	6f 81       	ldd	r22, Y+7	; 0x07
     f6c:	78 85       	ldd	r23, Y+8	; 0x08
     f6e:	89 85       	ldd	r24, Y+9	; 0x09
     f70:	9a 85       	ldd	r25, Y+10	; 0x0a
     f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9e 83       	std	Y+6, r25	; 0x06
     f7c:	8d 83       	std	Y+5, r24	; 0x05
     f7e:	8d 81       	ldd	r24, Y+5	; 0x05
     f80:	9e 81       	ldd	r25, Y+6	; 0x06
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <CONTROL_ECU_storingAtEEPROM+0x212>
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	89 83       	std	Y+1, r24	; 0x01
			EEPROM_writeByte(EEPROM_ADDRESS+i,*(created_password+i));
			_delay_ms(10);
		}
		_delay_ms(10);

		for(i = 0; i<PASSWORD_CHARACTERS; ++i)
     f92:	1d 8e       	std	Y+29, r1	; 0x1d
     f94:	13 c0       	rjmp	.+38     	; 0xfbc <CONTROL_ECU_storingAtEEPROM+0x244>
		{
			EEPROM_readByte(EEPROM_ADDRESS+i,&saved_password[i]);
     f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	8f 5e       	subi	r24, 0xEF	; 239
     f9e:	9c 4f       	sbci	r25, 0xFC	; 252
     fa0:	ac 01       	movw	r20, r24
     fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9c 01       	movw	r18, r24
     faa:	22 55       	subi	r18, 0x52	; 82
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	ca 01       	movw	r24, r20
     fb0:	b9 01       	movw	r22, r18
     fb2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <EEPROM_readByte>
			EEPROM_writeByte(EEPROM_ADDRESS+i,*(created_password+i));
			_delay_ms(10);
		}
		_delay_ms(10);

		for(i = 0; i<PASSWORD_CHARACTERS; ++i)
     fb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	8d 8f       	std	Y+29, r24	; 0x1d
     fbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fbe:	85 30       	cpi	r24, 0x05	; 5
     fc0:	50 f3       	brcs	.-44     	; 0xf96 <CONTROL_ECU_storingAtEEPROM+0x21e>
		{
			EEPROM_readByte(EEPROM_ADDRESS+i,&saved_password[i]);
		}
	}
}
     fc2:	6d 96       	adiw	r28, 0x1d	; 29
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <CONTROL_ECU_receiveOpenDoor>:
void CONTROL_ECU_receiveOpenDoor(void)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	a5 97       	sbiw	r28, 0x25	; 37
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
	/*RECEIVE THE PASSWORD ENTERED BY USER*/
	CONTROL_ECU_receivePassword(password_entered_by_user);
     fe8:	8e e9       	ldi	r24, 0x9E	; 158
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CONTROL_ECU_receivePassword>

	uint8 i;

	/*ASSUME THAT THE PASSWORD IS MATCHED WITH THE SAVED PASSWORD IN THE EEPROM*/
	g_check = 1;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 95 00 	sts	0x0095, r24
	for(i = 0; i < PASSWORD_CHARACTERS; ++i)
     ff6:	19 82       	std	Y+1, r1	; 0x01
     ff8:	16 c0       	rjmp	.+44     	; 0x1026 <CONTROL_ECU_receiveOpenDoor+0x52>
	{
		if(*(saved_password+i) != *(password_entered_by_user+i))
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	fc 01       	movw	r30, r24
    1002:	e2 55       	subi	r30, 0x52	; 82
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	20 81       	ld	r18, Z
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	fc 01       	movw	r30, r24
    1010:	e2 56       	subi	r30, 0x62	; 98
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	28 17       	cp	r18, r24
    1018:	19 f0       	breq	.+6      	; 0x1020 <CONTROL_ECU_receiveOpenDoor+0x4c>
		{
			g_check = 0;
    101a:	10 92 95 00 	sts	0x0095, r1
    101e:	06 c0       	rjmp	.+12     	; 0x102c <CONTROL_ECU_receiveOpenDoor+0x58>

	uint8 i;

	/*ASSUME THAT THE PASSWORD IS MATCHED WITH THE SAVED PASSWORD IN THE EEPROM*/
	g_check = 1;
	for(i = 0; i < PASSWORD_CHARACTERS; ++i)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	85 30       	cpi	r24, 0x05	; 5
    102a:	38 f3       	brcs	.-50     	; 0xffa <CONTROL_ECU_receiveOpenDoor+0x26>
		{
			g_check = 0;
			break;
		}
	}
	if(g_check)
    102c:	80 91 95 00 	lds	r24, 0x0095
    1030:	88 23       	and	r24, r24
    1032:	09 f4       	brne	.+2      	; 0x1036 <CONTROL_ECU_receiveOpenDoor+0x62>
    1034:	77 c0       	rjmp	.+238    	; 0x1124 <CONTROL_ECU_receiveOpenDoor+0x150>
	{
		/*IF PASSWORD ENTERED BY USER MATCHES THE ONE SAVED IN THE EEPROM*/

		UART_sendByte(SUCCESS);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>

		/*TIMER CONFIGURATIONS*/
		Timer_ConfigType Timer1_Configurations_1 = {0,3910,TIMER_1,F_CPU_1024,COMPARE_MODE};
    103c:	ce 01       	movw	r24, r28
    103e:	02 96       	adiw	r24, 0x02	; 2
    1040:	98 8f       	std	Y+24, r25	; 0x18
    1042:	8f 8b       	std	Y+23, r24	; 0x17
    1044:	e5 e8       	ldi	r30, 0x85	; 133
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	fa 8f       	std	Y+26, r31	; 0x1a
    104a:	e9 8f       	std	Y+25, r30	; 0x19
    104c:	f7 e0       	ldi	r31, 0x07	; 7
    104e:	fb 8f       	std	Y+27, r31	; 0x1b
    1050:	e9 8d       	ldd	r30, Y+25	; 0x19
    1052:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1054:	00 80       	ld	r0, Z
    1056:	89 8d       	ldd	r24, Y+25	; 0x19
    1058:	9a 8d       	ldd	r25, Y+26	; 0x1a
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	9a 8f       	std	Y+26, r25	; 0x1a
    105e:	89 8f       	std	Y+25, r24	; 0x19
    1060:	ef 89       	ldd	r30, Y+23	; 0x17
    1062:	f8 8d       	ldd	r31, Y+24	; 0x18
    1064:	00 82       	st	Z, r0
    1066:	8f 89       	ldd	r24, Y+23	; 0x17
    1068:	98 8d       	ldd	r25, Y+24	; 0x18
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	98 8f       	std	Y+24, r25	; 0x18
    106e:	8f 8b       	std	Y+23, r24	; 0x17
    1070:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1072:	91 50       	subi	r25, 0x01	; 1
    1074:	9b 8f       	std	Y+27, r25	; 0x1b
    1076:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1078:	ee 23       	and	r30, r30
    107a:	51 f7       	brne	.-44     	; 0x1050 <CONTROL_ECU_receiveOpenDoor+0x7c>

		/*TIMER INITIALIZATION*/
		Timer_init(&Timer1_Configurations_1);
    107c:	ce 01       	movw	r24, r28
    107e:	02 96       	adiw	r24, 0x02	; 2
    1080:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Timer_init>

		/*CALL BACK FUNCTION THAT EXECUTED IN THE ISR THAT OPENS DOOR*/
		Timer_setCallBack(CONTROL_ECU_rotateMotor_CW,TIMER_1);
    1084:	89 ed       	ldi	r24, 0xD9	; 217
    1086:	98 e0       	ldi	r25, 0x08	; 8
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <Timer_setCallBack>

		/*WAIT FOR TIMER TO FINISH COUNTING*/
		while(!g_timer_flag);
    108e:	80 91 97 00 	lds	r24, 0x0097
    1092:	88 23       	and	r24, r24
    1094:	e1 f3       	breq	.-8      	; 0x108e <CONTROL_ECU_receiveOpenDoor+0xba>

		/*CLEAR THE TIMER FLAG TO USE IT ANOTHER TIME IF WE NEED THAT*/
		g_timer_flag=0;
    1096:	10 92 97 00 	sts	0x0097, r1

		/*ATTEMPTS THAT THE USER HAVE TO ENTER THE PASSWORD ARE 3 ATTEMPTS*/
		g_attempts=3;
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	80 93 69 00 	sts	0x0069, r24

		/*CHECK IF THERE ARE PEOPLE ENTERING OR NO*/
		if (PIR_getState())
    10a0:	0e 94 af 05 	call	0xb5e	; 0xb5e <PIR_getState>
    10a4:	88 23       	and	r24, r24
    10a6:	59 f0       	breq	.+22     	; 0x10be <CONTROL_ECU_receiveOpenDoor+0xea>
		{
			UART_sendByte(SUCCESS);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>

			/*WAIT UNTIL PEOPLE ENTER HOME*/
			while(PIR_getState());
    10ae:	0e 94 af 05 	call	0xb5e	; 0xb5e <PIR_getState>
    10b2:	88 23       	and	r24, r24
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <CONTROL_ECU_receiveOpenDoor+0xda>

			/*PEOPLE ENTERED HOME*/
			UART_sendByte(PIR_DONE);
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <CONTROL_ECU_receiveOpenDoor+0xf0>
		}
		else
		{
			/*THERE IS NO PEOPLE ENTER*/
			UART_sendByte(FAILED);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>
		}

		/*TIMER CONFIGURATIONS*/
		Timer_ConfigType Timer1_Configurations_2 = {0,3910,TIMER_1,F_CPU_1024,COMPARE_MODE};
    10c4:	ce 01       	movw	r24, r28
    10c6:	09 96       	adiw	r24, 0x09	; 9
    10c8:	9d 8f       	std	Y+29, r25	; 0x1d
    10ca:	8c 8f       	std	Y+28, r24	; 0x1c
    10cc:	ee e7       	ldi	r30, 0x7E	; 126
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	ff 8f       	std	Y+31, r31	; 0x1f
    10d2:	ee 8f       	std	Y+30, r30	; 0x1e
    10d4:	f7 e0       	ldi	r31, 0x07	; 7
    10d6:	f8 a3       	std	Y+32, r31	; 0x20
    10d8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    10da:	ff 8d       	ldd	r31, Y+31	; 0x1f
    10dc:	00 80       	ld	r0, Z
    10de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	9f 8f       	std	Y+31, r25	; 0x1f
    10e6:	8e 8f       	std	Y+30, r24	; 0x1e
    10e8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    10ea:	fd 8d       	ldd	r31, Y+29	; 0x1d
    10ec:	00 82       	st	Z, r0
    10ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	9d 8f       	std	Y+29, r25	; 0x1d
    10f6:	8c 8f       	std	Y+28, r24	; 0x1c
    10f8:	98 a1       	ldd	r25, Y+32	; 0x20
    10fa:	91 50       	subi	r25, 0x01	; 1
    10fc:	98 a3       	std	Y+32, r25	; 0x20
    10fe:	e8 a1       	ldd	r30, Y+32	; 0x20
    1100:	ee 23       	and	r30, r30
    1102:	51 f7       	brne	.-44     	; 0x10d8 <CONTROL_ECU_receiveOpenDoor+0x104>

		/*TIMER INITIALIZATION*/
		Timer_init(&Timer1_Configurations_2);
    1104:	ce 01       	movw	r24, r28
    1106:	09 96       	adiw	r24, 0x09	; 9
    1108:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Timer_init>

		/*CALL BACK FUNCTION THAT EXECUTED IN THE ISR THAT CLOSES DOOR*/
		Timer_setCallBack( CONTROL_ECU_rotateMotor_ACW,TIMER_1);
    110c:	8b ef       	ldi	r24, 0xFB	; 251
    110e:	98 e0       	ldi	r25, 0x08	; 8
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <Timer_setCallBack>

		/*WAIT FOR TIMER TO FINISH COUNTING*/
		while(!g_timer_flag);
    1116:	80 91 97 00 	lds	r24, 0x0097
    111a:	88 23       	and	r24, r24
    111c:	e1 f3       	breq	.-8      	; 0x1116 <CONTROL_ECU_receiveOpenDoor+0x142>

		/*CLEAR THE TIMER FLAG TO USE IT ANOTHER TIME IF WE NEED THAT*/
		g_timer_flag=0;
    111e:	10 92 97 00 	sts	0x0097, r1
    1122:	3e c0       	rjmp	.+124    	; 0x11a0 <CONTROL_ECU_receiveOpenDoor+0x1cc>
	}
	else
	{
		/*IF PASSWORD ENTERED BY USER DOESN'T MATCH THE ONE SAVED IN THE EEPROM*/

		UART_sendByte(FAILED);
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>

		/*ONE ATTEMPT IS USED*/
		g_attempts--;
    112a:	80 91 69 00 	lds	r24, 0x0069
    112e:	81 50       	subi	r24, 0x01	; 1
    1130:	80 93 69 00 	sts	0x0069, r24

		/*LOCK THE SYSTEM AFTER 3 WRONG ATTEMPTS*/
		if (g_attempts == 0)
    1134:	80 91 69 00 	lds	r24, 0x0069
    1138:	88 23       	and	r24, r24
    113a:	91 f5       	brne	.+100    	; 0x11a0 <CONTROL_ECU_receiveOpenDoor+0x1cc>
		{
			/*TIMER CONFIGURATIONS*/
			Timer_ConfigType Timer1_Configurations_3 = {0,3910,TIMER_1,F_CPU_1024,COMPARE_MODE};
    113c:	ce 01       	movw	r24, r28
    113e:	40 96       	adiw	r24, 0x10	; 16
    1140:	9a a3       	std	Y+34, r25	; 0x22
    1142:	89 a3       	std	Y+33, r24	; 0x21
    1144:	e7 e7       	ldi	r30, 0x77	; 119
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	fc a3       	std	Y+36, r31	; 0x24
    114a:	eb a3       	std	Y+35, r30	; 0x23
    114c:	f7 e0       	ldi	r31, 0x07	; 7
    114e:	fd a3       	std	Y+37, r31	; 0x25
    1150:	eb a1       	ldd	r30, Y+35	; 0x23
    1152:	fc a1       	ldd	r31, Y+36	; 0x24
    1154:	00 80       	ld	r0, Z
    1156:	8b a1       	ldd	r24, Y+35	; 0x23
    1158:	9c a1       	ldd	r25, Y+36	; 0x24
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	9c a3       	std	Y+36, r25	; 0x24
    115e:	8b a3       	std	Y+35, r24	; 0x23
    1160:	e9 a1       	ldd	r30, Y+33	; 0x21
    1162:	fa a1       	ldd	r31, Y+34	; 0x22
    1164:	00 82       	st	Z, r0
    1166:	89 a1       	ldd	r24, Y+33	; 0x21
    1168:	9a a1       	ldd	r25, Y+34	; 0x22
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	9a a3       	std	Y+34, r25	; 0x22
    116e:	89 a3       	std	Y+33, r24	; 0x21
    1170:	9d a1       	ldd	r25, Y+37	; 0x25
    1172:	91 50       	subi	r25, 0x01	; 1
    1174:	9d a3       	std	Y+37, r25	; 0x25
    1176:	ed a1       	ldd	r30, Y+37	; 0x25
    1178:	ee 23       	and	r30, r30
    117a:	51 f7       	brne	.-44     	; 0x1150 <CONTROL_ECU_receiveOpenDoor+0x17c>

			/*TIMER INITIALIZATION*/
			Timer_init(&Timer1_Configurations_3);
    117c:	ce 01       	movw	r24, r28
    117e:	40 96       	adiw	r24, 0x10	; 16
    1180:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Timer_init>

			/*CALL BACK FUNCTION THAT EXECUTED IN THE ISR THAT ALERTS AND TURN ON THE BUZZER*/
			Timer_setCallBack(CONTROL_ECU_TURN_BUZZER, TIMER_1);
    1184:	8d e1       	ldi	r24, 0x1D	; 29
    1186:	99 e0       	ldi	r25, 0x09	; 9
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <Timer_setCallBack>

			/*WAIT FOR TIMER TO FINISH COUNTING*/
			while(!g_timer_flag);
    118e:	80 91 97 00 	lds	r24, 0x0097
    1192:	88 23       	and	r24, r24
    1194:	e1 f3       	breq	.-8      	; 0x118e <CONTROL_ECU_receiveOpenDoor+0x1ba>

			/*CLEAR THE TIMER FLAG TO USE IT ANOTHER TIME IF WE NEED THAT*/
			g_timer_flag=0;
    1196:	10 92 97 00 	sts	0x0097, r1

			/*RETURN USER'S ATTEMPTS FOR 3 ATTEMPTS AGAIN*/
			g_attempts=3;
    119a:	83 e0       	ldi	r24, 0x03	; 3
    119c:	80 93 69 00 	sts	0x0069, r24
		}
	}
}
    11a0:	a5 96       	adiw	r28, 0x25	; 37
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <CONTROL_ECU_rotateMotor_CW>:


void CONTROL_ECU_rotateMotor_CW(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	/*INCREMENT COUNTS FOR EACH TIMER TICK*/
	g_count++;
    11ba:	80 91 96 00 	lds	r24, 0x0096
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	80 93 96 00 	sts	0x0096, r24

	/*CLEAR THE TIMER FLAG TO USE IT ANOTHER TIME IF WE NEED THAT*/
	g_timer_flag=0;
    11c4:	10 92 97 00 	sts	0x0097, r1

	/*ROTATE THE DC MOTOR CW WITH FULL SPEED TO OPEN THE DOOR*/
	Dc_Motor_Rotate(CW , FULL_SPEED);
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	64 e6       	ldi	r22, 0x64	; 100
    11cc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Dc_Motor_Rotate>

	/*CHECKS IF 15 SECONDS HAVE BEEN FINISHED OR NO*/
	if (g_count == 16)
    11d0:	80 91 96 00 	lds	r24, 0x0096
    11d4:	80 31       	cpi	r24, 0x10	; 16
    11d6:	61 f4       	brne	.+24     	; 0x11f0 <CONTROL_ECU_rotateMotor_CW+0x3e>
	{
		/*STOP THE MOTOR*/
		Dc_Motor_Rotate(OFF , STOP);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Dc_Motor_Rotate>

		/*STOP THE TIMER*/
		Timer_deInit(TIMER_1);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 98 10 	call	0x2130	; 0x2130 <Timer_deInit>

		/*RESET COUNTER*/
		g_count = 0;
    11e6:	10 92 96 00 	sts	0x0096, r1

		/*SET TIMER FLAG TO 1 TO MAKE THE CONTROL KNOW THAT TIMER FINISHED HIS MISSIOM*/
		g_timer_flag=1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	80 93 97 00 	sts	0x0097, r24
	}
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <CONTROL_ECU_rotateMotor_ACW>:
void CONTROL_ECU_rotateMotor_ACW(void)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	/*INCREMENT COUNTS FOR EACH TIMER TICK*/
	g_count++;
    11fe:	80 91 96 00 	lds	r24, 0x0096
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	80 93 96 00 	sts	0x0096, r24

	/*CLEAR THE TIMER FLAG TO USE IT ANOTHER TIME IF WE NEED THAT*/
	g_timer_flag=0;
    1208:	10 92 97 00 	sts	0x0097, r1

	/*ROTATE THE DC MOTOR A-CW WITH FULL SPEED TO CLOSE THE DOOR*/
	Dc_Motor_Rotate(ACW , FULL_SPEED);
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	64 e6       	ldi	r22, 0x64	; 100
    1210:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Dc_Motor_Rotate>

	/*CHECKS IF 15 SECONDS HAVE BEEN FINISHED OR NO*/
	if (g_count == 16)
    1214:	80 91 96 00 	lds	r24, 0x0096
    1218:	80 31       	cpi	r24, 0x10	; 16
    121a:	61 f4       	brne	.+24     	; 0x1234 <CONTROL_ECU_rotateMotor_ACW+0x3e>
	{
		/*STOP THE MOTOR*/
		Dc_Motor_Rotate(OFF , STOP);
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Dc_Motor_Rotate>

		/*STOP THE TIMER*/
		Timer_deInit(TIMER_1);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	0e 94 98 10 	call	0x2130	; 0x2130 <Timer_deInit>

		/*RESET COUNTER*/
		g_count = 0;
    122a:	10 92 96 00 	sts	0x0096, r1

		/*SET TIMER FLAG TO 1 TO MAKE THE CONTROL KNOW THAT TIMER FINISHED HIS MISSIOM*/
		g_timer_flag=1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	80 93 97 00 	sts	0x0097, r24
	}
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <CONTROL_ECU_TURN_BUZZER>:
void CONTROL_ECU_TURN_BUZZER(void)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	/*INCREMENT COUNTS FOR EACH TIMER TICK*/
	g_count++;
    1242:	80 91 96 00 	lds	r24, 0x0096
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	80 93 96 00 	sts	0x0096, r24

	/*CLEAR THE TIMER FLAG TO USE IT ANOTHER TIME IF WE NEED THAT*/
	g_timer_flag=0;
    124c:	10 92 97 00 	sts	0x0097, r1

	/*TURN ON THE BUZZER*/
	BUZZER_on();
    1250:	0e 94 c6 05 	call	0xb8c	; 0xb8c <BUZZER_on>

	/*CHECKS IF ONE MINUTE HAS BEEN FINISHED OR NO*/
	if (g_count == 62)
    1254:	80 91 96 00 	lds	r24, 0x0096
    1258:	8e 33       	cpi	r24, 0x3E	; 62
    125a:	51 f4       	brne	.+20     	; 0x1270 <CONTROL_ECU_TURN_BUZZER+0x36>
	{
		/*TURN OFF THE BUZZER*/
		BUZZER_off();
    125c:	0e 94 d2 05 	call	0xba4	; 0xba4 <BUZZER_off>

		/*STOP THE TIMER*/
		Timer_deInit(TIMER_1);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	0e 94 98 10 	call	0x2130	; 0x2130 <Timer_deInit>

		/*RESET COUNTER*/
		g_count = 0;
    1266:	10 92 96 00 	sts	0x0096, r1

		/*SET TIMER FLAG TO 1 TO MAKE THE CONTROL KNOW THAT TIMER FINISHED HIS MISSIOM*/
		g_timer_flag=1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	80 93 97 00 	sts	0x0097, r24
	}
}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <CONTROL_ECU_receiveChangedPassword>:
void CONTROL_ECU_receiveChangedPassword(void)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	2d 97       	sbiw	r28, 0x0d	; 13
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
	/*RECEIVE THE PASSWORD ENTERED BY USER*/
	CONTROL_ECU_receivePassword(password_entered_by_user);
    128a:	8e e9       	ldi	r24, 0x9E	; 158
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CONTROL_ECU_receivePassword>

	uint8 i;

	/*ASSUME THAT THE PASSWORD IS MATCHED WITH THE SAVED PASSWORD IN THE EEPROM*/
	g_check = 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 95 00 	sts	0x0095, r24


	for (i = 0; i < PASSWORD_CHARACTERS; i++)
    1298:	19 82       	std	Y+1, r1	; 0x01
    129a:	16 c0       	rjmp	.+44     	; 0x12c8 <CONTROL_ECU_receiveChangedPassword+0x52>
	{
		if (saved_password[i] != password_entered_by_user[i])
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	fc 01       	movw	r30, r24
    12a4:	e2 55       	subi	r30, 0x52	; 82
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	20 81       	ld	r18, Z
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	fc 01       	movw	r30, r24
    12b2:	e2 56       	subi	r30, 0x62	; 98
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	80 81       	ld	r24, Z
    12b8:	28 17       	cp	r18, r24
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <CONTROL_ECU_receiveChangedPassword+0x4c>
		{
			g_check = 0;
    12bc:	10 92 95 00 	sts	0x0095, r1
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <CONTROL_ECU_receiveChangedPassword+0x58>

	/*ASSUME THAT THE PASSWORD IS MATCHED WITH THE SAVED PASSWORD IN THE EEPROM*/
	g_check = 1;


	for (i = 0; i < PASSWORD_CHARACTERS; i++)
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	38 f3       	brcs	.-50     	; 0x129c <CONTROL_ECU_receiveChangedPassword+0x26>
			break;
		}
	}


	if (g_check)
    12ce:	80 91 95 00 	lds	r24, 0x0095
    12d2:	88 23       	and	r24, r24
    12d4:	99 f0       	breq	.+38     	; 0x12fc <CONTROL_ECU_receiveChangedPassword+0x86>
	{
		/*IF USER ENTERES HIS/HER PASSWORD CORRECTLY*/
		UART_sendByte(SUCCESS);
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>

		/*RECEIVE THE NEW PASSWORD AND ITS SUBMISSION*/
		CONTROL_ECU_receivePassword(created_password);
    12dc:	83 ea       	ldi	r24, 0xA3	; 163
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CONTROL_ECU_receivePassword>
		CONTROL_ECU_receivePassword(re_password);
    12e4:	88 ea       	ldi	r24, 0xA8	; 168
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CONTROL_ECU_receivePassword>

		/*CHECK IF THE NEW PASSWORD AND ITS SUBMISSION ARE MATCHED OR NO*/
		CONTROL_ECU_checkReceivedPasswords();
    12ec:	0e 94 7e 06 	call	0xcfc	; 0xcfc <CONTROL_ECU_checkReceivedPasswords>

		/*STORE THE NEW PASSWORD IN EEPROM IF THE NEW PASSWORD AND ITS SUBMISSION ARE MATCHED*/
		CONTROL_ECU_storingAtEEPROM();
    12f0:	0e 94 bc 06 	call	0xd78	; 0xd78 <CONTROL_ECU_storingAtEEPROM>

		/*RETURN USER'S ATTEMPTS FOR 3 ATTEMPTS AGAIN*/
		g_attempts=3;
    12f4:	83 e0       	ldi	r24, 0x03	; 3
    12f6:	80 93 69 00 	sts	0x0069, r24
    12fa:	3e c0       	rjmp	.+124    	; 0x1378 <CONTROL_ECU_receiveChangedPassword+0x102>
	}
	else
	{
		/*IF USER ENTERES HIS/HER PASSWORD WRONGLY*/

		UART_sendByte(FAILED);
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>

		/*ONE ATTEMPT IS USED*/
		g_attempts--;
    1302:	80 91 69 00 	lds	r24, 0x0069
    1306:	81 50       	subi	r24, 0x01	; 1
    1308:	80 93 69 00 	sts	0x0069, r24

		/*LOCK THE SYSTEM AFTER 3 WRONG ATTEMPTS*/
		if (g_attempts == 0)
    130c:	80 91 69 00 	lds	r24, 0x0069
    1310:	88 23       	and	r24, r24
    1312:	91 f5       	brne	.+100    	; 0x1378 <CONTROL_ECU_receiveChangedPassword+0x102>
		{
			/*TIMER CONFIGURATIONS*/
			Timer_ConfigType Timer1_Configurations_1 = {0,3910,TIMER_1,F_CPU_1024,COMPARE_MODE};
    1314:	ce 01       	movw	r24, r28
    1316:	02 96       	adiw	r24, 0x02	; 2
    1318:	9a 87       	std	Y+10, r25	; 0x0a
    131a:	89 87       	std	Y+9, r24	; 0x09
    131c:	ec e8       	ldi	r30, 0x8C	; 140
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	fc 87       	std	Y+12, r31	; 0x0c
    1322:	eb 87       	std	Y+11, r30	; 0x0b
    1324:	f7 e0       	ldi	r31, 0x07	; 7
    1326:	fd 87       	std	Y+13, r31	; 0x0d
    1328:	eb 85       	ldd	r30, Y+11	; 0x0b
    132a:	fc 85       	ldd	r31, Y+12	; 0x0c
    132c:	00 80       	ld	r0, Z
    132e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1330:	9c 85       	ldd	r25, Y+12	; 0x0c
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	9c 87       	std	Y+12, r25	; 0x0c
    1336:	8b 87       	std	Y+11, r24	; 0x0b
    1338:	e9 85       	ldd	r30, Y+9	; 0x09
    133a:	fa 85       	ldd	r31, Y+10	; 0x0a
    133c:	00 82       	st	Z, r0
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	9a 87       	std	Y+10, r25	; 0x0a
    1346:	89 87       	std	Y+9, r24	; 0x09
    1348:	9d 85       	ldd	r25, Y+13	; 0x0d
    134a:	91 50       	subi	r25, 0x01	; 1
    134c:	9d 87       	std	Y+13, r25	; 0x0d
    134e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1350:	ee 23       	and	r30, r30
    1352:	51 f7       	brne	.-44     	; 0x1328 <CONTROL_ECU_receiveChangedPassword+0xb2>

			/*TIMER INITIALIZATION*/
			Timer_init(&Timer1_Configurations_1);
    1354:	ce 01       	movw	r24, r28
    1356:	02 96       	adiw	r24, 0x02	; 2
    1358:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Timer_init>

			/*CALL BACK FUNCTION THAT EXECUTED IN THE ISR THAT ALERTS AND TURN ON THE BUZZER*/
			Timer_setCallBack( CONTROL_ECU_TURN_BUZZER , TIMER_1);
    135c:	8d e1       	ldi	r24, 0x1D	; 29
    135e:	99 e0       	ldi	r25, 0x09	; 9
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <Timer_setCallBack>

			/*WAIT FOR TIMER TO FINISH COUNTING*/
			while(!g_timer_flag);
    1366:	80 91 97 00 	lds	r24, 0x0097
    136a:	88 23       	and	r24, r24
    136c:	e1 f3       	breq	.-8      	; 0x1366 <CONTROL_ECU_receiveChangedPassword+0xf0>

			/*CLEAR THE TIMER FLAG TO USE IT ANOTHER TIME IF WE NEED THAT*/
			g_timer_flag=0;
    136e:	10 92 97 00 	sts	0x0097, r1

			/*RETURN USER'S ATTEMPTS FOR 3 ATTEMPTS AGAIN*/
			g_attempts=3;
    1372:	83 e0       	ldi	r24, 0x03	; 3
    1374:	80 93 69 00 	sts	0x0069, r24
		}
	}
}
    1378:	2d 96       	adiw	r28, 0x0d	; 13
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <DcMotor_init>:
#include "dc_motor.h"
#include "gpio.h"
#include "pwm_timer0.h"
void DcMotor_init(void){
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,PIN_OUTPUT);
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	66 e0       	ldi	r22, 0x06	; 6
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,PIN_OUTPUT);
    139c:	83 e0       	ldi	r24, 0x03	; 3
    139e:	67 e0       	ldi	r22, 0x07	; 7
    13a0:	41 e0       	ldi	r20, 0x01	; 1
    13a2:	0e 94 c6 0a 	call	0x158c	; 0x158c <GPIO_setupPinDirection>
	GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    13a6:	83 e0       	ldi	r24, 0x03	; 3
    13a8:	66 e0       	ldi	r22, 0x06	; 6
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	67 e0       	ldi	r22, 0x07	; 7
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>

}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <Dc_Motor_Rotate>:
void Dc_Motor_Rotate(DcMotor_state state,uint8 speed){
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <Dc_Motor_Rotate+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <Dc_Motor_Rotate+0x8>
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	6a 83       	std	Y+2, r22	; 0x02
	switch (state){
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3c 83       	std	Y+4, r19	; 0x04
    13d8:	2b 83       	std	Y+3, r18	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	a1 f0       	breq	.+40     	; 0x140c <Dc_Motor_Rotate+0x4c>
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	d1 f0       	breq	.+52     	; 0x1422 <Dc_Motor_Rotate+0x62>
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	01 f5       	brne	.+64     	; 0x1436 <Dc_Motor_Rotate+0x76>
	case OFF:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    13f6:	83 e0       	ldi	r24, 0x03	; 3
    13f8:	66 e0       	ldi	r22, 0x06	; 6
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	67 e0       	ldi	r22, 0x07	; 7
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
    140a:	15 c0       	rjmp	.+42     	; 0x1436 <Dc_Motor_Rotate+0x76>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	66 e0       	ldi	r22, 0x06	; 6
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_HIGH);
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	67 e0       	ldi	r22, 0x07	; 7
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
    1420:	0a c0       	rjmp	.+20     	; 0x1436 <Dc_Motor_Rotate+0x76>
		break;
	case ACW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_HIGH);
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	66 e0       	ldi	r22, 0x06	; 6
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	67 e0       	ldi	r22, 0x07	; 7
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	0e 94 b1 0b 	call	0x1762	; 0x1762 <GPIO_writePin>
		break;
	}
	PWM_Timer0_Start(speed);
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <PWM_Timer0_Start>
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <EEPROM_writeByte+0x6>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <EEPROM_writeByte+0x8>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    145c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1460:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    1464:	88 30       	cpi	r24, 0x08	; 8
    1466:	11 f0       	breq	.+4      	; 0x146c <EEPROM_writeByte+0x22>
        return ERROR;
    1468:	1c 82       	std	Y+4, r1	; 0x04
    146a:	28 c0       	rjmp	.+80     	; 0x14bc <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	80 70       	andi	r24, 0x00	; 0
    1472:	97 70       	andi	r25, 0x07	; 7
    1474:	88 0f       	add	r24, r24
    1476:	89 2f       	mov	r24, r25
    1478:	88 1f       	adc	r24, r24
    147a:	99 0b       	sbc	r25, r25
    147c:	91 95       	neg	r25
    147e:	80 6a       	ori	r24, 0xA0	; 160
    1480:	0e 94 7d 11 	call	0x22fa	; 0x22fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1484:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    1488:	88 31       	cpi	r24, 0x18	; 24
    148a:	11 f0       	breq	.+4      	; 0x1490 <EEPROM_writeByte+0x46>
        return ERROR; 
    148c:	1c 82       	std	Y+4, r1	; 0x04
    148e:	16 c0       	rjmp	.+44     	; 0x14bc <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	0e 94 7d 11 	call	0x22fa	; 0x22fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1496:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    149a:	88 32       	cpi	r24, 0x28	; 40
    149c:	11 f0       	breq	.+4      	; 0x14a2 <EEPROM_writeByte+0x58>
        return ERROR;
    149e:	1c 82       	std	Y+4, r1	; 0x04
    14a0:	0d c0       	rjmp	.+26     	; 0x14bc <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14a8:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    14ac:	88 32       	cpi	r24, 0x28	; 40
    14ae:	11 f0       	breq	.+4      	; 0x14b4 <EEPROM_writeByte+0x6a>
        return ERROR;
    14b0:	1c 82       	std	Y+4, r1	; 0x04
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    14b4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <TWI_stop>
	
    return SUCCESS;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	8c 83       	std	Y+4, r24	; 0x04
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <EEPROM_readByte+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <EEPROM_readByte+0x8>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	7c 83       	std	Y+4, r23	; 0x04
    14e0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14e2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14e6:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	11 f0       	breq	.+4      	; 0x14f2 <EEPROM_readByte+0x26>
        return ERROR;
    14ee:	1d 82       	std	Y+5, r1	; 0x05
    14f0:	44 c0       	rjmp	.+136    	; 0x157a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	80 70       	andi	r24, 0x00	; 0
    14f8:	97 70       	andi	r25, 0x07	; 7
    14fa:	88 0f       	add	r24, r24
    14fc:	89 2f       	mov	r24, r25
    14fe:	88 1f       	adc	r24, r24
    1500:	99 0b       	sbc	r25, r25
    1502:	91 95       	neg	r25
    1504:	80 6a       	ori	r24, 0xA0	; 160
    1506:	0e 94 7d 11 	call	0x22fa	; 0x22fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    150a:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    150e:	88 31       	cpi	r24, 0x18	; 24
    1510:	11 f0       	breq	.+4      	; 0x1516 <EEPROM_readByte+0x4a>
        return ERROR;
    1512:	1d 82       	std	Y+5, r1	; 0x05
    1514:	32 c0       	rjmp	.+100    	; 0x157a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	0e 94 7d 11 	call	0x22fa	; 0x22fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    151c:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    1520:	88 32       	cpi	r24, 0x28	; 40
    1522:	11 f0       	breq	.+4      	; 0x1528 <EEPROM_readByte+0x5c>
        return ERROR;
    1524:	1d 82       	std	Y+5, r1	; 0x05
    1526:	29 c0       	rjmp	.+82     	; 0x157a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1528:	0e 94 62 11 	call	0x22c4	; 0x22c4 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    152c:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    1530:	80 31       	cpi	r24, 0x10	; 16
    1532:	11 f0       	breq	.+4      	; 0x1538 <EEPROM_readByte+0x6c>
        return ERROR;
    1534:	1d 82       	std	Y+5, r1	; 0x05
    1536:	21 c0       	rjmp	.+66     	; 0x157a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	80 70       	andi	r24, 0x00	; 0
    153e:	97 70       	andi	r25, 0x07	; 7
    1540:	88 0f       	add	r24, r24
    1542:	89 2f       	mov	r24, r25
    1544:	88 1f       	adc	r24, r24
    1546:	99 0b       	sbc	r25, r25
    1548:	91 95       	neg	r25
    154a:	81 6a       	ori	r24, 0xA1	; 161
    154c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1550:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    1554:	80 34       	cpi	r24, 0x40	; 64
    1556:	11 f0       	breq	.+4      	; 0x155c <EEPROM_readByte+0x90>
        return ERROR;
    1558:	1d 82       	std	Y+5, r1	; 0x05
    155a:	0f c0       	rjmp	.+30     	; 0x157a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    155c:	0e 94 a7 11 	call	0x234e	; 0x234e <TWI_readByteWithNACK>
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1566:	0e 94 ba 11 	call	0x2374	; 0x2374 <TWI_getStatus>
    156a:	88 35       	cpi	r24, 0x58	; 88
    156c:	11 f0       	breq	.+4      	; 0x1572 <EEPROM_readByte+0xa6>
        return ERROR;
    156e:	1d 82       	std	Y+5, r1	; 0x05
    1570:	04 c0       	rjmp	.+8      	; 0x157a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1572:	0e 94 72 11 	call	0x22e4	; 0x22e4 <TWI_stop>

    return SUCCESS;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <GPIO_setupPinDirection+0x6>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <GPIO_setupPinDirection+0x8>
    1594:	0f 92       	push	r0
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	6a 83       	std	Y+2, r22	; 0x02
    159e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	88 30       	cpi	r24, 0x08	; 8
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <GPIO_setupPinDirection+0x1c>
    15a6:	d5 c0       	rjmp	.+426    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <GPIO_setupPinDirection+0x24>
    15ae:	d1 c0       	rjmp	.+418    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3d 83       	std	Y+5, r19	; 0x05
    15b8:	2c 83       	std	Y+4, r18	; 0x04
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <GPIO_setupPinDirection+0x3a>
    15c4:	43 c0       	rjmp	.+134    	; 0x164c <GPIO_setupPinDirection+0xc0>
    15c6:	2c 81       	ldd	r18, Y+4	; 0x04
    15c8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	2c f4       	brge	.+10     	; 0x15da <GPIO_setupPinDirection+0x4e>
    15d0:	8c 81       	ldd	r24, Y+4	; 0x04
    15d2:	9d 81       	ldd	r25, Y+5	; 0x05
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	71 f0       	breq	.+28     	; 0x15f4 <GPIO_setupPinDirection+0x68>
    15d8:	bc c0       	rjmp	.+376    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
    15da:	2c 81       	ldd	r18, Y+4	; 0x04
    15dc:	3d 81       	ldd	r19, Y+5	; 0x05
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <GPIO_setupPinDirection+0x5a>
    15e4:	5f c0       	rjmp	.+190    	; 0x16a4 <GPIO_setupPinDirection+0x118>
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <GPIO_setupPinDirection+0x66>
    15f0:	85 c0       	rjmp	.+266    	; 0x16fc <GPIO_setupPinDirection+0x170>
    15f2:	af c0       	rjmp	.+350    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	a1 f4       	brne	.+40     	; 0x1622 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15fa:	aa e3       	ldi	r26, 0x3A	; 58
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ea e3       	ldi	r30, 0x3A	; 58
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <GPIO_setupPinDirection+0x8c>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <GPIO_setupPinDirection+0x88>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	98 c0       	rjmp	.+304    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1622:	aa e3       	ldi	r26, 0x3A	; 58
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ea e3       	ldi	r30, 0x3A	; 58
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <GPIO_setupPinDirection+0xb4>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <GPIO_setupPinDirection+0xb0>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	83 c0       	rjmp	.+262    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	a1 f4       	brne	.+40     	; 0x167a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1652:	a7 e3       	ldi	r26, 0x37	; 55
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e7 e3       	ldi	r30, 0x37	; 55
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_setupPinDirection+0xe4>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_setupPinDirection+0xe0>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	6c c0       	rjmp	.+216    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    167a:	a7 e3       	ldi	r26, 0x37	; 55
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e7 e3       	ldi	r30, 0x37	; 55
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_setupPinDirection+0x10c>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <GPIO_setupPinDirection+0x108>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	57 c0       	rjmp	.+174    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	a1 f4       	brne	.+40     	; 0x16d2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16aa:	a4 e3       	ldi	r26, 0x34	; 52
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e4 e3       	ldi	r30, 0x34	; 52
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_setupPinDirection+0x13c>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_setupPinDirection+0x138>
    16cc:	84 2b       	or	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	40 c0       	rjmp	.+128    	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16d2:	a4 e3       	ldi	r26, 0x34	; 52
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e4 e3       	ldi	r30, 0x34	; 52
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <GPIO_setupPinDirection+0x164>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <GPIO_setupPinDirection+0x160>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	2b c0       	rjmp	.+86     	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	a1 f4       	brne	.+40     	; 0x172a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1702:	a1 e3       	ldi	r26, 0x31	; 49
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e1 e3       	ldi	r30, 0x31	; 49
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_setupPinDirection+0x194>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_setupPinDirection+0x190>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    172a:	a1 e3       	ldi	r26, 0x31	; 49
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e1 e3       	ldi	r30, 0x31	; 49
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <GPIO_setupPinDirection+0x1bc>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <GPIO_setupPinDirection+0x1b8>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	00 d0       	rcall	.+0      	; 0x1768 <GPIO_writePin+0x6>
    1768:	00 d0       	rcall	.+0      	; 0x176a <GPIO_writePin+0x8>
    176a:	0f 92       	push	r0
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	6a 83       	std	Y+2, r22	; 0x02
    1774:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	08 f0       	brcs	.+2      	; 0x177e <GPIO_writePin+0x1c>
    177c:	d5 c0       	rjmp	.+426    	; 0x1928 <GPIO_writePin+0x1c6>
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	08 f0       	brcs	.+2      	; 0x1786 <GPIO_writePin+0x24>
    1784:	d1 c0       	rjmp	.+418    	; 0x1928 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3d 83       	std	Y+5, r19	; 0x05
    178e:	2c 83       	std	Y+4, r18	; 0x04
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <GPIO_writePin+0x3a>
    179a:	43 c0       	rjmp	.+134    	; 0x1822 <GPIO_writePin+0xc0>
    179c:	2c 81       	ldd	r18, Y+4	; 0x04
    179e:	3d 81       	ldd	r19, Y+5	; 0x05
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <GPIO_writePin+0x4e>
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	9d 81       	ldd	r25, Y+5	; 0x05
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	71 f0       	breq	.+28     	; 0x17ca <GPIO_writePin+0x68>
    17ae:	bc c0       	rjmp	.+376    	; 0x1928 <GPIO_writePin+0x1c6>
    17b0:	2c 81       	ldd	r18, Y+4	; 0x04
    17b2:	3d 81       	ldd	r19, Y+5	; 0x05
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <GPIO_writePin+0x5a>
    17ba:	5f c0       	rjmp	.+190    	; 0x187a <GPIO_writePin+0x118>
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	91 05       	cpc	r25, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <GPIO_writePin+0x66>
    17c6:	85 c0       	rjmp	.+266    	; 0x18d2 <GPIO_writePin+0x170>
    17c8:	af c0       	rjmp	.+350    	; 0x1928 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	a1 f4       	brne	.+40     	; 0x17f8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17d0:	ab e3       	ldi	r26, 0x3B	; 59
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	eb e3       	ldi	r30, 0x3B	; 59
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <GPIO_writePin+0x8c>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <GPIO_writePin+0x88>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	98 c0       	rjmp	.+304    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17f8:	ab e3       	ldi	r26, 0x3B	; 59
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	eb e3       	ldi	r30, 0x3B	; 59
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <GPIO_writePin+0xb4>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <GPIO_writePin+0xb0>
    181a:	80 95       	com	r24
    181c:	84 23       	and	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	83 c0       	rjmp	.+262    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	a1 f4       	brne	.+40     	; 0x1850 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1828:	a8 e3       	ldi	r26, 0x38	; 56
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e8 e3       	ldi	r30, 0x38	; 56
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GPIO_writePin+0xe4>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <GPIO_writePin+0xe0>
    184a:	84 2b       	or	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	6c c0       	rjmp	.+216    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1850:	a8 e3       	ldi	r26, 0x38	; 56
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e8 e3       	ldi	r30, 0x38	; 56
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GPIO_writePin+0x10c>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <GPIO_writePin+0x108>
    1872:	80 95       	com	r24
    1874:	84 23       	and	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	57 c0       	rjmp	.+174    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1880:	a5 e3       	ldi	r26, 0x35	; 53
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e5 e3       	ldi	r30, 0x35	; 53
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_writePin+0x13c>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_writePin+0x138>
    18a2:	84 2b       	or	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	40 c0       	rjmp	.+128    	; 0x1928 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18a8:	a5 e3       	ldi	r26, 0x35	; 53
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e5 e3       	ldi	r30, 0x35	; 53
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_writePin+0x164>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_writePin+0x160>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	2b c0       	rjmp	.+86     	; 0x1928 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	a1 f4       	brne	.+40     	; 0x1900 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18d8:	a2 e3       	ldi	r26, 0x32	; 50
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e2 e3       	ldi	r30, 0x32	; 50
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_writePin+0x194>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_writePin+0x190>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1900:	a2 e3       	ldi	r26, 0x32	; 50
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e2 e3       	ldi	r30, 0x32	; 50
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_writePin+0x1bc>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_writePin+0x1b8>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <GPIO_readPin+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <GPIO_readPin+0x8>
    1940:	0f 92       	push	r0
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	8a 83       	std	Y+2, r24	; 0x02
    1948:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    194a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	88 30       	cpi	r24, 0x08	; 8
    1950:	08 f0       	brcs	.+2      	; 0x1954 <GPIO_readPin+0x1c>
    1952:	84 c0       	rjmp	.+264    	; 0x1a5c <GPIO_readPin+0x124>
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	84 30       	cpi	r24, 0x04	; 4
    1958:	08 f0       	brcs	.+2      	; 0x195c <GPIO_readPin+0x24>
    195a:	80 c0       	rjmp	.+256    	; 0x1a5c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3d 83       	std	Y+5, r19	; 0x05
    1964:	2c 83       	std	Y+4, r18	; 0x04
    1966:	4c 81       	ldd	r20, Y+4	; 0x04
    1968:	5d 81       	ldd	r21, Y+5	; 0x05
    196a:	41 30       	cpi	r20, 0x01	; 1
    196c:	51 05       	cpc	r21, r1
    196e:	79 f1       	breq	.+94     	; 0x19ce <GPIO_readPin+0x96>
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	82 30       	cpi	r24, 0x02	; 2
    1976:	91 05       	cpc	r25, r1
    1978:	34 f4       	brge	.+12     	; 0x1986 <GPIO_readPin+0x4e>
    197a:	2c 81       	ldd	r18, Y+4	; 0x04
    197c:	3d 81       	ldd	r19, Y+5	; 0x05
    197e:	21 15       	cp	r18, r1
    1980:	31 05       	cpc	r19, r1
    1982:	69 f0       	breq	.+26     	; 0x199e <GPIO_readPin+0x66>
    1984:	6b c0       	rjmp	.+214    	; 0x1a5c <GPIO_readPin+0x124>
    1986:	4c 81       	ldd	r20, Y+4	; 0x04
    1988:	5d 81       	ldd	r21, Y+5	; 0x05
    198a:	42 30       	cpi	r20, 0x02	; 2
    198c:	51 05       	cpc	r21, r1
    198e:	b9 f1       	breq	.+110    	; 0x19fe <GPIO_readPin+0xc6>
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	91 05       	cpc	r25, r1
    1998:	09 f4       	brne	.+2      	; 0x199c <GPIO_readPin+0x64>
    199a:	49 c0       	rjmp	.+146    	; 0x1a2e <GPIO_readPin+0xf6>
    199c:	5f c0       	rjmp	.+190    	; 0x1a5c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    199e:	e9 e3       	ldi	r30, 0x39	; 57
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a9 01       	movw	r20, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <GPIO_readPin+0x7e>
    19b2:	55 95       	asr	r21
    19b4:	47 95       	ror	r20
    19b6:	8a 95       	dec	r24
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <GPIO_readPin+0x7a>
    19ba:	ca 01       	movw	r24, r20
    19bc:	81 70       	andi	r24, 0x01	; 1
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	88 23       	and	r24, r24
    19c2:	19 f0       	breq	.+6      	; 0x19ca <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	49 c0       	rjmp	.+146    	; 0x1a5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	47 c0       	rjmp	.+142    	; 0x1a5c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19ce:	e6 e3       	ldi	r30, 0x36	; 54
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a9 01       	movw	r20, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <GPIO_readPin+0xae>
    19e2:	55 95       	asr	r21
    19e4:	47 95       	ror	r20
    19e6:	8a 95       	dec	r24
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <GPIO_readPin+0xaa>
    19ea:	ca 01       	movw	r24, r20
    19ec:	81 70       	andi	r24, 0x01	; 1
    19ee:	90 70       	andi	r25, 0x00	; 0
    19f0:	88 23       	and	r24, r24
    19f2:	19 f0       	breq	.+6      	; 0x19fa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	31 c0       	rjmp	.+98     	; 0x1a5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19fa:	19 82       	std	Y+1, r1	; 0x01
    19fc:	2f c0       	rjmp	.+94     	; 0x1a5c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19fe:	e3 e3       	ldi	r30, 0x33	; 51
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a9 01       	movw	r20, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <GPIO_readPin+0xde>
    1a12:	55 95       	asr	r21
    1a14:	47 95       	ror	r20
    1a16:	8a 95       	dec	r24
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <GPIO_readPin+0xda>
    1a1a:	ca 01       	movw	r24, r20
    1a1c:	81 70       	andi	r24, 0x01	; 1
    1a1e:	90 70       	andi	r25, 0x00	; 0
    1a20:	88 23       	and	r24, r24
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	19 c0       	rjmp	.+50     	; 0x1a5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a2a:	19 82       	std	Y+1, r1	; 0x01
    1a2c:	17 c0       	rjmp	.+46     	; 0x1a5c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a2e:	e0 e3       	ldi	r30, 0x30	; 48
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a9 01       	movw	r20, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <GPIO_readPin+0x10e>
    1a42:	55 95       	asr	r21
    1a44:	47 95       	ror	r20
    1a46:	8a 95       	dec	r24
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <GPIO_readPin+0x10a>
    1a4a:	ca 01       	movw	r24, r20
    1a4c:	81 70       	andi	r24, 0x01	; 1
    1a4e:	90 70       	andi	r25, 0x00	; 0
    1a50:	88 23       	and	r24, r24
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a5a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <GPIO_setupPortDirection+0x6>
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <GPIO_setupPortDirection+0x8>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	90 f5       	brcc	.+100    	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	3c 83       	std	Y+4, r19	; 0x04
    1a8c:	2b 83       	std	Y+3, r18	; 0x03
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	91 05       	cpc	r25, r1
    1a96:	d1 f0       	breq	.+52     	; 0x1acc <GPIO_setupPortDirection+0x5e>
    1a98:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9c:	22 30       	cpi	r18, 0x02	; 2
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <GPIO_setupPortDirection+0x3e>
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	61 f0       	breq	.+24     	; 0x1ac2 <GPIO_setupPortDirection+0x54>
    1aaa:	1e c0       	rjmp	.+60     	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
    1aac:	2b 81       	ldd	r18, Y+3	; 0x03
    1aae:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <GPIO_setupPortDirection+0x68>
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	91 05       	cpc	r25, r1
    1abe:	81 f0       	breq	.+32     	; 0x1ae0 <GPIO_setupPortDirection+0x72>
    1ac0:	13 c0       	rjmp	.+38     	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ac2:	ea e3       	ldi	r30, 0x3A	; 58
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	80 83       	st	Z, r24
    1aca:	0e c0       	rjmp	.+28     	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1acc:	e7 e3       	ldi	r30, 0x37	; 55
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24
    1ad4:	09 c0       	rjmp	.+18     	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ad6:	e4 e3       	ldi	r30, 0x34	; 52
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	80 83       	st	Z, r24
    1ade:	04 c0       	rjmp	.+8      	; 0x1ae8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ae0:	e1 e3       	ldi	r30, 0x31	; 49
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <GPIO_writePort+0x6>
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <GPIO_writePort+0x8>
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	84 30       	cpi	r24, 0x04	; 4
    1b0a:	90 f5       	brcc	.+100    	; 0x1b70 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	3c 83       	std	Y+4, r19	; 0x04
    1b14:	2b 83       	std	Y+3, r18	; 0x03
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	d1 f0       	breq	.+52     	; 0x1b54 <GPIO_writePort+0x5e>
    1b20:	2b 81       	ldd	r18, Y+3	; 0x03
    1b22:	3c 81       	ldd	r19, Y+4	; 0x04
    1b24:	22 30       	cpi	r18, 0x02	; 2
    1b26:	31 05       	cpc	r19, r1
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <GPIO_writePort+0x3e>
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	61 f0       	breq	.+24     	; 0x1b4a <GPIO_writePort+0x54>
    1b32:	1e c0       	rjmp	.+60     	; 0x1b70 <GPIO_writePort+0x7a>
    1b34:	2b 81       	ldd	r18, Y+3	; 0x03
    1b36:	3c 81       	ldd	r19, Y+4	; 0x04
    1b38:	22 30       	cpi	r18, 0x02	; 2
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	81 f0       	breq	.+32     	; 0x1b5e <GPIO_writePort+0x68>
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	83 30       	cpi	r24, 0x03	; 3
    1b44:	91 05       	cpc	r25, r1
    1b46:	81 f0       	breq	.+32     	; 0x1b68 <GPIO_writePort+0x72>
    1b48:	13 c0       	rjmp	.+38     	; 0x1b70 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b4a:	eb e3       	ldi	r30, 0x3B	; 59
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	80 83       	st	Z, r24
    1b52:	0e c0       	rjmp	.+28     	; 0x1b70 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b54:	e8 e3       	ldi	r30, 0x38	; 56
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
    1b5c:	09 c0       	rjmp	.+18     	; 0x1b70 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b5e:	e5 e3       	ldi	r30, 0x35	; 53
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	80 83       	st	Z, r24
    1b66:	04 c0       	rjmp	.+8      	; 0x1b70 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b68:	e2 e3       	ldi	r30, 0x32	; 50
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <GPIO_readPort+0x6>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <GPIO_readPort+0x8>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b8c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	84 30       	cpi	r24, 0x04	; 4
    1b92:	90 f5       	brcc	.+100    	; 0x1bf8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	3c 83       	std	Y+4, r19	; 0x04
    1b9c:	2b 83       	std	Y+3, r18	; 0x03
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	d1 f0       	breq	.+52     	; 0x1bdc <GPIO_readPort+0x5e>
    1ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    1baa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	2c f4       	brge	.+10     	; 0x1bbc <GPIO_readPort+0x3e>
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	61 f0       	breq	.+24     	; 0x1bd2 <GPIO_readPort+0x54>
    1bba:	1e c0       	rjmp	.+60     	; 0x1bf8 <GPIO_readPort+0x7a>
    1bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	81 f0       	breq	.+32     	; 0x1be6 <GPIO_readPort+0x68>
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	91 05       	cpc	r25, r1
    1bce:	81 f0       	breq	.+32     	; 0x1bf0 <GPIO_readPort+0x72>
    1bd0:	13 c0       	rjmp	.+38     	; 0x1bf8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bd2:	e9 e3       	ldi	r30, 0x39	; 57
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	0e c0       	rjmp	.+28     	; 0x1bf8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bdc:	e6 e3       	ldi	r30, 0x36	; 54
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1be6:	e3 e3       	ldi	r30, 0x33	; 51
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1bf0:	e0 e3       	ldi	r30, 0x30	; 48
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <PWM_Timer0_Start>:
#include <avr/io.h>

#include "pwm_timer0.h"
void PWM_Timer0_Start(uint8 duty_cycle) {
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <PWM_Timer0_Start+0x6>
    1c0e:	0f 92       	push	r0
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    1c16:	e2 e5       	ldi	r30, 0x52	; 82
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	10 82       	st	Z, r1
	switch(duty_cycle)
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	3b 83       	std	Y+3, r19	; 0x03
    1c24:	2a 83       	std	Y+2, r18	; 0x02
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2a:	82 33       	cpi	r24, 0x32	; 50
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	19 f1       	breq	.+70     	; 0x1c76 <PWM_Timer0_Start+0x6e>
    1c30:	2a 81       	ldd	r18, Y+2	; 0x02
    1c32:	3b 81       	ldd	r19, Y+3	; 0x03
    1c34:	23 33       	cpi	r18, 0x33	; 51
    1c36:	31 05       	cpc	r19, r1
    1c38:	54 f4       	brge	.+20     	; 0x1c4e <PWM_Timer0_Start+0x46>
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	89 f0       	breq	.+34     	; 0x1c64 <PWM_Timer0_Start+0x5c>
    1c42:	2a 81       	ldd	r18, Y+2	; 0x02
    1c44:	3b 81       	ldd	r19, Y+3	; 0x03
    1c46:	29 31       	cpi	r18, 0x19	; 25
    1c48:	31 05       	cpc	r19, r1
    1c4a:	81 f0       	breq	.+32     	; 0x1c6c <PWM_Timer0_Start+0x64>
    1c4c:	22 c0       	rjmp	.+68     	; 0x1c92 <PWM_Timer0_Start+0x8a>
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	8b 34       	cpi	r24, 0x4B	; 75
    1c54:	91 05       	cpc	r25, r1
    1c56:	a1 f0       	breq	.+40     	; 0x1c80 <PWM_Timer0_Start+0x78>
    1c58:	2a 81       	ldd	r18, Y+2	; 0x02
    1c5a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c5c:	24 36       	cpi	r18, 0x64	; 100
    1c5e:	31 05       	cpc	r19, r1
    1c60:	a1 f0       	breq	.+40     	; 0x1c8a <PWM_Timer0_Start+0x82>
    1c62:	17 c0       	rjmp	.+46     	; 0x1c92 <PWM_Timer0_Start+0x8a>
	{
	case _0_SPEED:
		OCR0 = 0;
    1c64:	ec e5       	ldi	r30, 0x5C	; 92
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	10 82       	st	Z, r1
    1c6a:	13 c0       	rjmp	.+38     	; 0x1c92 <PWM_Timer0_Start+0x8a>
		break;
	case _25_SPEED:
		OCR0 = 64;
    1c6c:	ec e5       	ldi	r30, 0x5C	; 92
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 e4       	ldi	r24, 0x40	; 64
    1c72:	80 83       	st	Z, r24
    1c74:	0e c0       	rjmp	.+28     	; 0x1c92 <PWM_Timer0_Start+0x8a>
		break;
	case _50_SPEED:
		OCR0 = 128;
    1c76:	ec e5       	ldi	r30, 0x5C	; 92
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 e8       	ldi	r24, 0x80	; 128
    1c7c:	80 83       	st	Z, r24
    1c7e:	09 c0       	rjmp	.+18     	; 0x1c92 <PWM_Timer0_Start+0x8a>
		break;
	case _75_SPEED:
		OCR0 = 192;
    1c80:	ec e5       	ldi	r30, 0x5C	; 92
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 ec       	ldi	r24, 0xC0	; 192
    1c86:	80 83       	st	Z, r24
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <PWM_Timer0_Start+0x8a>
		break;
	case FULL_SPEED:
		OCR0 = 255;
    1c8a:	ec e5       	ldi	r30, 0x5C	; 92
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	80 83       	st	Z, r24
		break;
	}
	DDRB |=(1<<PB3);
    1c92:	a7 e3       	ldi	r26, 0x37	; 55
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e7 e3       	ldi	r30, 0x37	; 55
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	88 60       	ori	r24, 0x08	; 8
    1c9e:	8c 93       	st	X, r24
	TCCR0 |= (1 << COM01) | (1 << WGM01) | (1 << WGM00) | (1 << CS02) | (1 << CS00);
    1ca0:	a3 e5       	ldi	r26, 0x53	; 83
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e3 e5       	ldi	r30, 0x53	; 83
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	8d 66       	ori	r24, 0x6D	; 109
    1cac:	8c 93       	st	X, r24
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1cba:	1f 92       	push	r1
    1cbc:	0f 92       	push	r0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	0f 92       	push	r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1ce4:	80 91 98 00 	lds	r24, 0x0098
    1ce8:	90 91 99 00 	lds	r25, 0x0099
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	29 f0       	breq	.+10     	; 0x1cfa <__vector_11+0x40>
	{
		(*g_callBackPtr0)();
    1cf0:	e0 91 98 00 	lds	r30, 0x0098
    1cf4:	f0 91 99 00 	lds	r31, 0x0099
    1cf8:	09 95       	icall
	}
}
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	ff 91       	pop	r31
    1d00:	ef 91       	pop	r30
    1d02:	bf 91       	pop	r27
    1d04:	af 91       	pop	r26
    1d06:	9f 91       	pop	r25
    1d08:	8f 91       	pop	r24
    1d0a:	7f 91       	pop	r23
    1d0c:	6f 91       	pop	r22
    1d0e:	5f 91       	pop	r21
    1d10:	4f 91       	pop	r20
    1d12:	3f 91       	pop	r19
    1d14:	2f 91       	pop	r18
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	0f 90       	pop	r0
    1d1c:	1f 90       	pop	r1
    1d1e:	18 95       	reti

00001d20 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1d20:	1f 92       	push	r1
    1d22:	0f 92       	push	r0
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	0f 92       	push	r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	2f 93       	push	r18
    1d2c:	3f 93       	push	r19
    1d2e:	4f 93       	push	r20
    1d30:	5f 93       	push	r21
    1d32:	6f 93       	push	r22
    1d34:	7f 93       	push	r23
    1d36:	8f 93       	push	r24
    1d38:	9f 93       	push	r25
    1d3a:	af 93       	push	r26
    1d3c:	bf 93       	push	r27
    1d3e:	ef 93       	push	r30
    1d40:	ff 93       	push	r31
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1d4a:	80 91 98 00 	lds	r24, 0x0098
    1d4e:	90 91 99 00 	lds	r25, 0x0099
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	29 f0       	breq	.+10     	; 0x1d60 <__vector_10+0x40>
	{
		(*g_callBackPtr0)();
    1d56:	e0 91 98 00 	lds	r30, 0x0098
    1d5a:	f0 91 99 00 	lds	r31, 0x0099
    1d5e:	09 95       	icall
	}
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	ff 91       	pop	r31
    1d66:	ef 91       	pop	r30
    1d68:	bf 91       	pop	r27
    1d6a:	af 91       	pop	r26
    1d6c:	9f 91       	pop	r25
    1d6e:	8f 91       	pop	r24
    1d70:	7f 91       	pop	r23
    1d72:	6f 91       	pop	r22
    1d74:	5f 91       	pop	r21
    1d76:	4f 91       	pop	r20
    1d78:	3f 91       	pop	r19
    1d7a:	2f 91       	pop	r18
    1d7c:	0f 90       	pop	r0
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	0f 90       	pop	r0
    1d82:	1f 90       	pop	r1
    1d84:	18 95       	reti

00001d86 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1d86:	1f 92       	push	r1
    1d88:	0f 92       	push	r0
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	0f 92       	push	r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	2f 93       	push	r18
    1d92:	3f 93       	push	r19
    1d94:	4f 93       	push	r20
    1d96:	5f 93       	push	r21
    1d98:	6f 93       	push	r22
    1d9a:	7f 93       	push	r23
    1d9c:	8f 93       	push	r24
    1d9e:	9f 93       	push	r25
    1da0:	af 93       	push	r26
    1da2:	bf 93       	push	r27
    1da4:	ef 93       	push	r30
    1da6:	ff 93       	push	r31
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    1db0:	80 91 9a 00 	lds	r24, 0x009A
    1db4:	90 91 9b 00 	lds	r25, 0x009B
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	29 f0       	breq	.+10     	; 0x1dc6 <__vector_9+0x40>
	{

		(*g_callBackPtr1)();
    1dbc:	e0 91 9a 00 	lds	r30, 0x009A
    1dc0:	f0 91 9b 00 	lds	r31, 0x009B
    1dc4:	09 95       	icall
	}
}
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	ff 91       	pop	r31
    1dcc:	ef 91       	pop	r30
    1dce:	bf 91       	pop	r27
    1dd0:	af 91       	pop	r26
    1dd2:	9f 91       	pop	r25
    1dd4:	8f 91       	pop	r24
    1dd6:	7f 91       	pop	r23
    1dd8:	6f 91       	pop	r22
    1dda:	5f 91       	pop	r21
    1ddc:	4f 91       	pop	r20
    1dde:	3f 91       	pop	r19
    1de0:	2f 91       	pop	r18
    1de2:	0f 90       	pop	r0
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	0f 90       	pop	r0
    1de8:	1f 90       	pop	r1
    1dea:	18 95       	reti

00001dec <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1dec:	1f 92       	push	r1
    1dee:	0f 92       	push	r0
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	0f 92       	push	r0
    1df4:	11 24       	eor	r1, r1
    1df6:	2f 93       	push	r18
    1df8:	3f 93       	push	r19
    1dfa:	4f 93       	push	r20
    1dfc:	5f 93       	push	r21
    1dfe:	6f 93       	push	r22
    1e00:	7f 93       	push	r23
    1e02:	8f 93       	push	r24
    1e04:	9f 93       	push	r25
    1e06:	af 93       	push	r26
    1e08:	bf 93       	push	r27
    1e0a:	ef 93       	push	r30
    1e0c:	ff 93       	push	r31
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    1e16:	80 91 9a 00 	lds	r24, 0x009A
    1e1a:	90 91 9b 00 	lds	r25, 0x009B
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	29 f0       	breq	.+10     	; 0x1e2c <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
    1e22:	e0 91 9a 00 	lds	r30, 0x009A
    1e26:	f0 91 9b 00 	lds	r31, 0x009B
    1e2a:	09 95       	icall
	}
}
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	ff 91       	pop	r31
    1e32:	ef 91       	pop	r30
    1e34:	bf 91       	pop	r27
    1e36:	af 91       	pop	r26
    1e38:	9f 91       	pop	r25
    1e3a:	8f 91       	pop	r24
    1e3c:	7f 91       	pop	r23
    1e3e:	6f 91       	pop	r22
    1e40:	5f 91       	pop	r21
    1e42:	4f 91       	pop	r20
    1e44:	3f 91       	pop	r19
    1e46:	2f 91       	pop	r18
    1e48:	0f 90       	pop	r0
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	0f 90       	pop	r0
    1e4e:	1f 90       	pop	r1
    1e50:	18 95       	reti

00001e52 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1e52:	1f 92       	push	r1
    1e54:	0f 92       	push	r0
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	0f 92       	push	r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	2f 93       	push	r18
    1e5e:	3f 93       	push	r19
    1e60:	4f 93       	push	r20
    1e62:	5f 93       	push	r21
    1e64:	6f 93       	push	r22
    1e66:	7f 93       	push	r23
    1e68:	8f 93       	push	r24
    1e6a:	9f 93       	push	r25
    1e6c:	af 93       	push	r26
    1e6e:	bf 93       	push	r27
    1e70:	ef 93       	push	r30
    1e72:	ff 93       	push	r31
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1e7c:	80 91 9c 00 	lds	r24, 0x009C
    1e80:	90 91 9d 00 	lds	r25, 0x009D
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	29 f0       	breq	.+10     	; 0x1e92 <__vector_5+0x40>
	{

		(*g_callBackPtr2)();
    1e88:	e0 91 9c 00 	lds	r30, 0x009C
    1e8c:	f0 91 9d 00 	lds	r31, 0x009D
    1e90:	09 95       	icall
	}
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	ff 91       	pop	r31
    1e98:	ef 91       	pop	r30
    1e9a:	bf 91       	pop	r27
    1e9c:	af 91       	pop	r26
    1e9e:	9f 91       	pop	r25
    1ea0:	8f 91       	pop	r24
    1ea2:	7f 91       	pop	r23
    1ea4:	6f 91       	pop	r22
    1ea6:	5f 91       	pop	r21
    1ea8:	4f 91       	pop	r20
    1eaa:	3f 91       	pop	r19
    1eac:	2f 91       	pop	r18
    1eae:	0f 90       	pop	r0
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	0f 90       	pop	r0
    1eb4:	1f 90       	pop	r1
    1eb6:	18 95       	reti

00001eb8 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	2f 93       	push	r18
    1ec4:	3f 93       	push	r19
    1ec6:	4f 93       	push	r20
    1ec8:	5f 93       	push	r21
    1eca:	6f 93       	push	r22
    1ecc:	7f 93       	push	r23
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	af 93       	push	r26
    1ed4:	bf 93       	push	r27
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1ee2:	80 91 9c 00 	lds	r24, 0x009C
    1ee6:	90 91 9d 00 	lds	r25, 0x009D
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	29 f0       	breq	.+10     	; 0x1ef8 <__vector_4+0x40>
	{
		(*g_callBackPtr2)();
    1eee:	e0 91 9c 00 	lds	r30, 0x009C
    1ef2:	f0 91 9d 00 	lds	r31, 0x009D
    1ef6:	09 95       	icall
	}
}
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <Timer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*  Initializes the timer with the specified settings. */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <Timer_init+0x6>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <Timer_init+0x8>
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
	uint8 timer_ID = Config_Ptr -> timer_ID ;
    1f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f30:	fc 81       	ldd	r31, Y+4	; 0x04
    1f32:	84 81       	ldd	r24, Z+4	; 0x04
    1f34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_Mode = Config_Ptr -> timer_mode;
    1f36:	eb 81       	ldd	r30, Y+3	; 0x03
    1f38:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3a:	86 81       	ldd	r24, Z+6	; 0x06
    1f3c:	89 83       	std	Y+1, r24	; 0x01


	/* Timer0 configuration */
	if (timer_ID == TIMER_0)
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	88 23       	and	r24, r24
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <Timer_init+0x28>
    1f44:	49 c0       	rjmp	.+146    	; 0x1fd8 <Timer_init+0xba>
	{
		/* normal mode configuration */
		if(timer_Mode == NORMAL_MODE)
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	88 23       	and	r24, r24
    1f4a:	e1 f4       	brne	.+56     	; 0x1f84 <Timer_init+0x66>
		{
			TCNT0 = Config_Ptr -> timer_InitialValue ; /* Set Timer initial value */
    1f4c:	a2 e5       	ldi	r26, 0x52	; 82
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	eb 81       	ldd	r30, Y+3	; 0x03
    1f52:	fc 81       	ldd	r31, Y+4	; 0x04
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	8c 93       	st	X, r24

			TIMSK = (1<<TOIE0); /* Enable Timer0 Overflow Interrupt */
    1f5a:	e9 e5       	ldi	r30, 0x59	; 89
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR0 = (1<<FOC0) ;
    1f62:	e3 e5       	ldi	r30, 0x53	; 83
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 e8       	ldi	r24, 0x80	; 128
    1f68:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock);
    1f6a:	a3 e5       	ldi	r26, 0x53	; 83
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e3 e5       	ldi	r30, 0x53	; 83
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	98 2f       	mov	r25, r24
    1f76:	98 7f       	andi	r25, 0xF8	; 248
    1f78:	eb 81       	ldd	r30, Y+3	; 0x03
    1f7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f7c:	85 81       	ldd	r24, Z+5	; 0x05
    1f7e:	89 2b       	or	r24, r25
    1f80:	8c 93       	st	X, r24
    1f82:	cf c0       	rjmp	.+414    	; 0x2122 <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == COMPARE_MODE)
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <Timer_init+0x6e>
    1f8a:	cb c0       	rjmp	.+406    	; 0x2122 <Timer_init+0x204>
		{
			TCNT0 = Config_Ptr -> timer_InitialValue ; /* Set Timer Initial Value 0 */
    1f8c:	a2 e5       	ldi	r26, 0x52	; 82
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	eb 81       	ldd	r30, Y+3	; 0x03
    1f92:	fc 81       	ldd	r31, Y+4	; 0x04
    1f94:	80 81       	ld	r24, Z
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	8c 93       	st	X, r24
			OCR0 = Config_Ptr -> timer_compare_MatchValue; /* Set Compare Value */
    1f9a:	ac e5       	ldi	r26, 0x5C	; 92
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE0); /* Enable Timer0 Compare Interrupt */
    1fa8:	a9 e5       	ldi	r26, 0x59	; 89
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e9 e5       	ldi	r30, 0x59	; 89
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	82 60       	ori	r24, 0x02	; 2
    1fb4:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    1fb6:	e3 e5       	ldi	r30, 0x53	; 83
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	88 e8       	ldi	r24, 0x88	; 136
    1fbc:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock);
    1fbe:	a3 e5       	ldi	r26, 0x53	; 83
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e3 e5       	ldi	r30, 0x53	; 83
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	98 2f       	mov	r25, r24
    1fca:	98 7f       	andi	r25, 0xF8	; 248
    1fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fce:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd0:	85 81       	ldd	r24, Z+5	; 0x05
    1fd2:	89 2b       	or	r24, r25
    1fd4:	8c 93       	st	X, r24
    1fd6:	a5 c0       	rjmp	.+330    	; 0x2122 <Timer_init+0x204>
		}
	}

	/* Timer1 configuration */
	else if (timer_ID == TIMER_1)
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <Timer_init+0xc2>
    1fde:	56 c0       	rjmp	.+172    	; 0x208c <Timer_init+0x16e>
	{
		/* normal mode configuration */
		if(timer_Mode == NORMAL_MODE)
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f5       	brne	.+66     	; 0x2028 <Timer_init+0x10a>
		{
			TCNT1 = Config_Ptr -> timer_InitialValue ;		/* Set timer1 initial count  */
    1fe6:	ac e4       	ldi	r26, 0x4C	; 76
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	eb 81       	ldd	r30, Y+3	; 0x03
    1fec:	fc 81       	ldd	r31, Y+4	; 0x04
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	11 96       	adiw	r26, 0x01	; 1
    1ff4:	9c 93       	st	X, r25
    1ff6:	8e 93       	st	-X, r24

			TIMSK |= (1<<TOIE1) ; /* Enable Timer1 Overflow Interrupt */
    1ff8:	a9 e5       	ldi	r26, 0x59	; 89
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e9 e5       	ldi	r30, 0x59	; 89
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	84 60       	ori	r24, 0x04	; 4
    2004:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Normal Mode COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. Non PWM FOC1A=1 FOC1B=1
			 * 3. Normal Mode WGM10=0 WGM11=0
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2006:	ef e4       	ldi	r30, 0x4F	; 79
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8c e0       	ldi	r24, 0x0C	; 12
    200c:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. Normal Mode WGM12=0 WGM13=0
			 * 2. Prescaler = F_CPU/Prescaler
			 */
			TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    200e:	ae e4       	ldi	r26, 0x4E	; 78
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	ee e4       	ldi	r30, 0x4E	; 78
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	98 2f       	mov	r25, r24
    201a:	98 7f       	andi	r25, 0xF8	; 248
    201c:	eb 81       	ldd	r30, Y+3	; 0x03
    201e:	fc 81       	ldd	r31, Y+4	; 0x04
    2020:	85 81       	ldd	r24, Z+5	; 0x05
    2022:	89 2b       	or	r24, r25
    2024:	8c 93       	st	X, r24
    2026:	7d c0       	rjmp	.+250    	; 0x2122 <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == COMPARE_MODE)
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	09 f0       	breq	.+2      	; 0x2030 <Timer_init+0x112>
    202e:	79 c0       	rjmp	.+242    	; 0x2122 <Timer_init+0x204>
		{
			TCNT1 = Config_Ptr -> timer_InitialValue ;		/* Set timer1 initial count  */
    2030:	ac e4       	ldi	r26, 0x4C	; 76
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	eb 81       	ldd	r30, Y+3	; 0x03
    2036:	fc 81       	ldd	r31, Y+4	; 0x04
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	11 96       	adiw	r26, 0x01	; 1
    203e:	9c 93       	st	X, r25
    2040:	8e 93       	st	-X, r24

			OCR1A = Config_Ptr -> timer_compare_MatchValue;    /* Set the Compare value */
    2042:	aa e4       	ldi	r26, 0x4A	; 74
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	eb 81       	ldd	r30, Y+3	; 0x03
    2048:	fc 81       	ldd	r31, Y+4	; 0x04
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	11 96       	adiw	r26, 0x01	; 1
    2050:	9c 93       	st	X, r25
    2052:	8e 93       	st	-X, r24

			TIMSK |= (1<<OCIE1A) ; /* Enable Timer1 Compare A Interrupt */
    2054:	a9 e5       	ldi	r26, 0x59	; 89
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e9 e5       	ldi	r30, 0x59	; 89
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	80 61       	ori	r24, 0x10	; 16
    2060:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=1
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2062:	ef e4       	ldi	r30, 0x4F	; 79
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	8c e0       	ldi	r24, 0x0C	; 12
    2068:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 * 2. Prescaler = F_CPU/Prescaler
			 */
			TCCR1B = (1<<WGM12);
    206a:	ee e4       	ldi	r30, 0x4E	; 78
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	88 e0       	ldi	r24, 0x08	; 8
    2070:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    2072:	ae e4       	ldi	r26, 0x4E	; 78
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ee e4       	ldi	r30, 0x4E	; 78
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	98 2f       	mov	r25, r24
    207e:	98 7f       	andi	r25, 0xF8	; 248
    2080:	eb 81       	ldd	r30, Y+3	; 0x03
    2082:	fc 81       	ldd	r31, Y+4	; 0x04
    2084:	85 81       	ldd	r24, Z+5	; 0x05
    2086:	89 2b       	or	r24, r25
    2088:	8c 93       	st	X, r24
    208a:	4b c0       	rjmp	.+150    	; 0x2122 <Timer_init+0x204>
		}
	}

	/* Timer2 configuration */
	else if (timer_ID == TIMER_2)
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	09 f0       	breq	.+2      	; 0x2094 <Timer_init+0x176>
    2092:	47 c0       	rjmp	.+142    	; 0x2122 <Timer_init+0x204>
	{
		/* normal mode configuration */
		if(timer_Mode == NORMAL_MODE)
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	88 23       	and	r24, r24
    2098:	e1 f4       	brne	.+56     	; 0x20d2 <Timer_init+0x1b4>
		{
			TCNT2 = Config_Ptr -> timer_InitialValue ; /* Set Timer initial value */
    209a:	a4 e4       	ldi	r26, 0x44	; 68
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	eb 81       	ldd	r30, Y+3	; 0x03
    20a0:	fc 81       	ldd	r31, Y+4	; 0x04
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	8c 93       	st	X, r24

			TIMSK = (1<<TOIE2); /* Enable Timer2 Overflow Interrupt */
    20a8:	e9 e5       	ldi	r30, 0x59	; 89
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 e4       	ldi	r24, 0x40	; 64
    20ae:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal Mode COM20=0 & COM21=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR2 = (1<<FOC2) ;
    20b0:	e5 e4       	ldi	r30, 0x45	; 69
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 e8       	ldi	r24, 0x80	; 128
    20b6:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock);
    20b8:	a5 e4       	ldi	r26, 0x45	; 69
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e5 e4       	ldi	r30, 0x45	; 69
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	98 2f       	mov	r25, r24
    20c4:	98 7f       	andi	r25, 0xF8	; 248
    20c6:	eb 81       	ldd	r30, Y+3	; 0x03
    20c8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ca:	85 81       	ldd	r24, Z+5	; 0x05
    20cc:	89 2b       	or	r24, r25
    20ce:	8c 93       	st	X, r24
    20d0:	28 c0       	rjmp	.+80     	; 0x2122 <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == COMPARE_MODE)
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	29 f5       	brne	.+74     	; 0x2122 <Timer_init+0x204>
		{
			TCNT2 = Config_Ptr -> timer_InitialValue ; /* Set Timer Initial Value  */
    20d8:	a4 e4       	ldi	r26, 0x44	; 68
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	eb 81       	ldd	r30, Y+3	; 0x03
    20de:	fc 81       	ldd	r31, Y+4	; 0x04
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	8c 93       	st	X, r24
			OCR2 = Config_Ptr -> timer_compare_MatchValue; /* Set Compare Value */
    20e6:	a3 e4       	ldi	r26, 0x43	; 67
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	eb 81       	ldd	r30, Y+3	; 0x03
    20ec:	fc 81       	ldd	r31, Y+4	; 0x04
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE2); /* Enable Timer2 Compare Interrupt */
    20f4:	a9 e5       	ldi	r26, 0x59	; 89
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e9 e5       	ldi	r30, 0x59	; 89
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	80 68       	ori	r24, 0x80	; 128
    2100:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. CTC Mode WGM21=1 & WGM20=0
			 * 3. No need for OC2 so COM20=0 & COM21=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    2102:	e5 e4       	ldi	r30, 0x45	; 69
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	88 e8       	ldi	r24, 0x88	; 136
    2108:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock);
    210a:	a5 e4       	ldi	r26, 0x45	; 69
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e5 e4       	ldi	r30, 0x45	; 69
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	98 2f       	mov	r25, r24
    2116:	98 7f       	andi	r25, 0xF8	; 248
    2118:	eb 81       	ldd	r30, Y+3	; 0x03
    211a:	fc 81       	ldd	r31, Y+4	; 0x04
    211c:	85 81       	ldd	r24, Z+5	; 0x05
    211e:	89 2b       	or	r24, r25
    2120:	8c 93       	st	X, r24
		}
	}
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <Timer_deInit>:

/* Disables the specified timer and resets its settings. */
void Timer_deInit(Timer_ID_Type timer_type)
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <Timer_deInit+0x6>
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_ID = timer_type;
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01

	/* Timer0 deinit */
	if (timer_ID == TIMER_0)
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	88 23       	and	r24, r24
    2144:	c1 f4       	brne	.+48     	; 0x2176 <Timer_deInit+0x46>
	{
		TCNT0 = 0; /* Reset Timer value */
    2146:	e2 e5       	ldi	r30, 0x52	; 82
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	10 82       	st	Z, r1
		OCR0  = 0; /* Reset Compare value */
    214c:	ec e5       	ldi	r30, 0x5C	; 92
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE0); /* Disable Timer0 Overflow Interrupt */
    2152:	a9 e5       	ldi	r26, 0x59	; 89
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e9 e5       	ldi	r30, 0x59	; 89
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	8e 7f       	andi	r24, 0xFE	; 254
    215e:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE0); /* Disable Timer0 Compare Interrupt */
    2160:	a9 e5       	ldi	r26, 0x59	; 89
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e9 e5       	ldi	r30, 0x59	; 89
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8d 7f       	andi	r24, 0xFD	; 253
    216c:	8c 93       	st	X, r24
		TCCR0 = 0 ; /* Clear Register */
    216e:	e3 e5       	ldi	r30, 0x53	; 83
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	10 82       	st	Z, r1
    2174:	3a c0       	rjmp	.+116    	; 0x21ea <Timer_deInit+0xba>
	}

	/* Timer1 deinit */
	else if (timer_ID == TIMER_1)
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	e9 f4       	brne	.+58     	; 0x21b6 <Timer_deInit+0x86>
	{
		TCNT1 = 0;		 /* Reset Timer value */
    217c:	ec e4       	ldi	r30, 0x4C	; 76
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	11 82       	std	Z+1, r1	; 0x01
    2182:	10 82       	st	Z, r1
		OCR1A = 0;       /* Reset Compare value */
    2184:	ea e4       	ldi	r30, 0x4A	; 74
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	11 82       	std	Z+1, r1	; 0x01
    218a:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE1) ;   /* Disable Timer1 Overflow Interrupt */
    218c:	a9 e5       	ldi	r26, 0x59	; 89
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e9 e5       	ldi	r30, 0x59	; 89
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8b 7f       	andi	r24, 0xFB	; 251
    2198:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE1A) ;  /* Disable Timer1 Compare A Interrupt */
    219a:	a9 e5       	ldi	r26, 0x59	; 89
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e9 e5       	ldi	r30, 0x59	; 89
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	8f 7e       	andi	r24, 0xEF	; 239
    21a6:	8c 93       	st	X, r24
		TCCR1A = 0; /* Clear Register */
    21a8:	ef e4       	ldi	r30, 0x4F	; 79
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	10 82       	st	Z, r1
		TCCR1B = 0; /* Clear Register */
    21ae:	ee e4       	ldi	r30, 0x4E	; 78
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	10 82       	st	Z, r1
    21b4:	1a c0       	rjmp	.+52     	; 0x21ea <Timer_deInit+0xba>
	}

	/* Timer2 deinit */
	else if (timer_ID == TIMER_2)
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	82 30       	cpi	r24, 0x02	; 2
    21ba:	b9 f4       	brne	.+46     	; 0x21ea <Timer_deInit+0xba>
	{
		TCNT2 = 0; /* Reset Timer value */
    21bc:	e4 e4       	ldi	r30, 0x44	; 68
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	10 82       	st	Z, r1
		OCR2  = 0; /* Reset Compare value */
    21c2:	e3 e4       	ldi	r30, 0x43	; 67
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE2); /* Disable Timer2 Overflow Interrupt */
    21c8:	a9 e5       	ldi	r26, 0x59	; 89
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e9 e5       	ldi	r30, 0x59	; 89
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	8f 7b       	andi	r24, 0xBF	; 191
    21d4:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE2); /* Disable Timer2 Compare Interrupt */
    21d6:	a9 e5       	ldi	r26, 0x59	; 89
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e9 e5       	ldi	r30, 0x59	; 89
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8f 77       	andi	r24, 0x7F	; 127
    21e2:	8c 93       	st	X, r24
		TCCR2 = 0 ; /* Clear Register */
    21e4:	e5 e4       	ldi	r30, 0x45	; 69
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	10 82       	st	Z, r1
	}
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <Timer_setCallBack>:

/* Sets a callback function for the specified timer's interrupt. */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <Timer_setCallBack+0x6>
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <Timer_setCallBack+0x8>
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	9b 83       	std	Y+3, r25	; 0x03
    2202:	8a 83       	std	Y+2, r24	; 0x02
    2204:	6c 83       	std	Y+4, r22	; 0x04
	uint8 timer_ID = a_timer_ID;
    2206:	8c 81       	ldd	r24, Y+4	; 0x04
    2208:	89 83       	std	Y+1, r24	; 0x01

	/* Timer0 callback */
	if (timer_ID == TIMER_0)
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	88 23       	and	r24, r24
    220e:	39 f4       	brne	.+14     	; 0x221e <Timer_setCallBack+0x2a>
	{
		g_callBackPtr0 = a_ptr;
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	9b 81       	ldd	r25, Y+3	; 0x03
    2214:	90 93 99 00 	sts	0x0099, r25
    2218:	80 93 98 00 	sts	0x0098, r24
    221c:	13 c0       	rjmp	.+38     	; 0x2244 <Timer_setCallBack+0x50>
	}

	/* Timer1 callback */
	else if (timer_ID == TIMER_1)
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	39 f4       	brne	.+14     	; 0x2232 <Timer_setCallBack+0x3e>
	{
		g_callBackPtr1 = a_ptr;
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	9b 81       	ldd	r25, Y+3	; 0x03
    2228:	90 93 9b 00 	sts	0x009B, r25
    222c:	80 93 9a 00 	sts	0x009A, r24
    2230:	09 c0       	rjmp	.+18     	; 0x2244 <Timer_setCallBack+0x50>

	}

	/* Timer2 callback */
	else if (timer_ID == TIMER_2)
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	82 30       	cpi	r24, 0x02	; 2
    2236:	31 f4       	brne	.+12     	; 0x2244 <Timer_setCallBack+0x50>
	{
		g_callBackPtr2 = a_ptr;
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	90 93 9d 00 	sts	0x009D, r25
    2240:	80 93 9c 00 	sts	0x009C, r24

	}
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <TWI_init+0xa>
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01

    TWBR = (uint8)(((F_CPU / Config_Ptr->bit_rate) - 16) / (2 * 1));
    2264:	00 e2       	ldi	r16, 0x20	; 32
    2266:	10 e0       	ldi	r17, 0x00	; 0
    2268:	e9 81       	ldd	r30, Y+1	; 0x01
    226a:	fa 81       	ldd	r31, Y+2	; 0x02
    226c:	21 81       	ldd	r18, Z+1	; 0x01
    226e:	32 81       	ldd	r19, Z+2	; 0x02
    2270:	43 81       	ldd	r20, Z+3	; 0x03
    2272:	54 81       	ldd	r21, Z+4	; 0x04
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	92 e1       	ldi	r25, 0x12	; 18
    2278:	aa e7       	ldi	r26, 0x7A	; 122
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 0f 13 	call	0x261e	; 0x261e <__udivmodsi4>
    2284:	da 01       	movw	r26, r20
    2286:	c9 01       	movw	r24, r18
    2288:	40 97       	sbiw	r24, 0x10	; 16
    228a:	a1 09       	sbc	r26, r1
    228c:	b1 09       	sbc	r27, r1
    228e:	b6 95       	lsr	r27
    2290:	a7 95       	ror	r26
    2292:	97 95       	ror	r25
    2294:	87 95       	ror	r24
    2296:	f8 01       	movw	r30, r16
    2298:	80 83       	st	Z, r24
    TWSR = 0x00;
    229a:	e1 e2       	ldi	r30, 0x21	; 33
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	10 82       	st	Z, r1

    TWAR = (Config_Ptr->address << 1);
    22a0:	a2 e2       	ldi	r26, 0x22	; 34
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e9 81       	ldd	r30, Y+1	; 0x01
    22a6:	fa 81       	ldd	r31, Y+2	; 0x02
    22a8:	80 81       	ld	r24, Z
    22aa:	88 0f       	add	r24, r24
    22ac:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    22ae:	e6 e5       	ldi	r30, 0x56	; 86
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	84 e0       	ldi	r24, 0x04	; 4
    22b4:	80 83       	st	Z, r24
}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	08 95       	ret

000022c4 <TWI_start>:

void TWI_start(void)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    22cc:	e6 e5       	ldi	r30, 0x56	; 86
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	84 ea       	ldi	r24, 0xA4	; 164
    22d2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22d4:	e6 e5       	ldi	r30, 0x56	; 86
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	88 23       	and	r24, r24
    22dc:	dc f7       	brge	.-10     	; 0x22d4 <TWI_start+0x10>
}
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <TWI_stop>:

void TWI_stop(void)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    22ec:	e6 e5       	ldi	r30, 0x56	; 86
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	84 e9       	ldi	r24, 0x94	; 148
    22f2:	80 83       	st	Z, r24
}
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	0f 92       	push	r0
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2306:	e3 e2       	ldi	r30, 0x23	; 35
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    230e:	e6 e5       	ldi	r30, 0x56	; 86
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	84 e8       	ldi	r24, 0x84	; 132
    2314:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2316:	e6 e5       	ldi	r30, 0x56	; 86
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	88 23       	and	r24, r24
    231e:	dc f7       	brge	.-10     	; 0x2316 <TWI_writeByte+0x1c>
}
    2320:	0f 90       	pop	r0
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2330:	e6 e5       	ldi	r30, 0x56	; 86
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	84 ec       	ldi	r24, 0xC4	; 196
    2336:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2338:	e6 e5       	ldi	r30, 0x56	; 86
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	88 23       	and	r24, r24
    2340:	dc f7       	brge	.-10     	; 0x2338 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2342:	e3 e2       	ldi	r30, 0x23	; 35
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
}
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2356:	e6 e5       	ldi	r30, 0x56	; 86
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	84 e8       	ldi	r24, 0x84	; 132
    235c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    235e:	e6 e5       	ldi	r30, 0x56	; 86
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	88 23       	and	r24, r24
    2366:	dc f7       	brge	.-10     	; 0x235e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2368:	e3 e2       	ldi	r30, 0x23	; 35
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
}
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	0f 92       	push	r0
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    237e:	e1 e2       	ldi	r30, 0x21	; 33
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	88 7f       	andi	r24, 0xF8	; 248
    2386:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2388:	89 81       	ldd	r24, Y+1	; 0x01
}
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	00 d0       	rcall	.+0      	; 0x2398 <UART_init+0x6>
    2398:	00 d0       	rcall	.+0      	; 0x239a <UART_init+0x8>
    239a:	0f 92       	push	r0
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	9d 83       	std	Y+5, r25	; 0x05
    23a2:	8c 83       	std	Y+4, r24	; 0x04
	uint16 ubrr_value = 0;
    23a4:	1b 82       	std	Y+3, r1	; 0x03
    23a6:	1a 82       	std	Y+2, r1	; 0x02

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    23a8:	eb e2       	ldi	r30, 0x2B	; 43
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23b0:	ea e2       	ldi	r30, 0x2A	; 42
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	88 e1       	ldi	r24, 0x18	; 24
    23b6:	80 83       	st	Z, r24
	/*Data Mode*/
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<UCSZ0);
    23b8:	a0 e4       	ldi	r26, 0x40	; 64
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e0 e4       	ldi	r30, 0x40	; 64
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	28 2f       	mov	r18, r24
    23c4:	29 7f       	andi	r18, 0xF9	; 249
    23c6:	ec 81       	ldd	r30, Y+4	; 0x04
    23c8:	fd 81       	ldd	r31, Y+5	; 0x05
    23ca:	81 81       	ldd	r24, Z+1	; 0x01
    23cc:	88 2f       	mov	r24, r24
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	82 2b       	or	r24, r18
    23d6:	8c 93       	st	X, r24
	uint8 _9_BIT = GET_BIT(Config_Ptr->bit_data,3);
    23d8:	ec 81       	ldd	r30, Y+4	; 0x04
    23da:	fd 81       	ldd	r31, Y+5	; 0x05
    23dc:	81 81       	ldd	r24, Z+1	; 0x01
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	88 70       	andi	r24, 0x08	; 8
    23e4:	90 70       	andi	r25, 0x00	; 0
    23e6:	95 95       	asr	r25
    23e8:	87 95       	ror	r24
    23ea:	95 95       	asr	r25
    23ec:	87 95       	ror	r24
    23ee:	95 95       	asr	r25
    23f0:	87 95       	ror	r24
    23f2:	89 83       	std	Y+1, r24	; 0x01
	UCSRB = (UCSRB & 0xFB) | (_9_BIT<<UCSZ2);
    23f4:	aa e2       	ldi	r26, 0x2A	; 42
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	ea e2       	ldi	r30, 0x2A	; 42
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	28 2f       	mov	r18, r24
    2400:	2b 7f       	andi	r18, 0xFB	; 251
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	82 2b       	or	r24, r18
    2412:	8c 93       	st	X, r24

	/*Stop Bit*/
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<USBS);
    2414:	a0 e4       	ldi	r26, 0x40	; 64
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e0 e4       	ldi	r30, 0x40	; 64
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	28 2f       	mov	r18, r24
    2420:	27 7f       	andi	r18, 0xF7	; 247
    2422:	ec 81       	ldd	r30, Y+4	; 0x04
    2424:	fd 81       	ldd	r31, Y+5	; 0x05
    2426:	83 81       	ldd	r24, Z+3	; 0x03
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	82 2b       	or	r24, r18
    243a:	8c 93       	st	X, r24

	/*Parity Bit*/
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<UPM0);
    243c:	a0 e4       	ldi	r26, 0x40	; 64
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e0 e4       	ldi	r30, 0x40	; 64
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	28 2f       	mov	r18, r24
    2448:	2f 7c       	andi	r18, 0xCF	; 207
    244a:	ec 81       	ldd	r30, Y+4	; 0x04
    244c:	fd 81       	ldd	r31, Y+5	; 0x05
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	82 95       	swap	r24
    2456:	92 95       	swap	r25
    2458:	90 7f       	andi	r25, 0xF0	; 240
    245a:	98 27       	eor	r25, r24
    245c:	80 7f       	andi	r24, 0xF0	; 240
    245e:	98 27       	eor	r25, r24
    2460:	82 2b       	or	r24, r18
    2462:	8c 93       	st	X, r24

	/*Sync Mode*/
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->sync_mode)<<UMSEL);
    2464:	a0 e4       	ldi	r26, 0x40	; 64
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e0 e4       	ldi	r30, 0x40	; 64
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	28 2f       	mov	r18, r24
    2470:	2f 7b       	andi	r18, 0xBF	; 191
    2472:	ec 81       	ldd	r30, Y+4	; 0x04
    2474:	fd 81       	ldd	r31, Y+5	; 0x05
    2476:	80 81       	ld	r24, Z
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	00 24       	eor	r0, r0
    247e:	96 95       	lsr	r25
    2480:	87 95       	ror	r24
    2482:	07 94       	ror	r0
    2484:	96 95       	lsr	r25
    2486:	87 95       	ror	r24
    2488:	07 94       	ror	r0
    248a:	98 2f       	mov	r25, r24
    248c:	80 2d       	mov	r24, r0
    248e:	82 2b       	or	r24, r18
    2490:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2492:	ec 81       	ldd	r30, Y+4	; 0x04
    2494:	fd 81       	ldd	r31, Y+5	; 0x05
    2496:	84 81       	ldd	r24, Z+4	; 0x04
    2498:	95 81       	ldd	r25, Z+5	; 0x05
    249a:	a6 81       	ldd	r26, Z+6	; 0x06
    249c:	b7 81       	ldd	r27, Z+7	; 0x07
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	aa 1f       	adc	r26, r26
    24a4:	bb 1f       	adc	r27, r27
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	aa 1f       	adc	r26, r26
    24ac:	bb 1f       	adc	r27, r27
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	9c 01       	movw	r18, r24
    24b8:	ad 01       	movw	r20, r26
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	92 e1       	ldi	r25, 0x12	; 18
    24be:	aa e7       	ldi	r26, 0x7A	; 122
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 0f 13 	call	0x261e	; 0x261e <__udivmodsi4>
    24ca:	da 01       	movw	r26, r20
    24cc:	c9 01       	movw	r24, r18
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	9b 83       	std	Y+3, r25	; 0x03
    24d2:	8a 83       	std	Y+2, r24	; 0x02

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    24d4:	e0 e4       	ldi	r30, 0x40	; 64
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	9b 81       	ldd	r25, Y+3	; 0x03
    24dc:	89 2f       	mov	r24, r25
    24de:	99 27       	eor	r25, r25
    24e0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    24e2:	e9 e2       	ldi	r30, 0x29	; 41
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	80 83       	st	Z, r24
}
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	0f 92       	push	r0
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2506:	eb e2       	ldi	r30, 0x2B	; 43
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	80 72       	andi	r24, 0x20	; 32
    2512:	90 70       	andi	r25, 0x00	; 0
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	b9 f3       	breq	.-18     	; 0x2506 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2518:	ec e2       	ldi	r30, 0x2C	; 44
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2520:	0f 90       	pop	r0
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2530:	eb e2       	ldi	r30, 0x2B	; 43
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	88 23       	and	r24, r24
    2538:	dc f7       	brge	.-10     	; 0x2530 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    253a:	ec e2       	ldi	r30, 0x2C	; 44
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
}
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	00 d0       	rcall	.+0      	; 0x254c <UART_sendString+0x6>
    254c:	0f 92       	push	r0
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	9b 83       	std	Y+3, r25	; 0x03
    2554:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2556:	19 82       	std	Y+1, r1	; 0x01
    2558:	0e c0       	rjmp	.+28     	; 0x2576 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	9b 81       	ldd	r25, Y+3	; 0x03
    2564:	fc 01       	movw	r30, r24
    2566:	e2 0f       	add	r30, r18
    2568:	f3 1f       	adc	r31, r19
    256a:	80 81       	ld	r24, Z
    256c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <UART_sendByte>
		i++;
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	9b 81       	ldd	r25, Y+3	; 0x03
    2580:	fc 01       	movw	r30, r24
    2582:	e2 0f       	add	r30, r18
    2584:	f3 1f       	adc	r31, r19
    2586:	80 81       	ld	r24, Z
    2588:	88 23       	and	r24, r24
    258a:	39 f7       	brne	.-50     	; 0x255a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <UART_receiveString+0xa>
    25a2:	0f 92       	push	r0
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	9b 83       	std	Y+3, r25	; 0x03
    25aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25ac:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	8c 01       	movw	r16, r24
    25ba:	02 0f       	add	r16, r18
    25bc:	13 1f       	adc	r17, r19
    25be:	0e 94 94 12 	call	0x2528	; 0x2528 <UART_recieveByte>
    25c2:	f8 01       	movw	r30, r16
    25c4:	80 83       	st	Z, r24
    25c6:	0f c0       	rjmp	.+30     	; 0x25e6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	8f 5f       	subi	r24, 0xFF	; 255
    25cc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	9b 81       	ldd	r25, Y+3	; 0x03
    25d8:	8c 01       	movw	r16, r24
    25da:	02 0f       	add	r16, r18
    25dc:	13 1f       	adc	r17, r19
    25de:	0e 94 94 12 	call	0x2528	; 0x2528 <UART_recieveByte>
    25e2:	f8 01       	movw	r30, r16
    25e4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	fc 01       	movw	r30, r24
    25f2:	e2 0f       	add	r30, r18
    25f4:	f3 1f       	adc	r31, r19
    25f6:	80 81       	ld	r24, Z
    25f8:	83 32       	cpi	r24, 0x23	; 35
    25fa:	31 f7       	brne	.-52     	; 0x25c8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	9b 81       	ldd	r25, Y+3	; 0x03
    2606:	fc 01       	movw	r30, r24
    2608:	e2 0f       	add	r30, r18
    260a:	f3 1f       	adc	r31, r19
    260c:	10 82       	st	Z, r1
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	08 95       	ret

0000261e <__udivmodsi4>:
    261e:	a1 e2       	ldi	r26, 0x21	; 33
    2620:	1a 2e       	mov	r1, r26
    2622:	aa 1b       	sub	r26, r26
    2624:	bb 1b       	sub	r27, r27
    2626:	fd 01       	movw	r30, r26
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <__udivmodsi4_ep>

0000262a <__udivmodsi4_loop>:
    262a:	aa 1f       	adc	r26, r26
    262c:	bb 1f       	adc	r27, r27
    262e:	ee 1f       	adc	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	a2 17       	cp	r26, r18
    2634:	b3 07       	cpc	r27, r19
    2636:	e4 07       	cpc	r30, r20
    2638:	f5 07       	cpc	r31, r21
    263a:	20 f0       	brcs	.+8      	; 0x2644 <__udivmodsi4_ep>
    263c:	a2 1b       	sub	r26, r18
    263e:	b3 0b       	sbc	r27, r19
    2640:	e4 0b       	sbc	r30, r20
    2642:	f5 0b       	sbc	r31, r21

00002644 <__udivmodsi4_ep>:
    2644:	66 1f       	adc	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	88 1f       	adc	r24, r24
    264a:	99 1f       	adc	r25, r25
    264c:	1a 94       	dec	r1
    264e:	69 f7       	brne	.-38     	; 0x262a <__udivmodsi4_loop>
    2650:	60 95       	com	r22
    2652:	70 95       	com	r23
    2654:	80 95       	com	r24
    2656:	90 95       	com	r25
    2658:	9b 01       	movw	r18, r22
    265a:	ac 01       	movw	r20, r24
    265c:	bd 01       	movw	r22, r26
    265e:	cf 01       	movw	r24, r30
    2660:	08 95       	ret

00002662 <__prologue_saves__>:
    2662:	2f 92       	push	r2
    2664:	3f 92       	push	r3
    2666:	4f 92       	push	r4
    2668:	5f 92       	push	r5
    266a:	6f 92       	push	r6
    266c:	7f 92       	push	r7
    266e:	8f 92       	push	r8
    2670:	9f 92       	push	r9
    2672:	af 92       	push	r10
    2674:	bf 92       	push	r11
    2676:	cf 92       	push	r12
    2678:	df 92       	push	r13
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	ca 1b       	sub	r28, r26
    268c:	db 0b       	sbc	r29, r27
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	09 94       	ijmp

0000269a <__epilogue_restores__>:
    269a:	2a 88       	ldd	r2, Y+18	; 0x12
    269c:	39 88       	ldd	r3, Y+17	; 0x11
    269e:	48 88       	ldd	r4, Y+16	; 0x10
    26a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    26a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    26a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    26a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    26a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    26aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    26ac:	b9 84       	ldd	r11, Y+9	; 0x09
    26ae:	c8 84       	ldd	r12, Y+8	; 0x08
    26b0:	df 80       	ldd	r13, Y+7	; 0x07
    26b2:	ee 80       	ldd	r14, Y+6	; 0x06
    26b4:	fd 80       	ldd	r15, Y+5	; 0x05
    26b6:	0c 81       	ldd	r16, Y+4	; 0x04
    26b8:	1b 81       	ldd	r17, Y+3	; 0x03
    26ba:	aa 81       	ldd	r26, Y+2	; 0x02
    26bc:	b9 81       	ldd	r27, Y+1	; 0x01
    26be:	ce 0f       	add	r28, r30
    26c0:	d1 1d       	adc	r29, r1
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	ed 01       	movw	r28, r26
    26ce:	08 95       	ret

000026d0 <_exit>:
    26d0:	f8 94       	cli

000026d2 <__stop_program>:
    26d2:	ff cf       	rjmp	.-2      	; 0x26d2 <__stop_program>
