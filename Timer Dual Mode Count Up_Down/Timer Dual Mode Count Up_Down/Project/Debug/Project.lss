
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002d2e  00002dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800070  00800070  00002dd2  2**0
                  ALLOC
  3 .stab         000026a0  00000000  00000000  00002dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f5  00000000  00000000  00005474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006569  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000066a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006819  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008462  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000934d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a4e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_1>
       8:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__vector_2>
       c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_3>
      10:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__vector_4>
      14:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__vector_9>
      28:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__vector_10>
      2c:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 06 	call	0xc48	; 0xc48 <main>
      8a:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_1>:
void Sev_Segment_Display(void);
void COUNT_MODE(void);
void TIME_UP(void);
void TIME_DOWN(void);

ISR(INT0_vect) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	ef 93       	push	r30
     b58:	ff 93       	push	r31
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     b62:	ec e4       	ldi	r30, 0x4C	; 76
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	11 82       	std	Z+1, r1	; 0x01
     b68:	10 82       	st	Z, r1
	hrsTens = 0;
     b6a:	10 92 7c 00 	sts	0x007C, r1
	hrsUnits = 0;
     b6e:	10 92 7b 00 	sts	0x007B, r1
	minTens = 0;
     b72:	10 92 7a 00 	sts	0x007A, r1
	minUnits = 0;
     b76:	10 92 79 00 	sts	0x0079, r1
	secTens = 0;
     b7a:	10 92 78 00 	sts	0x0078, r1
	secUnits = 0;
     b7e:	10 92 77 00 	sts	0x0077, r1
	PORTD &= ~(1 << PD0);
     b82:	a2 e3       	ldi	r26, 0x32	; 50
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e2 e3       	ldi	r30, 0x32	; 50
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	8e 7f       	andi	r24, 0xFE	; 254
     b8e:	8c 93       	st	X, r24
}
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	8f 91       	pop	r24
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <__vector_2>:

ISR(INT1_vect) {
     ba8:	1f 92       	push	r1
     baa:	0f 92       	push	r0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
     bb2:	8f 93       	push	r24
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS12);
     bc4:	ae e4       	ldi	r26, 0x4E	; 78
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	ee e4       	ldi	r30, 0x4E	; 78
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	8b 7f       	andi	r24, 0xFB	; 251
     bd0:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS11);
     bd2:	ae e4       	ldi	r26, 0x4E	; 78
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ee e4       	ldi	r30, 0x4E	; 78
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	8d 7f       	andi	r24, 0xFD	; 253
     bde:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS10);
     be0:	ae e4       	ldi	r26, 0x4E	; 78
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	ee e4       	ldi	r30, 0x4E	; 78
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8e 7f       	andi	r24, 0xFE	; 254
     bec:	8c 93       	st	X, r24
}
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	ff 91       	pop	r31
     bf4:	ef 91       	pop	r30
     bf6:	bf 91       	pop	r27
     bf8:	af 91       	pop	r26
     bfa:	8f 91       	pop	r24
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	1f 90       	pop	r1
     c04:	18 95       	reti

00000c06 <__vector_3>:

ISR(INT2_vect) {
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	8f 93       	push	r24
     c12:	af 93       	push	r26
     c14:	bf 93       	push	r27
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << CS12) | (1 << CS10);
     c22:	ae e4       	ldi	r26, 0x4E	; 78
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	ee e4       	ldi	r30, 0x4E	; 78
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	85 60       	ori	r24, 0x05	; 5
     c2e:	8c 93       	st	X, r24
}
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	bf 91       	pop	r27
     c3a:	af 91       	pop	r26
     c3c:	8f 91       	pop	r24
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	0f 90       	pop	r0
     c44:	1f 90       	pop	r1
     c46:	18 95       	reti

00000c48 <main>:


int main(void)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	2e 97       	sbiw	r28, 0x0e	; 14
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<7);
     c5c:	af e5       	ldi	r26, 0x5F	; 95
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	ef e5       	ldi	r30, 0x5F	; 95
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	80 68       	ori	r24, 0x80	; 128
     c68:	8c 93       	st	X, r24

	/*INPUT PINS*/

	//PORT D
	DDRD &= (~(1 << PD2));
     c6a:	a1 e3       	ldi	r26, 0x31	; 49
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e1 e3       	ldi	r30, 0x31	; 49
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8b 7f       	andi	r24, 0xFB	; 251
     c76:	8c 93       	st	X, r24
	DDRD &= (~(1 << PD3)); // PD2,PD3 INPUT PINS
     c78:	a1 e3       	ldi	r26, 0x31	; 49
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e1 e3       	ldi	r30, 0x31	; 49
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	87 7f       	andi	r24, 0xF7	; 247
     c84:	8c 93       	st	X, r24
	PORTD |= (1 << PD2); // ENABLE INTERNAL PULL-UP RES.
     c86:	a2 e3       	ldi	r26, 0x32	; 50
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e2 e3       	ldi	r30, 0x32	; 50
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	84 60       	ori	r24, 0x04	; 4
     c92:	8c 93       	st	X, r24

	//PORT B
	DDRB &= 0x00;
     c94:	e7 e3       	ldi	r30, 0x37	; 55
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	e7 e3       	ldi	r30, 0x37	; 55
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	10 82       	st	Z, r1
	PORTB |= 0xFF;
     ca0:	e8 e3       	ldi	r30, 0x38	; 56
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	90 81       	ld	r25, Z
     ca6:	e8 e3       	ldi	r30, 0x38	; 56
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24

	//ENABLE INTERANL PULL-UP RES.

	//PORT A
	DDRA &= (~(1 << PA0)) & (~(1 << PA1)) & (~(1 << PA2));
     cae:	aa e3       	ldi	r26, 0x3A	; 58
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ea e3       	ldi	r30, 0x3A	; 58
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	88 7f       	andi	r24, 0xF8	; 248
     cba:	8c 93       	st	X, r24
	DDRA &= (~(1 << PA3)) & (~(1 << PA4)) & (~(1 << PA5));
     cbc:	aa e3       	ldi	r26, 0x3A	; 58
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea e3       	ldi	r30, 0x3A	; 58
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	87 7c       	andi	r24, 0xC7	; 199
     cc8:	8c 93       	st	X, r24

	/*OUTPUT PINS*/

	//PORT D
	DDRD |= (1 << PD0) | (1 << PD4) | (1 << PD5);
     cca:	a1 e3       	ldi	r26, 0x31	; 49
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e1 e3       	ldi	r30, 0x31	; 49
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	81 63       	ori	r24, 0x31	; 49
     cd6:	8c 93       	st	X, r24
	PORTD &= (~(1 << PD0)) & (~(1 << PD4)) & (~(1 << PD5)); // OFF
     cd8:	a2 e3       	ldi	r26, 0x32	; 50
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e2 e3       	ldi	r30, 0x32	; 50
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8e 7c       	andi	r24, 0xCE	; 206
     ce4:	8c 93       	st	X, r24

	//PORT C
	DDRC |= 0x0F;
     ce6:	a4 e3       	ldi	r26, 0x34	; 52
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e3       	ldi	r30, 0x34	; 52
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8f 60       	ori	r24, 0x0F	; 15
     cf2:	8c 93       	st	X, r24
	PORTC &= 0xF0;
     cf4:	a5 e3       	ldi	r26, 0x35	; 53
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e5 e3       	ldi	r30, 0x35	; 53
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 7f       	andi	r24, 0xF0	; 240
     d00:	8c 93       	st	X, r24


	Timer_ConfigType Timer_Configurations = {0,15624,TIMER_1,F_CPU_1024,COMPARE_MODE};
     d02:	fe 01       	movw	r30, r28
     d04:	31 96       	adiw	r30, 0x01	; 1
     d06:	fb 87       	std	Y+11, r31	; 0x0b
     d08:	ea 87       	std	Y+10, r30	; 0x0a
     d0a:	89 e6       	ldi	r24, 0x69	; 105
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	9d 87       	std	Y+13, r25	; 0x0d
     d10:	8c 87       	std	Y+12, r24	; 0x0c
     d12:	97 e0       	ldi	r25, 0x07	; 7
     d14:	9e 87       	std	Y+14, r25	; 0x0e
     d16:	ec 85       	ldd	r30, Y+12	; 0x0c
     d18:	fd 85       	ldd	r31, Y+13	; 0x0d
     d1a:	00 80       	ld	r0, Z
     d1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	9d 87       	std	Y+13, r25	; 0x0d
     d24:	8c 87       	std	Y+12, r24	; 0x0c
     d26:	ea 85       	ldd	r30, Y+10	; 0x0a
     d28:	fb 85       	ldd	r31, Y+11	; 0x0b
     d2a:	00 82       	st	Z, r0
     d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	9b 87       	std	Y+11, r25	; 0x0b
     d34:	8a 87       	std	Y+10, r24	; 0x0a
     d36:	9e 85       	ldd	r25, Y+14	; 0x0e
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	9e 87       	std	Y+14, r25	; 0x0e
     d3c:	ee 85       	ldd	r30, Y+14	; 0x0e
     d3e:	ee 23       	and	r30, r30
     d40:	51 f7       	brne	.-44     	; 0xd16 <main+0xce>

	Timer_init(&Timer_Configurations);
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	0e 94 c4 14 	call	0x2988	; 0x2988 <Timer_init>

		INT0_init();
     d4a:	0e 94 b9 06 	call	0xd72	; 0xd72 <INT0_init>
		INT1_init();
     d4e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <INT1_init>
		INT2_init();
     d52:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <INT2_init>

	while(1)
	{
		Sev_Segment_Display();
     d56:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Sev_Segment_Display>
		COUNT_MODE();
     d5a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <COUNT_MODE>
		TIME_UP();
     d5e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TIME_UP>
		TIME_DOWN();
     d62:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <TIME_DOWN>
		Timer_setCallBack(countingTimer,TIMER_1);
     d66:	8f e5       	ldi	r24, 0x5F	; 95
     d68:	9f e0       	ldi	r25, 0x0F	; 15
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <Timer_setCallBack>
     d70:	f2 cf       	rjmp	.-28     	; 0xd56 <main+0x10e>

00000d72 <INT0_init>:
	}

}

void INT0_init(void) {
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	GICR |= (1 << INT0); // ENABLE INT0
     d7a:	ab e5       	ldi	r26, 0x5B	; 91
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e5       	ldi	r30, 0x5B	; 91
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 64       	ori	r24, 0x40	; 64
     d86:	8c 93       	st	X, r24
	MCUCR |= (1 << ISC01); // FALLING EDGE
     d88:	a5 e5       	ldi	r26, 0x55	; 85
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e5 e5       	ldi	r30, 0x55	; 85
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	82 60       	ori	r24, 0x02	; 2
     d94:	8c 93       	st	X, r24
}
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <INT1_init>:

void INT1_init(void) {
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1 << ISC11) | (1 << ISC10); // RISING EDGE
     da4:	a5 e5       	ldi	r26, 0x55	; 85
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e5 e5       	ldi	r30, 0x55	; 85
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8c 60       	ori	r24, 0x0C	; 12
     db0:	8c 93       	st	X, r24
	GICR |= (1 << INT1); //ENABLE INT1
     db2:	ab e5       	ldi	r26, 0x5B	; 91
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e5       	ldi	r30, 0x5B	; 91
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 68       	ori	r24, 0x80	; 128
     dbe:	8c 93       	st	X, r24
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <INT2_init>:

void INT2_init(void) {
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	GICR |= (1 << INT2); //ENABLE INT2
     dce:	ab e5       	ldi	r26, 0x5B	; 91
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	eb e5       	ldi	r30, 0x5B	; 91
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 62       	ori	r24, 0x20	; 32
     dda:	8c 93       	st	X, r24
	MCUCSR &= (~(1 << ISC2)); // FALLING EDGE
     ddc:	a4 e5       	ldi	r26, 0x54	; 84
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e4 e5       	ldi	r30, 0x54	; 84
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8f 7b       	andi	r24, 0xBF	; 191
     de8:	8c 93       	st	X, r24
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <Sev_Segment_Display>:
void Sev_Segment_Display(void) {
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	c4 55       	subi	r28, 0x54	; 84
     dfe:	d0 40       	sbci	r29, 0x00	; 0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
	PORTA = 0x20;
     e0a:	eb e3       	ldi	r30, 0x3B	; 59
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (secUnits & 0x0F);
     e12:	a5 e3       	ldi	r26, 0x35	; 53
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e5 e3       	ldi	r30, 0x35	; 53
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	98 2f       	mov	r25, r24
     e1e:	90 7f       	andi	r25, 0xF0	; 240
     e20:	80 91 77 00 	lds	r24, 0x0077
     e24:	8f 70       	andi	r24, 0x0F	; 15
     e26:	89 2b       	or	r24, r25
     e28:	8c 93       	st	X, r24
     e2a:	fe 01       	movw	r30, r28
     e2c:	ef 5a       	subi	r30, 0xAF	; 175
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a0 e0       	ldi	r26, 0x00	; 0
     e36:	b0 e4       	ldi	r27, 0x40	; 64
     e38:	80 83       	st	Z, r24
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	a2 83       	std	Z+2, r26	; 0x02
     e3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e40:	8e 01       	movw	r16, r28
     e42:	03 5b       	subi	r16, 0xB3	; 179
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	fe 01       	movw	r30, r28
     e48:	ef 5a       	subi	r30, 0xAF	; 175
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	4a e7       	ldi	r20, 0x7A	; 122
     e5a:	55 e4       	ldi	r21, 0x45	; 69
     e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	f8 01       	movw	r30, r16
     e66:	80 83       	st	Z, r24
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	a2 83       	std	Z+2, r26	; 0x02
     e6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e6e:	fe 01       	movw	r30, r28
     e70:	e3 5b       	subi	r30, 0xB3	; 179
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	5f e3       	ldi	r21, 0x3F	; 63
     e84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e88:	88 23       	and	r24, r24
     e8a:	44 f4       	brge	.+16     	; 0xe9c <Sev_Segment_Display+0xac>
		__ticks = 1;
     e8c:	fe 01       	movw	r30, r28
     e8e:	e5 5b       	subi	r30, 0xB5	; 181
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	91 83       	std	Z+1, r25	; 0x01
     e98:	80 83       	st	Z, r24
     e9a:	64 c0       	rjmp	.+200    	; 0xf64 <Sev_Segment_Display+0x174>
	else if (__tmp > 65535)
     e9c:	fe 01       	movw	r30, r28
     e9e:	e3 5b       	subi	r30, 0xB3	; 179
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	60 81       	ld	r22, Z
     ea4:	71 81       	ldd	r23, Z+1	; 0x01
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	93 81       	ldd	r25, Z+3	; 0x03
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	3f ef       	ldi	r19, 0xFF	; 255
     eae:	4f e7       	ldi	r20, 0x7F	; 127
     eb0:	57 e4       	ldi	r21, 0x47	; 71
     eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	0c f0       	brlt	.+2      	; 0xebc <Sev_Segment_Display+0xcc>
     eba:	43 c0       	rjmp	.+134    	; 0xf42 <Sev_Segment_Display+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebc:	fe 01       	movw	r30, r28
     ebe:	ef 5a       	subi	r30, 0xAF	; 175
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	60 81       	ld	r22, Z
     ec4:	71 81       	ldd	r23, Z+1	; 0x01
     ec6:	82 81       	ldd	r24, Z+2	; 0x02
     ec8:	93 81       	ldd	r25, Z+3	; 0x03
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	51 e4       	ldi	r21, 0x41	; 65
     ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	8e 01       	movw	r16, r28
     edc:	05 5b       	subi	r16, 0xB5	; 181
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	f8 01       	movw	r30, r16
     eee:	91 83       	std	Z+1, r25	; 0x01
     ef0:	80 83       	st	Z, r24
     ef2:	1f c0       	rjmp	.+62     	; 0xf32 <Sev_Segment_Display+0x142>
     ef4:	fe 01       	movw	r30, r28
     ef6:	e7 5b       	subi	r30, 0xB7	; 183
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	80 e9       	ldi	r24, 0x90	; 144
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f02:	fe 01       	movw	r30, r28
     f04:	e7 5b       	subi	r30, 0xB7	; 183
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <Sev_Segment_Display+0x11c>
     f10:	fe 01       	movw	r30, r28
     f12:	e7 5b       	subi	r30, 0xB7	; 183
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1a:	de 01       	movw	r26, r28
     f1c:	a5 5b       	subi	r26, 0xB5	; 181
     f1e:	bf 4f       	sbci	r27, 0xFF	; 255
     f20:	fe 01       	movw	r30, r28
     f22:	e5 5b       	subi	r30, 0xB5	; 181
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	11 96       	adiw	r26, 0x01	; 1
     f2e:	9c 93       	st	X, r25
     f30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f32:	fe 01       	movw	r30, r28
     f34:	e5 5b       	subi	r30, 0xB5	; 181
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	d1 f6       	brne	.-76     	; 0xef4 <Sev_Segment_Display+0x104>
     f40:	27 c0       	rjmp	.+78     	; 0xf90 <Sev_Segment_Display+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f42:	8e 01       	movw	r16, r28
     f44:	05 5b       	subi	r16, 0xB5	; 181
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	fe 01       	movw	r30, r28
     f4a:	e3 5b       	subi	r30, 0xB3	; 179
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	f8 01       	movw	r30, r16
     f60:	91 83       	std	Z+1, r25	; 0x01
     f62:	80 83       	st	Z, r24
     f64:	de 01       	movw	r26, r28
     f66:	a9 5b       	subi	r26, 0xB9	; 185
     f68:	bf 4f       	sbci	r27, 0xFF	; 255
     f6a:	fe 01       	movw	r30, r28
     f6c:	e5 5b       	subi	r30, 0xB5	; 181
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	8d 93       	st	X+, r24
     f76:	9c 93       	st	X, r25
     f78:	fe 01       	movw	r30, r28
     f7a:	e9 5b       	subi	r30, 0xB9	; 185
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <Sev_Segment_Display+0x192>
     f86:	fe 01       	movw	r30, r28
     f88:	e9 5b       	subi	r30, 0xB9	; 185
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
	_delay_ms(2);

	PORTA = 0x10;
     f90:	eb e3       	ldi	r30, 0x3B	; 59
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 e1       	ldi	r24, 0x10	; 16
     f96:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (secTens & 0x0F);
     f98:	a5 e3       	ldi	r26, 0x35	; 53
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e3       	ldi	r30, 0x35	; 53
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	98 2f       	mov	r25, r24
     fa4:	90 7f       	andi	r25, 0xF0	; 240
     fa6:	80 91 78 00 	lds	r24, 0x0078
     faa:	8f 70       	andi	r24, 0x0F	; 15
     fac:	89 2b       	or	r24, r25
     fae:	8c 93       	st	X, r24
     fb0:	fe 01       	movw	r30, r28
     fb2:	ed 5b       	subi	r30, 0xBD	; 189
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	b0 e4       	ldi	r27, 0x40	; 64
     fbe:	80 83       	st	Z, r24
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	a2 83       	std	Z+2, r26	; 0x02
     fc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	8e 01       	movw	r16, r28
     fc8:	01 5c       	subi	r16, 0xC1	; 193
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	fe 01       	movw	r30, r28
     fce:	ed 5b       	subi	r30, 0xBD	; 189
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	4a e7       	ldi	r20, 0x7A	; 122
     fe0:	55 e4       	ldi	r21, 0x45	; 69
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	f8 01       	movw	r30, r16
     fec:	80 83       	st	Z, r24
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	a2 83       	std	Z+2, r26	; 0x02
     ff2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ff4:	fe 01       	movw	r30, r28
     ff6:	ff 96       	adiw	r30, 0x3f	; 63
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e8       	ldi	r20, 0x80	; 128
    1006:	5f e3       	ldi	r21, 0x3F	; 63
    1008:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100c:	88 23       	and	r24, r24
    100e:	2c f4       	brge	.+10     	; 0x101a <Sev_Segment_Display+0x22a>
		__ticks = 1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	9e af       	std	Y+62, r25	; 0x3e
    1016:	8d af       	std	Y+61, r24	; 0x3d
    1018:	46 c0       	rjmp	.+140    	; 0x10a6 <Sev_Segment_Display+0x2b6>
	else if (__tmp > 65535)
    101a:	fe 01       	movw	r30, r28
    101c:	ff 96       	adiw	r30, 0x3f	; 63
    101e:	60 81       	ld	r22, Z
    1020:	71 81       	ldd	r23, Z+1	; 0x01
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	93 81       	ldd	r25, Z+3	; 0x03
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	57 e4       	ldi	r21, 0x47	; 71
    102e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1032:	18 16       	cp	r1, r24
    1034:	64 f5       	brge	.+88     	; 0x108e <Sev_Segment_Display+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1036:	fe 01       	movw	r30, r28
    1038:	ed 5b       	subi	r30, 0xBD	; 189
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	60 81       	ld	r22, Z
    103e:	71 81       	ldd	r23, Z+1	; 0x01
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e2       	ldi	r20, 0x20	; 32
    104a:	51 e4       	ldi	r21, 0x41	; 65
    104c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	9e af       	std	Y+62, r25	; 0x3e
    1062:	8d af       	std	Y+61, r24	; 0x3d
    1064:	0f c0       	rjmp	.+30     	; 0x1084 <Sev_Segment_Display+0x294>
    1066:	80 e9       	ldi	r24, 0x90	; 144
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	9c af       	std	Y+60, r25	; 0x3c
    106c:	8b af       	std	Y+59, r24	; 0x3b
    106e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1070:	9c ad       	ldd	r25, Y+60	; 0x3c
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <Sev_Segment_Display+0x282>
    1076:	9c af       	std	Y+60, r25	; 0x3c
    1078:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107a:	8d ad       	ldd	r24, Y+61	; 0x3d
    107c:	9e ad       	ldd	r25, Y+62	; 0x3e
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	9e af       	std	Y+62, r25	; 0x3e
    1082:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1084:	8d ad       	ldd	r24, Y+61	; 0x3d
    1086:	9e ad       	ldd	r25, Y+62	; 0x3e
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	69 f7       	brne	.-38     	; 0x1066 <Sev_Segment_Display+0x276>
    108c:	16 c0       	rjmp	.+44     	; 0x10ba <Sev_Segment_Display+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108e:	fe 01       	movw	r30, r28
    1090:	ff 96       	adiw	r30, 0x3f	; 63
    1092:	60 81       	ld	r22, Z
    1094:	71 81       	ldd	r23, Z+1	; 0x01
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9e af       	std	Y+62, r25	; 0x3e
    10a4:	8d af       	std	Y+61, r24	; 0x3d
    10a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    10a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    10aa:	9a af       	std	Y+58, r25	; 0x3a
    10ac:	89 af       	std	Y+57, r24	; 0x39
    10ae:	89 ad       	ldd	r24, Y+57	; 0x39
    10b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <Sev_Segment_Display+0x2c2>
    10b6:	9a af       	std	Y+58, r25	; 0x3a
    10b8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);

	PORTA = 0x08;
    10ba:	eb e3       	ldi	r30, 0x3B	; 59
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	88 e0       	ldi	r24, 0x08	; 8
    10c0:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (minUnits & 0x0F);
    10c2:	a5 e3       	ldi	r26, 0x35	; 53
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e5 e3       	ldi	r30, 0x35	; 53
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	98 2f       	mov	r25, r24
    10ce:	90 7f       	andi	r25, 0xF0	; 240
    10d0:	80 91 79 00 	lds	r24, 0x0079
    10d4:	8f 70       	andi	r24, 0x0F	; 15
    10d6:	89 2b       	or	r24, r25
    10d8:	8c 93       	st	X, r24
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e4       	ldi	r27, 0x40	; 64
    10e2:	8d ab       	std	Y+53, r24	; 0x35
    10e4:	9e ab       	std	Y+54, r25	; 0x36
    10e6:	af ab       	std	Y+55, r26	; 0x37
    10e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	6d a9       	ldd	r22, Y+53	; 0x35
    10ec:	7e a9       	ldd	r23, Y+54	; 0x36
    10ee:	8f a9       	ldd	r24, Y+55	; 0x37
    10f0:	98 ad       	ldd	r25, Y+56	; 0x38
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4a e7       	ldi	r20, 0x7A	; 122
    10f8:	55 e4       	ldi	r21, 0x45	; 69
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	89 ab       	std	Y+49, r24	; 0x31
    1104:	9a ab       	std	Y+50, r25	; 0x32
    1106:	ab ab       	std	Y+51, r26	; 0x33
    1108:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    110a:	69 a9       	ldd	r22, Y+49	; 0x31
    110c:	7a a9       	ldd	r23, Y+50	; 0x32
    110e:	8b a9       	ldd	r24, Y+51	; 0x33
    1110:	9c a9       	ldd	r25, Y+52	; 0x34
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <Sev_Segment_Display+0x33c>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	98 ab       	std	Y+48, r25	; 0x30
    1128:	8f a7       	std	Y+47, r24	; 0x2f
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <Sev_Segment_Display+0x3ba>
	else if (__tmp > 65535)
    112c:	69 a9       	ldd	r22, Y+49	; 0x31
    112e:	7a a9       	ldd	r23, Y+50	; 0x32
    1130:	8b a9       	ldd	r24, Y+51	; 0x33
    1132:	9c a9       	ldd	r25, Y+52	; 0x34
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	4c f5       	brge	.+82     	; 0x1196 <Sev_Segment_Display+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	6d a9       	ldd	r22, Y+53	; 0x35
    1146:	7e a9       	ldd	r23, Y+54	; 0x36
    1148:	8f a9       	ldd	r24, Y+55	; 0x37
    114a:	98 ad       	ldd	r25, Y+56	; 0x38
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	98 ab       	std	Y+48, r25	; 0x30
    116a:	8f a7       	std	Y+47, r24	; 0x2f
    116c:	0f c0       	rjmp	.+30     	; 0x118c <Sev_Segment_Display+0x39c>
    116e:	80 e9       	ldi	r24, 0x90	; 144
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	9e a7       	std	Y+46, r25	; 0x2e
    1174:	8d a7       	std	Y+45, r24	; 0x2d
    1176:	8d a5       	ldd	r24, Y+45	; 0x2d
    1178:	9e a5       	ldd	r25, Y+46	; 0x2e
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <Sev_Segment_Display+0x38a>
    117e:	9e a7       	std	Y+46, r25	; 0x2e
    1180:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	8f a5       	ldd	r24, Y+47	; 0x2f
    1184:	98 a9       	ldd	r25, Y+48	; 0x30
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	98 ab       	std	Y+48, r25	; 0x30
    118a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	8f a5       	ldd	r24, Y+47	; 0x2f
    118e:	98 a9       	ldd	r25, Y+48	; 0x30
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <Sev_Segment_Display+0x37e>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <Sev_Segment_Display+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	69 a9       	ldd	r22, Y+49	; 0x31
    1198:	7a a9       	ldd	r23, Y+50	; 0x32
    119a:	8b a9       	ldd	r24, Y+51	; 0x33
    119c:	9c a9       	ldd	r25, Y+52	; 0x34
    119e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	98 ab       	std	Y+48, r25	; 0x30
    11a8:	8f a7       	std	Y+47, r24	; 0x2f
    11aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ac:	98 a9       	ldd	r25, Y+48	; 0x30
    11ae:	9c a7       	std	Y+44, r25	; 0x2c
    11b0:	8b a7       	std	Y+43, r24	; 0x2b
    11b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <Sev_Segment_Display+0x3c6>
    11ba:	9c a7       	std	Y+44, r25	; 0x2c
    11bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	PORTA = 0x04;
    11be:	eb e3       	ldi	r30, 0x3B	; 59
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	84 e0       	ldi	r24, 0x04	; 4
    11c4:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (minTens & 0x0F);
    11c6:	a5 e3       	ldi	r26, 0x35	; 53
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e5 e3       	ldi	r30, 0x35	; 53
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	98 2f       	mov	r25, r24
    11d2:	90 7f       	andi	r25, 0xF0	; 240
    11d4:	80 91 7a 00 	lds	r24, 0x007A
    11d8:	8f 70       	andi	r24, 0x0F	; 15
    11da:	89 2b       	or	r24, r25
    11dc:	8c 93       	st	X, r24
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e4       	ldi	r27, 0x40	; 64
    11e6:	8f a3       	std	Y+39, r24	; 0x27
    11e8:	98 a7       	std	Y+40, r25	; 0x28
    11ea:	a9 a7       	std	Y+41, r26	; 0x29
    11ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ee:	6f a1       	ldd	r22, Y+39	; 0x27
    11f0:	78 a5       	ldd	r23, Y+40	; 0x28
    11f2:	89 a5       	ldd	r24, Y+41	; 0x29
    11f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	4a e7       	ldi	r20, 0x7A	; 122
    11fc:	55 e4       	ldi	r21, 0x45	; 69
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	8b a3       	std	Y+35, r24	; 0x23
    1208:	9c a3       	std	Y+36, r25	; 0x24
    120a:	ad a3       	std	Y+37, r26	; 0x25
    120c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    120e:	6b a1       	ldd	r22, Y+35	; 0x23
    1210:	7c a1       	ldd	r23, Y+36	; 0x24
    1212:	8d a1       	ldd	r24, Y+37	; 0x25
    1214:	9e a1       	ldd	r25, Y+38	; 0x26
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e8       	ldi	r20, 0x80	; 128
    121c:	5f e3       	ldi	r21, 0x3F	; 63
    121e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1222:	88 23       	and	r24, r24
    1224:	2c f4       	brge	.+10     	; 0x1230 <Sev_Segment_Display+0x440>
		__ticks = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9a a3       	std	Y+34, r25	; 0x22
    122c:	89 a3       	std	Y+33, r24	; 0x21
    122e:	3f c0       	rjmp	.+126    	; 0x12ae <Sev_Segment_Display+0x4be>
	else if (__tmp > 65535)
    1230:	6b a1       	ldd	r22, Y+35	; 0x23
    1232:	7c a1       	ldd	r23, Y+36	; 0x24
    1234:	8d a1       	ldd	r24, Y+37	; 0x25
    1236:	9e a1       	ldd	r25, Y+38	; 0x26
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	3f ef       	ldi	r19, 0xFF	; 255
    123c:	4f e7       	ldi	r20, 0x7F	; 127
    123e:	57 e4       	ldi	r21, 0x47	; 71
    1240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1244:	18 16       	cp	r1, r24
    1246:	4c f5       	brge	.+82     	; 0x129a <Sev_Segment_Display+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1248:	6f a1       	ldd	r22, Y+39	; 0x27
    124a:	78 a5       	ldd	r23, Y+40	; 0x28
    124c:	89 a5       	ldd	r24, Y+41	; 0x29
    124e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e2       	ldi	r20, 0x20	; 32
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	9a a3       	std	Y+34, r25	; 0x22
    126e:	89 a3       	std	Y+33, r24	; 0x21
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <Sev_Segment_Display+0x4a0>
    1272:	80 e9       	ldi	r24, 0x90	; 144
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	98 a3       	std	Y+32, r25	; 0x20
    1278:	8f 8f       	std	Y+31, r24	; 0x1f
    127a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    127c:	98 a1       	ldd	r25, Y+32	; 0x20
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <Sev_Segment_Display+0x48e>
    1282:	98 a3       	std	Y+32, r25	; 0x20
    1284:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1286:	89 a1       	ldd	r24, Y+33	; 0x21
    1288:	9a a1       	ldd	r25, Y+34	; 0x22
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	9a a3       	std	Y+34, r25	; 0x22
    128e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1290:	89 a1       	ldd	r24, Y+33	; 0x21
    1292:	9a a1       	ldd	r25, Y+34	; 0x22
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f7       	brne	.-38     	; 0x1272 <Sev_Segment_Display+0x482>
    1298:	14 c0       	rjmp	.+40     	; 0x12c2 <Sev_Segment_Display+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	6b a1       	ldd	r22, Y+35	; 0x23
    129c:	7c a1       	ldd	r23, Y+36	; 0x24
    129e:	8d a1       	ldd	r24, Y+37	; 0x25
    12a0:	9e a1       	ldd	r25, Y+38	; 0x26
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9a a3       	std	Y+34, r25	; 0x22
    12ac:	89 a3       	std	Y+33, r24	; 0x21
    12ae:	89 a1       	ldd	r24, Y+33	; 0x21
    12b0:	9a a1       	ldd	r25, Y+34	; 0x22
    12b2:	9e 8f       	std	Y+30, r25	; 0x1e
    12b4:	8d 8f       	std	Y+29, r24	; 0x1d
    12b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <Sev_Segment_Display+0x4ca>
    12be:	9e 8f       	std	Y+30, r25	; 0x1e
    12c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	PORTA = 0x02;
    12c2:	eb e3       	ldi	r30, 0x3B	; 59
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (hrsUnits & 0x0F);
    12ca:	a5 e3       	ldi	r26, 0x35	; 53
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e3       	ldi	r30, 0x35	; 53
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	98 2f       	mov	r25, r24
    12d6:	90 7f       	andi	r25, 0xF0	; 240
    12d8:	80 91 7b 00 	lds	r24, 0x007B
    12dc:	8f 70       	andi	r24, 0x0F	; 15
    12de:	89 2b       	or	r24, r25
    12e0:	8c 93       	st	X, r24
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a0 e0       	ldi	r26, 0x00	; 0
    12e8:	b0 e4       	ldi	r27, 0x40	; 64
    12ea:	89 8f       	std	Y+25, r24	; 0x19
    12ec:	9a 8f       	std	Y+26, r25	; 0x1a
    12ee:	ab 8f       	std	Y+27, r26	; 0x1b
    12f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f2:	69 8d       	ldd	r22, Y+25	; 0x19
    12f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	4a e7       	ldi	r20, 0x7A	; 122
    1300:	55 e4       	ldi	r21, 0x45	; 69
    1302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	8d 8b       	std	Y+21, r24	; 0x15
    130c:	9e 8b       	std	Y+22, r25	; 0x16
    130e:	af 8b       	std	Y+23, r26	; 0x17
    1310:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1312:	6d 89       	ldd	r22, Y+21	; 0x15
    1314:	7e 89       	ldd	r23, Y+22	; 0x16
    1316:	8f 89       	ldd	r24, Y+23	; 0x17
    1318:	98 8d       	ldd	r25, Y+24	; 0x18
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e8       	ldi	r20, 0x80	; 128
    1320:	5f e3       	ldi	r21, 0x3F	; 63
    1322:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1326:	88 23       	and	r24, r24
    1328:	2c f4       	brge	.+10     	; 0x1334 <Sev_Segment_Display+0x544>
		__ticks = 1;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	9c 8b       	std	Y+20, r25	; 0x14
    1330:	8b 8b       	std	Y+19, r24	; 0x13
    1332:	3f c0       	rjmp	.+126    	; 0x13b2 <Sev_Segment_Display+0x5c2>
	else if (__tmp > 65535)
    1334:	6d 89       	ldd	r22, Y+21	; 0x15
    1336:	7e 89       	ldd	r23, Y+22	; 0x16
    1338:	8f 89       	ldd	r24, Y+23	; 0x17
    133a:	98 8d       	ldd	r25, Y+24	; 0x18
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	3f ef       	ldi	r19, 0xFF	; 255
    1340:	4f e7       	ldi	r20, 0x7F	; 127
    1342:	57 e4       	ldi	r21, 0x47	; 71
    1344:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1348:	18 16       	cp	r1, r24
    134a:	4c f5       	brge	.+82     	; 0x139e <Sev_Segment_Display+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134c:	69 8d       	ldd	r22, Y+25	; 0x19
    134e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1350:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1352:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e2       	ldi	r20, 0x20	; 32
    135a:	51 e4       	ldi	r21, 0x41	; 65
    135c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	bc 01       	movw	r22, r24
    1366:	cd 01       	movw	r24, r26
    1368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	9c 8b       	std	Y+20, r25	; 0x14
    1372:	8b 8b       	std	Y+19, r24	; 0x13
    1374:	0f c0       	rjmp	.+30     	; 0x1394 <Sev_Segment_Display+0x5a4>
    1376:	80 e9       	ldi	r24, 0x90	; 144
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	9a 8b       	std	Y+18, r25	; 0x12
    137c:	89 8b       	std	Y+17, r24	; 0x11
    137e:	89 89       	ldd	r24, Y+17	; 0x11
    1380:	9a 89       	ldd	r25, Y+18	; 0x12
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <Sev_Segment_Display+0x592>
    1386:	9a 8b       	std	Y+18, r25	; 0x12
    1388:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138a:	8b 89       	ldd	r24, Y+19	; 0x13
    138c:	9c 89       	ldd	r25, Y+20	; 0x14
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	9c 8b       	std	Y+20, r25	; 0x14
    1392:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1394:	8b 89       	ldd	r24, Y+19	; 0x13
    1396:	9c 89       	ldd	r25, Y+20	; 0x14
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	69 f7       	brne	.-38     	; 0x1376 <Sev_Segment_Display+0x586>
    139c:	14 c0       	rjmp	.+40     	; 0x13c6 <Sev_Segment_Display+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139e:	6d 89       	ldd	r22, Y+21	; 0x15
    13a0:	7e 89       	ldd	r23, Y+22	; 0x16
    13a2:	8f 89       	ldd	r24, Y+23	; 0x17
    13a4:	98 8d       	ldd	r25, Y+24	; 0x18
    13a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	9c 8b       	std	Y+20, r25	; 0x14
    13b0:	8b 8b       	std	Y+19, r24	; 0x13
    13b2:	8b 89       	ldd	r24, Y+19	; 0x13
    13b4:	9c 89       	ldd	r25, Y+20	; 0x14
    13b6:	98 8b       	std	Y+16, r25	; 0x10
    13b8:	8f 87       	std	Y+15, r24	; 0x0f
    13ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    13bc:	98 89       	ldd	r25, Y+16	; 0x10
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <Sev_Segment_Display+0x5ce>
    13c2:	98 8b       	std	Y+16, r25	; 0x10
    13c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	PORTA = 0x01;
    13c6:	eb e3       	ldi	r30, 0x3B	; 59
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (hrsTens & 0x0F);
    13ce:	a5 e3       	ldi	r26, 0x35	; 53
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e3       	ldi	r30, 0x35	; 53
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	98 2f       	mov	r25, r24
    13da:	90 7f       	andi	r25, 0xF0	; 240
    13dc:	80 91 7c 00 	lds	r24, 0x007C
    13e0:	8f 70       	andi	r24, 0x0F	; 15
    13e2:	89 2b       	or	r24, r25
    13e4:	8c 93       	st	X, r24
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e4       	ldi	r27, 0x40	; 64
    13ee:	8b 87       	std	Y+11, r24	; 0x0b
    13f0:	9c 87       	std	Y+12, r25	; 0x0c
    13f2:	ad 87       	std	Y+13, r26	; 0x0d
    13f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4a e7       	ldi	r20, 0x7A	; 122
    1404:	55 e4       	ldi	r21, 0x45	; 69
    1406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	8f 83       	std	Y+7, r24	; 0x07
    1410:	98 87       	std	Y+8, r25	; 0x08
    1412:	a9 87       	std	Y+9, r26	; 0x09
    1414:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1416:	6f 81       	ldd	r22, Y+7	; 0x07
    1418:	78 85       	ldd	r23, Y+8	; 0x08
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	9a 85       	ldd	r25, Y+10	; 0x0a
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e8       	ldi	r20, 0x80	; 128
    1424:	5f e3       	ldi	r21, 0x3F	; 63
    1426:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    142a:	88 23       	and	r24, r24
    142c:	2c f4       	brge	.+10     	; 0x1438 <Sev_Segment_Display+0x648>
		__ticks = 1;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	8d 83       	std	Y+5, r24	; 0x05
    1436:	3f c0       	rjmp	.+126    	; 0x14b6 <Sev_Segment_Display+0x6c6>
	else if (__tmp > 65535)
    1438:	6f 81       	ldd	r22, Y+7	; 0x07
    143a:	78 85       	ldd	r23, Y+8	; 0x08
    143c:	89 85       	ldd	r24, Y+9	; 0x09
    143e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	3f ef       	ldi	r19, 0xFF	; 255
    1444:	4f e7       	ldi	r20, 0x7F	; 127
    1446:	57 e4       	ldi	r21, 0x47	; 71
    1448:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    144c:	18 16       	cp	r1, r24
    144e:	4c f5       	brge	.+82     	; 0x14a2 <Sev_Segment_Display+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1450:	6b 85       	ldd	r22, Y+11	; 0x0b
    1452:	7c 85       	ldd	r23, Y+12	; 0x0c
    1454:	8d 85       	ldd	r24, Y+13	; 0x0d
    1456:	9e 85       	ldd	r25, Y+14	; 0x0e
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e2       	ldi	r20, 0x20	; 32
    145e:	51 e4       	ldi	r21, 0x41	; 65
    1460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	0f c0       	rjmp	.+30     	; 0x1498 <Sev_Segment_Display+0x6a8>
    147a:	80 e9       	ldi	r24, 0x90	; 144
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	8b 83       	std	Y+3, r24	; 0x03
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <Sev_Segment_Display+0x696>
    148a:	9c 83       	std	Y+4, r25	; 0x04
    148c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	69 f7       	brne	.-38     	; 0x147a <Sev_Segment_Display+0x68a>
    14a0:	14 c0       	rjmp	.+40     	; 0x14ca <Sev_Segment_Display+0x6da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <Sev_Segment_Display+0x6d2>
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    14ca:	cc 5a       	subi	r28, 0xAC	; 172
    14cc:	df 4f       	sbci	r29, 0xFF	; 255
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	08 95       	ret

000014e2 <COUNT_MODE>:

void COUNT_MODE(void) {
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	2f 97       	sbiw	r28, 0x0f	; 15
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
	if (!(PINB & (1 << PB7))) {
    14f6:	e6 e3       	ldi	r30, 0x36	; 54
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	88 23       	and	r24, r24
    14fe:	0c f4       	brge	.+2      	; 0x1502 <COUNT_MODE+0x20>
    1500:	89 c0       	rjmp	.+274    	; 0x1614 <COUNT_MODE+0x132>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 ef       	ldi	r26, 0xF0	; 240
    1508:	b1 e4       	ldi	r27, 0x41	; 65
    150a:	8b 87       	std	Y+11, r24	; 0x0b
    150c:	9c 87       	std	Y+12, r25	; 0x0c
    150e:	ad 87       	std	Y+13, r26	; 0x0d
    1510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1512:	6b 85       	ldd	r22, Y+11	; 0x0b
    1514:	7c 85       	ldd	r23, Y+12	; 0x0c
    1516:	8d 85       	ldd	r24, Y+13	; 0x0d
    1518:	9e 85       	ldd	r25, Y+14	; 0x0e
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	4a e7       	ldi	r20, 0x7A	; 122
    1520:	55 e4       	ldi	r21, 0x45	; 69
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8f 83       	std	Y+7, r24	; 0x07
    152c:	98 87       	std	Y+8, r25	; 0x08
    152e:	a9 87       	std	Y+9, r26	; 0x09
    1530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1532:	6f 81       	ldd	r22, Y+7	; 0x07
    1534:	78 85       	ldd	r23, Y+8	; 0x08
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	9a 85       	ldd	r25, Y+10	; 0x0a
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e8       	ldi	r20, 0x80	; 128
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1546:	88 23       	and	r24, r24
    1548:	2c f4       	brge	.+10     	; 0x1554 <COUNT_MODE+0x72>
		__ticks = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	3f c0       	rjmp	.+126    	; 0x15d2 <COUNT_MODE+0xf0>
	else if (__tmp > 65535)
    1554:	6f 81       	ldd	r22, Y+7	; 0x07
    1556:	78 85       	ldd	r23, Y+8	; 0x08
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	4f e7       	ldi	r20, 0x7F	; 127
    1562:	57 e4       	ldi	r21, 0x47	; 71
    1564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1568:	18 16       	cp	r1, r24
    156a:	4c f5       	brge	.+82     	; 0x15be <COUNT_MODE+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156c:	6b 85       	ldd	r22, Y+11	; 0x0b
    156e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1570:	8d 85       	ldd	r24, Y+13	; 0x0d
    1572:	9e 85       	ldd	r25, Y+14	; 0x0e
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e2       	ldi	r20, 0x20	; 32
    157a:	51 e4       	ldi	r21, 0x41	; 65
    157c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <COUNT_MODE+0xd2>
    1596:	80 e9       	ldi	r24, 0x90	; 144
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	8b 83       	std	Y+3, r24	; 0x03
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <COUNT_MODE+0xc0>
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	69 f7       	brne	.-38     	; 0x1596 <COUNT_MODE+0xb4>
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <COUNT_MODE+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15be:	6f 81       	ldd	r22, Y+7	; 0x07
    15c0:	78 85       	ldd	r23, Y+8	; 0x08
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	8d 83       	std	Y+5, r24	; 0x05
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <COUNT_MODE+0xfc>
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(30);
		if (!(PINB & (1 << PB7))) {
    15e6:	e6 e3       	ldi	r30, 0x36	; 54
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	88 23       	and	r24, r24
    15ee:	a4 f0       	brlt	.+40     	; 0x1618 <COUNT_MODE+0x136>
			if (mode_flag == 0) {
    15f0:	80 91 70 00 	lds	r24, 0x0070
    15f4:	88 23       	and	r24, r24
    15f6:	81 f4       	brne	.+32     	; 0x1618 <COUNT_MODE+0x136>
				mode = !mode;
    15f8:	80 91 68 00 	lds	r24, 0x0068
    15fc:	1f 86       	std	Y+15, r1	; 0x0f
    15fe:	88 23       	and	r24, r24
    1600:	11 f4       	brne	.+4      	; 0x1606 <COUNT_MODE+0x124>
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	8f 87       	std	Y+15, r24	; 0x0f
    1606:	8f 85       	ldd	r24, Y+15	; 0x0f
    1608:	80 93 68 00 	sts	0x0068, r24
				mode_flag = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	80 93 70 00 	sts	0x0070, r24
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <COUNT_MODE+0x136>
			}
		}
	} else {
		mode_flag = 0;
    1614:	10 92 70 00 	sts	0x0070, r1
	}
	if (mode == 1) {
    1618:	80 91 68 00 	lds	r24, 0x0068
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	79 f4       	brne	.+30     	; 0x163e <COUNT_MODE+0x15c>
		PORTD |= (1 << PD4);
    1620:	a2 e3       	ldi	r26, 0x32	; 50
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	80 61       	ori	r24, 0x10	; 16
    162c:	8c 93       	st	X, r24
		PORTD &= (~(1 << PD5));
    162e:	a2 e3       	ldi	r26, 0x32	; 50
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e2 e3       	ldi	r30, 0x32	; 50
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8f 7d       	andi	r24, 0xDF	; 223
    163a:	8c 93       	st	X, r24
    163c:	12 c0       	rjmp	.+36     	; 0x1662 <COUNT_MODE+0x180>
	} else if (mode == 0) {
    163e:	80 91 68 00 	lds	r24, 0x0068
    1642:	88 23       	and	r24, r24
    1644:	71 f4       	brne	.+28     	; 0x1662 <COUNT_MODE+0x180>
		PORTD &= (~(1 << PD4));
    1646:	a2 e3       	ldi	r26, 0x32	; 50
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e2 e3       	ldi	r30, 0x32	; 50
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8f 7e       	andi	r24, 0xEF	; 239
    1652:	8c 93       	st	X, r24
		PORTD |= (1 << PD5);
    1654:	a2 e3       	ldi	r26, 0x32	; 50
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e2 e3       	ldi	r30, 0x32	; 50
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	80 62       	ori	r24, 0x20	; 32
    1660:	8c 93       	st	X, r24
	}
}
    1662:	2f 96       	adiw	r28, 0x0f	; 15
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <TIME_UP>:

void TIME_UP(void) {
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	aa 97       	sbiw	r28, 0x2a	; 42
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
	//SECONDS INC.
	if (!(PINB & (1 << PB6))) {
    1688:	e6 e3       	ldi	r30, 0x36	; 54
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	80 74       	andi	r24, 0x40	; 64
    1694:	90 70       	andi	r25, 0x00	; 0
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	09 f0       	breq	.+2      	; 0x169c <TIME_UP+0x28>
    169a:	9f c0       	rjmp	.+318    	; 0x17da <TIME_UP+0x166>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 ef       	ldi	r26, 0xF0	; 240
    16a2:	b1 e4       	ldi	r27, 0x41	; 65
    16a4:	8f a3       	std	Y+39, r24	; 0x27
    16a6:	98 a7       	std	Y+40, r25	; 0x28
    16a8:	a9 a7       	std	Y+41, r26	; 0x29
    16aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ac:	6f a1       	ldd	r22, Y+39	; 0x27
    16ae:	78 a5       	ldd	r23, Y+40	; 0x28
    16b0:	89 a5       	ldd	r24, Y+41	; 0x29
    16b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a e7       	ldi	r20, 0x7A	; 122
    16ba:	55 e4       	ldi	r21, 0x45	; 69
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8b a3       	std	Y+35, r24	; 0x23
    16c6:	9c a3       	std	Y+36, r25	; 0x24
    16c8:	ad a3       	std	Y+37, r26	; 0x25
    16ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16cc:	6b a1       	ldd	r22, Y+35	; 0x23
    16ce:	7c a1       	ldd	r23, Y+36	; 0x24
    16d0:	8d a1       	ldd	r24, Y+37	; 0x25
    16d2:	9e a1       	ldd	r25, Y+38	; 0x26
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	5f e3       	ldi	r21, 0x3F	; 63
    16dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	2c f4       	brge	.+10     	; 0x16ee <TIME_UP+0x7a>
		__ticks = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9a a3       	std	Y+34, r25	; 0x22
    16ea:	89 a3       	std	Y+33, r24	; 0x21
    16ec:	3f c0       	rjmp	.+126    	; 0x176c <TIME_UP+0xf8>
	else if (__tmp > 65535)
    16ee:	6b a1       	ldd	r22, Y+35	; 0x23
    16f0:	7c a1       	ldd	r23, Y+36	; 0x24
    16f2:	8d a1       	ldd	r24, Y+37	; 0x25
    16f4:	9e a1       	ldd	r25, Y+38	; 0x26
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	4f e7       	ldi	r20, 0x7F	; 127
    16fc:	57 e4       	ldi	r21, 0x47	; 71
    16fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1702:	18 16       	cp	r1, r24
    1704:	4c f5       	brge	.+82     	; 0x1758 <TIME_UP+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1706:	6f a1       	ldd	r22, Y+39	; 0x27
    1708:	78 a5       	ldd	r23, Y+40	; 0x28
    170a:	89 a5       	ldd	r24, Y+41	; 0x29
    170c:	9a a5       	ldd	r25, Y+42	; 0x2a
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e2       	ldi	r20, 0x20	; 32
    1714:	51 e4       	ldi	r21, 0x41	; 65
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9a a3       	std	Y+34, r25	; 0x22
    172c:	89 a3       	std	Y+33, r24	; 0x21
    172e:	0f c0       	rjmp	.+30     	; 0x174e <TIME_UP+0xda>
    1730:	80 e9       	ldi	r24, 0x90	; 144
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	98 a3       	std	Y+32, r25	; 0x20
    1736:	8f 8f       	std	Y+31, r24	; 0x1f
    1738:	8f 8d       	ldd	r24, Y+31	; 0x1f
    173a:	98 a1       	ldd	r25, Y+32	; 0x20
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <TIME_UP+0xc8>
    1740:	98 a3       	std	Y+32, r25	; 0x20
    1742:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1744:	89 a1       	ldd	r24, Y+33	; 0x21
    1746:	9a a1       	ldd	r25, Y+34	; 0x22
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	9a a3       	std	Y+34, r25	; 0x22
    174c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	89 a1       	ldd	r24, Y+33	; 0x21
    1750:	9a a1       	ldd	r25, Y+34	; 0x22
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f7       	brne	.-38     	; 0x1730 <TIME_UP+0xbc>
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <TIME_UP+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	6b a1       	ldd	r22, Y+35	; 0x23
    175a:	7c a1       	ldd	r23, Y+36	; 0x24
    175c:	8d a1       	ldd	r24, Y+37	; 0x25
    175e:	9e a1       	ldd	r25, Y+38	; 0x26
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9a a3       	std	Y+34, r25	; 0x22
    176a:	89 a3       	std	Y+33, r24	; 0x21
    176c:	89 a1       	ldd	r24, Y+33	; 0x21
    176e:	9a a1       	ldd	r25, Y+34	; 0x22
    1770:	9e 8f       	std	Y+30, r25	; 0x1e
    1772:	8d 8f       	std	Y+29, r24	; 0x1d
    1774:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1776:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <TIME_UP+0x104>
    177c:	9e 8f       	std	Y+30, r25	; 0x1e
    177e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(30);
		if (!(PINB & (1 << PB6))) {
    1780:	e6 e3       	ldi	r30, 0x36	; 54
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	80 74       	andi	r24, 0x40	; 64
    178c:	90 70       	andi	r25, 0x00	; 0
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	31 f5       	brne	.+76     	; 0x17de <TIME_UP+0x16a>
			if (sec_increment_flag == 0) {
    1792:	80 91 75 00 	lds	r24, 0x0075
    1796:	88 23       	and	r24, r24
    1798:	11 f5       	brne	.+68     	; 0x17de <TIME_UP+0x16a>
				if (secUnits == 9) {
    179a:	80 91 77 00 	lds	r24, 0x0077
    179e:	89 30       	cpi	r24, 0x09	; 9
    17a0:	99 f4       	brne	.+38     	; 0x17c8 <TIME_UP+0x154>
					secUnits = 0;
    17a2:	10 92 77 00 	sts	0x0077, r1
					if (secTens == 5) {
    17a6:	80 91 78 00 	lds	r24, 0x0078
    17aa:	85 30       	cpi	r24, 0x05	; 5
    17ac:	39 f4       	brne	.+14     	; 0x17bc <TIME_UP+0x148>
						secTens = 5;
    17ae:	85 e0       	ldi	r24, 0x05	; 5
    17b0:	80 93 78 00 	sts	0x0078, r24
						secUnits = 9;
    17b4:	89 e0       	ldi	r24, 0x09	; 9
    17b6:	80 93 77 00 	sts	0x0077, r24
    17ba:	0b c0       	rjmp	.+22     	; 0x17d2 <TIME_UP+0x15e>
					} else {
						secTens++;
    17bc:	80 91 78 00 	lds	r24, 0x0078
    17c0:	8f 5f       	subi	r24, 0xFF	; 255
    17c2:	80 93 78 00 	sts	0x0078, r24
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <TIME_UP+0x15e>
					}
				} else {
					secUnits++;
    17c8:	80 91 77 00 	lds	r24, 0x0077
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	80 93 77 00 	sts	0x0077, r24
				}
				sec_increment_flag = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	80 93 75 00 	sts	0x0075, r24
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <TIME_UP+0x16a>
			}
		}
	} else {
		sec_increment_flag = 0;
    17da:	10 92 75 00 	sts	0x0075, r1
	}
	//MINUTES INC.
	if (!(PINB & (1 << PB4))) {
    17de:	e6 e3       	ldi	r30, 0x36	; 54
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	80 71       	andi	r24, 0x10	; 16
    17ea:	90 70       	andi	r25, 0x00	; 0
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <TIME_UP+0x17e>
    17f0:	9f c0       	rjmp	.+318    	; 0x1930 <TIME_UP+0x2bc>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 ef       	ldi	r26, 0xF0	; 240
    17f8:	b1 e4       	ldi	r27, 0x41	; 65
    17fa:	89 8f       	std	Y+25, r24	; 0x19
    17fc:	9a 8f       	std	Y+26, r25	; 0x1a
    17fe:	ab 8f       	std	Y+27, r26	; 0x1b
    1800:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	69 8d       	ldd	r22, Y+25	; 0x19
    1804:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a e7       	ldi	r20, 0x7A	; 122
    1810:	55 e4       	ldi	r21, 0x45	; 69
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	8d 8b       	std	Y+21, r24	; 0x15
    181c:	9e 8b       	std	Y+22, r25	; 0x16
    181e:	af 8b       	std	Y+23, r26	; 0x17
    1820:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1822:	6d 89       	ldd	r22, Y+21	; 0x15
    1824:	7e 89       	ldd	r23, Y+22	; 0x16
    1826:	8f 89       	ldd	r24, Y+23	; 0x17
    1828:	98 8d       	ldd	r25, Y+24	; 0x18
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <TIME_UP+0x1d0>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9c 8b       	std	Y+20, r25	; 0x14
    1840:	8b 8b       	std	Y+19, r24	; 0x13
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <TIME_UP+0x24e>
	else if (__tmp > 65535)
    1844:	6d 89       	ldd	r22, Y+21	; 0x15
    1846:	7e 89       	ldd	r23, Y+22	; 0x16
    1848:	8f 89       	ldd	r24, Y+23	; 0x17
    184a:	98 8d       	ldd	r25, Y+24	; 0x18
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <TIME_UP+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	69 8d       	ldd	r22, Y+25	; 0x19
    185e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1862:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9c 8b       	std	Y+20, r25	; 0x14
    1882:	8b 8b       	std	Y+19, r24	; 0x13
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <TIME_UP+0x230>
    1886:	80 e9       	ldi	r24, 0x90	; 144
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	9a 8b       	std	Y+18, r25	; 0x12
    188c:	89 8b       	std	Y+17, r24	; 0x11
    188e:	89 89       	ldd	r24, Y+17	; 0x11
    1890:	9a 89       	ldd	r25, Y+18	; 0x12
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <TIME_UP+0x21e>
    1896:	9a 8b       	std	Y+18, r25	; 0x12
    1898:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8b 89       	ldd	r24, Y+19	; 0x13
    189c:	9c 89       	ldd	r25, Y+20	; 0x14
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9c 8b       	std	Y+20, r25	; 0x14
    18a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8b 89       	ldd	r24, Y+19	; 0x13
    18a6:	9c 89       	ldd	r25, Y+20	; 0x14
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <TIME_UP+0x212>
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <TIME_UP+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9c 8b       	std	Y+20, r25	; 0x14
    18c0:	8b 8b       	std	Y+19, r24	; 0x13
    18c2:	8b 89       	ldd	r24, Y+19	; 0x13
    18c4:	9c 89       	ldd	r25, Y+20	; 0x14
    18c6:	98 8b       	std	Y+16, r25	; 0x10
    18c8:	8f 87       	std	Y+15, r24	; 0x0f
    18ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    18cc:	98 89       	ldd	r25, Y+16	; 0x10
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <TIME_UP+0x25a>
    18d2:	98 8b       	std	Y+16, r25	; 0x10
    18d4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(30);
		if (!(PINB & (1 << PB4))) {
    18d6:	e6 e3       	ldi	r30, 0x36	; 54
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	80 71       	andi	r24, 0x10	; 16
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	31 f5       	brne	.+76     	; 0x1934 <TIME_UP+0x2c0>
			if (min_increment_flag == 0) {
    18e8:	80 91 73 00 	lds	r24, 0x0073
    18ec:	88 23       	and	r24, r24
    18ee:	11 f5       	brne	.+68     	; 0x1934 <TIME_UP+0x2c0>
				if (minUnits == 9) {
    18f0:	80 91 79 00 	lds	r24, 0x0079
    18f4:	89 30       	cpi	r24, 0x09	; 9
    18f6:	99 f4       	brne	.+38     	; 0x191e <TIME_UP+0x2aa>
					minUnits = 0;
    18f8:	10 92 79 00 	sts	0x0079, r1
					if (minTens == 5) {
    18fc:	80 91 7a 00 	lds	r24, 0x007A
    1900:	85 30       	cpi	r24, 0x05	; 5
    1902:	39 f4       	brne	.+14     	; 0x1912 <TIME_UP+0x29e>
						minTens = 5;
    1904:	85 e0       	ldi	r24, 0x05	; 5
    1906:	80 93 7a 00 	sts	0x007A, r24
						minUnits = 9;
    190a:	89 e0       	ldi	r24, 0x09	; 9
    190c:	80 93 79 00 	sts	0x0079, r24
    1910:	0b c0       	rjmp	.+22     	; 0x1928 <TIME_UP+0x2b4>
					} else {
						minTens++;
    1912:	80 91 7a 00 	lds	r24, 0x007A
    1916:	8f 5f       	subi	r24, 0xFF	; 255
    1918:	80 93 7a 00 	sts	0x007A, r24
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <TIME_UP+0x2b4>
					}
				} else {
					minUnits++;
    191e:	80 91 79 00 	lds	r24, 0x0079
    1922:	8f 5f       	subi	r24, 0xFF	; 255
    1924:	80 93 79 00 	sts	0x0079, r24
				}
				min_increment_flag = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	80 93 73 00 	sts	0x0073, r24
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <TIME_UP+0x2c0>
			}
		}
	} else {
		min_increment_flag = 0;
    1930:	10 92 73 00 	sts	0x0073, r1
	}
	//HOURS INC.
	if (!(PINB & (1 << PB1))) {
    1934:	e6 e3       	ldi	r30, 0x36	; 54
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	82 70       	andi	r24, 0x02	; 2
    1940:	90 70       	andi	r25, 0x00	; 0
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	09 f0       	breq	.+2      	; 0x1948 <TIME_UP+0x2d4>
    1946:	9f c0       	rjmp	.+318    	; 0x1a86 <TIME_UP+0x412>
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a0 ef       	ldi	r26, 0xF0	; 240
    194e:	b1 e4       	ldi	r27, 0x41	; 65
    1950:	8b 87       	std	Y+11, r24	; 0x0b
    1952:	9c 87       	std	Y+12, r25	; 0x0c
    1954:	ad 87       	std	Y+13, r26	; 0x0d
    1956:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1958:	6b 85       	ldd	r22, Y+11	; 0x0b
    195a:	7c 85       	ldd	r23, Y+12	; 0x0c
    195c:	8d 85       	ldd	r24, Y+13	; 0x0d
    195e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	4a e7       	ldi	r20, 0x7A	; 122
    1966:	55 e4       	ldi	r21, 0x45	; 69
    1968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	8f 83       	std	Y+7, r24	; 0x07
    1972:	98 87       	std	Y+8, r25	; 0x08
    1974:	a9 87       	std	Y+9, r26	; 0x09
    1976:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e8       	ldi	r20, 0x80	; 128
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    198c:	88 23       	and	r24, r24
    198e:	2c f4       	brge	.+10     	; 0x199a <TIME_UP+0x326>
		__ticks = 1;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
    1998:	3f c0       	rjmp	.+126    	; 0x1a18 <TIME_UP+0x3a4>
	else if (__tmp > 65535)
    199a:	6f 81       	ldd	r22, Y+7	; 0x07
    199c:	78 85       	ldd	r23, Y+8	; 0x08
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	3f ef       	ldi	r19, 0xFF	; 255
    19a6:	4f e7       	ldi	r20, 0x7F	; 127
    19a8:	57 e4       	ldi	r21, 0x47	; 71
    19aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ae:	18 16       	cp	r1, r24
    19b0:	4c f5       	brge	.+82     	; 0x1a04 <TIME_UP+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e2       	ldi	r20, 0x20	; 32
    19c0:	51 e4       	ldi	r21, 0x41	; 65
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	bc 01       	movw	r22, r24
    19cc:	cd 01       	movw	r24, r26
    19ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	9e 83       	std	Y+6, r25	; 0x06
    19d8:	8d 83       	std	Y+5, r24	; 0x05
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <TIME_UP+0x386>
    19dc:	80 e9       	ldi	r24, 0x90	; 144
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	9c 83       	std	Y+4, r25	; 0x04
    19e2:	8b 83       	std	Y+3, r24	; 0x03
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <TIME_UP+0x374>
    19ec:	9c 83       	std	Y+4, r25	; 0x04
    19ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	9e 81       	ldd	r25, Y+6	; 0x06
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
    19fc:	9e 81       	ldd	r25, Y+6	; 0x06
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	69 f7       	brne	.-38     	; 0x19dc <TIME_UP+0x368>
    1a02:	14 c0       	rjmp	.+40     	; 0x1a2c <TIME_UP+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a04:	6f 81       	ldd	r22, Y+7	; 0x07
    1a06:	78 85       	ldd	r23, Y+8	; 0x08
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <TIME_UP+0x3b0>
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(30);
		if (!(PINB & (1 << PB1))) {
    1a2c:	e6 e3       	ldi	r30, 0x36	; 54
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	82 70       	andi	r24, 0x02	; 2
    1a38:	90 70       	andi	r25, 0x00	; 0
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	31 f5       	brne	.+76     	; 0x1a8a <TIME_UP+0x416>
			if (hrs_increment_flag == 0) {
    1a3e:	80 91 71 00 	lds	r24, 0x0071
    1a42:	88 23       	and	r24, r24
    1a44:	11 f5       	brne	.+68     	; 0x1a8a <TIME_UP+0x416>
				if (hrsUnits == 9) {
    1a46:	80 91 7b 00 	lds	r24, 0x007B
    1a4a:	89 30       	cpi	r24, 0x09	; 9
    1a4c:	99 f4       	brne	.+38     	; 0x1a74 <TIME_UP+0x400>
					hrsUnits = 0;
    1a4e:	10 92 7b 00 	sts	0x007B, r1
					if (hrsTens == 5) {
    1a52:	80 91 7c 00 	lds	r24, 0x007C
    1a56:	85 30       	cpi	r24, 0x05	; 5
    1a58:	39 f4       	brne	.+14     	; 0x1a68 <TIME_UP+0x3f4>
						hrsTens = 5;
    1a5a:	85 e0       	ldi	r24, 0x05	; 5
    1a5c:	80 93 7c 00 	sts	0x007C, r24
						hrsUnits = 9;
    1a60:	89 e0       	ldi	r24, 0x09	; 9
    1a62:	80 93 7b 00 	sts	0x007B, r24
    1a66:	0b c0       	rjmp	.+22     	; 0x1a7e <TIME_UP+0x40a>
					} else {
						hrsTens++;
    1a68:	80 91 7c 00 	lds	r24, 0x007C
    1a6c:	8f 5f       	subi	r24, 0xFF	; 255
    1a6e:	80 93 7c 00 	sts	0x007C, r24
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <TIME_UP+0x40a>
					}
				} else {
					hrsUnits++;
    1a74:	80 91 7b 00 	lds	r24, 0x007B
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
    1a7a:	80 93 7b 00 	sts	0x007B, r24
				}
				hrs_increment_flag = 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	80 93 71 00 	sts	0x0071, r24
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <TIME_UP+0x416>
			}
		}
	} else {
		hrs_increment_flag = 0;
    1a86:	10 92 71 00 	sts	0x0071, r1
	}
}
    1a8a:	aa 96       	adiw	r28, 0x2a	; 42
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <TIME_DOWN>:
void TIME_DOWN(void) {
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	aa 97       	sbiw	r28, 0x2a	; 42
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61

	//SECONDS DEC.
	if (!(PINB & (1 << PB5))) {
    1ab0:	e6 e3       	ldi	r30, 0x36	; 54
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	80 72       	andi	r24, 0x20	; 32
    1abc:	90 70       	andi	r25, 0x00	; 0
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <TIME_DOWN+0x28>
    1ac2:	9e c0       	rjmp	.+316    	; 0x1c00 <TIME_DOWN+0x164>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a0 ef       	ldi	r26, 0xF0	; 240
    1aca:	b1 e4       	ldi	r27, 0x41	; 65
    1acc:	8f a3       	std	Y+39, r24	; 0x27
    1ace:	98 a7       	std	Y+40, r25	; 0x28
    1ad0:	a9 a7       	std	Y+41, r26	; 0x29
    1ad2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad8:	89 a5       	ldd	r24, Y+41	; 0x29
    1ada:	9a a5       	ldd	r25, Y+42	; 0x2a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a e7       	ldi	r20, 0x7A	; 122
    1ae2:	55 e4       	ldi	r21, 0x45	; 69
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8b a3       	std	Y+35, r24	; 0x23
    1aee:	9c a3       	std	Y+36, r25	; 0x24
    1af0:	ad a3       	std	Y+37, r26	; 0x25
    1af2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1af4:	6b a1       	ldd	r22, Y+35	; 0x23
    1af6:	7c a1       	ldd	r23, Y+36	; 0x24
    1af8:	8d a1       	ldd	r24, Y+37	; 0x25
    1afa:	9e a1       	ldd	r25, Y+38	; 0x26
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <TIME_DOWN+0x7a>
		__ticks = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9a a3       	std	Y+34, r25	; 0x22
    1b12:	89 a3       	std	Y+33, r24	; 0x21
    1b14:	3f c0       	rjmp	.+126    	; 0x1b94 <TIME_DOWN+0xf8>
	else if (__tmp > 65535)
    1b16:	6b a1       	ldd	r22, Y+35	; 0x23
    1b18:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	4c f5       	brge	.+82     	; 0x1b80 <TIME_DOWN+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b30:	78 a5       	ldd	r23, Y+40	; 0x28
    1b32:	89 a5       	ldd	r24, Y+41	; 0x29
    1b34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9a a3       	std	Y+34, r25	; 0x22
    1b54:	89 a3       	std	Y+33, r24	; 0x21
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <TIME_DOWN+0xda>
    1b58:	80 e9       	ldi	r24, 0x90	; 144
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	98 a3       	std	Y+32, r25	; 0x20
    1b5e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b62:	98 a1       	ldd	r25, Y+32	; 0x20
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <TIME_DOWN+0xc8>
    1b68:	98 a3       	std	Y+32, r25	; 0x20
    1b6a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9a a3       	std	Y+34, r25	; 0x22
    1b74:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	89 a1       	ldd	r24, Y+33	; 0x21
    1b78:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	69 f7       	brne	.-38     	; 0x1b58 <TIME_DOWN+0xbc>
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <TIME_DOWN+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	6b a1       	ldd	r22, Y+35	; 0x23
    1b82:	7c a1       	ldd	r23, Y+36	; 0x24
    1b84:	8d a1       	ldd	r24, Y+37	; 0x25
    1b86:	9e a1       	ldd	r25, Y+38	; 0x26
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9a a3       	std	Y+34, r25	; 0x22
    1b92:	89 a3       	std	Y+33, r24	; 0x21
    1b94:	89 a1       	ldd	r24, Y+33	; 0x21
    1b96:	9a a1       	ldd	r25, Y+34	; 0x22
    1b98:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <TIME_DOWN+0x104>
    1ba4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(30);
		if (!(PINB & (1 << PB5))) {
    1ba8:	e6 e3       	ldi	r30, 0x36	; 54
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	80 72       	andi	r24, 0x20	; 32
    1bb4:	90 70       	andi	r25, 0x00	; 0
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	29 f5       	brne	.+74     	; 0x1c04 <TIME_DOWN+0x168>
			if (sec_decrement_flag == 0) {
    1bba:	80 91 76 00 	lds	r24, 0x0076
    1bbe:	88 23       	and	r24, r24
    1bc0:	09 f5       	brne	.+66     	; 0x1c04 <TIME_DOWN+0x168>
				if (secUnits == 0) {
    1bc2:	80 91 77 00 	lds	r24, 0x0077
    1bc6:	88 23       	and	r24, r24
    1bc8:	91 f4       	brne	.+36     	; 0x1bee <TIME_DOWN+0x152>
					secUnits = 9;
    1bca:	89 e0       	ldi	r24, 0x09	; 9
    1bcc:	80 93 77 00 	sts	0x0077, r24
					if (secTens == 0) {
    1bd0:	80 91 78 00 	lds	r24, 0x0078
    1bd4:	88 23       	and	r24, r24
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <TIME_DOWN+0x146>
						secTens = 0;
    1bd8:	10 92 78 00 	sts	0x0078, r1
						secUnits = 0;
    1bdc:	10 92 77 00 	sts	0x0077, r1
    1be0:	0b c0       	rjmp	.+22     	; 0x1bf8 <TIME_DOWN+0x15c>
					} else {
						secTens--;
    1be2:	80 91 78 00 	lds	r24, 0x0078
    1be6:	81 50       	subi	r24, 0x01	; 1
    1be8:	80 93 78 00 	sts	0x0078, r24
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <TIME_DOWN+0x15c>
					}
				} else {
					secUnits--;
    1bee:	80 91 77 00 	lds	r24, 0x0077
    1bf2:	81 50       	subi	r24, 0x01	; 1
    1bf4:	80 93 77 00 	sts	0x0077, r24
				}
				sec_decrement_flag = 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	80 93 76 00 	sts	0x0076, r24
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <TIME_DOWN+0x168>
			}
		}
	} else {
		sec_decrement_flag = 0;
    1c00:	10 92 76 00 	sts	0x0076, r1
	}
	//MINUTES DEC.
	if (!(PINB & (1 << PB3))) {
    1c04:	e6 e3       	ldi	r30, 0x36	; 54
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	88 2f       	mov	r24, r24
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	88 70       	andi	r24, 0x08	; 8
    1c10:	90 70       	andi	r25, 0x00	; 0
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <TIME_DOWN+0x17c>
    1c16:	9e c0       	rjmp	.+316    	; 0x1d54 <TIME_DOWN+0x2b8>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 ef       	ldi	r26, 0xF0	; 240
    1c1e:	b1 e4       	ldi	r27, 0x41	; 65
    1c20:	89 8f       	std	Y+25, r24	; 0x19
    1c22:	9a 8f       	std	Y+26, r25	; 0x1a
    1c24:	ab 8f       	std	Y+27, r26	; 0x1b
    1c26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c28:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a e7       	ldi	r20, 0x7A	; 122
    1c36:	55 e4       	ldi	r21, 0x45	; 69
    1c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8d 8b       	std	Y+21, r24	; 0x15
    1c42:	9e 8b       	std	Y+22, r25	; 0x16
    1c44:	af 8b       	std	Y+23, r26	; 0x17
    1c46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c48:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <TIME_DOWN+0x1ce>
		__ticks = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c 8b       	std	Y+20, r25	; 0x14
    1c66:	8b 8b       	std	Y+19, r24	; 0x13
    1c68:	3f c0       	rjmp	.+126    	; 0x1ce8 <TIME_DOWN+0x24c>
	else if (__tmp > 65535)
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	57 e4       	ldi	r21, 0x47	; 71
    1c7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	4c f5       	brge	.+82     	; 0x1cd4 <TIME_DOWN+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c82:	69 8d       	ldd	r22, Y+25	; 0x19
    1c84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
    1caa:	0f c0       	rjmp	.+30     	; 0x1cca <TIME_DOWN+0x22e>
    1cac:	80 e9       	ldi	r24, 0x90	; 144
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	89 8b       	std	Y+17, r24	; 0x11
    1cb4:	89 89       	ldd	r24, Y+17	; 0x11
    1cb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <TIME_DOWN+0x21c>
    1cbc:	9a 8b       	std	Y+18, r25	; 0x12
    1cbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9c 8b       	std	Y+20, r25	; 0x14
    1cc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	69 f7       	brne	.-38     	; 0x1cac <TIME_DOWN+0x210>
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <TIME_DOWN+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cda:	98 8d       	ldd	r25, Y+24	; 0x18
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9c 8b       	std	Y+20, r25	; 0x14
    1ce6:	8b 8b       	std	Y+19, r24	; 0x13
    1ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cea:	9c 89       	ldd	r25, Y+20	; 0x14
    1cec:	98 8b       	std	Y+16, r25	; 0x10
    1cee:	8f 87       	std	Y+15, r24	; 0x0f
    1cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf2:	98 89       	ldd	r25, Y+16	; 0x10
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <TIME_DOWN+0x258>
    1cf8:	98 8b       	std	Y+16, r25	; 0x10
    1cfa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(30);
		if (!(PINB & (1 << PB3))) {
    1cfc:	e6 e3       	ldi	r30, 0x36	; 54
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	88 70       	andi	r24, 0x08	; 8
    1d08:	90 70       	andi	r25, 0x00	; 0
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	29 f5       	brne	.+74     	; 0x1d58 <TIME_DOWN+0x2bc>
			if (min_decrement_flag == 0) {
    1d0e:	80 91 74 00 	lds	r24, 0x0074
    1d12:	88 23       	and	r24, r24
    1d14:	09 f5       	brne	.+66     	; 0x1d58 <TIME_DOWN+0x2bc>
				if (minUnits == 0) {
    1d16:	80 91 79 00 	lds	r24, 0x0079
    1d1a:	88 23       	and	r24, r24
    1d1c:	91 f4       	brne	.+36     	; 0x1d42 <TIME_DOWN+0x2a6>
					minUnits = 9;
    1d1e:	89 e0       	ldi	r24, 0x09	; 9
    1d20:	80 93 79 00 	sts	0x0079, r24
					if (minTens == 0) {
    1d24:	80 91 7a 00 	lds	r24, 0x007A
    1d28:	88 23       	and	r24, r24
    1d2a:	29 f4       	brne	.+10     	; 0x1d36 <TIME_DOWN+0x29a>
						minTens = 0;
    1d2c:	10 92 7a 00 	sts	0x007A, r1
						minUnits = 0;
    1d30:	10 92 79 00 	sts	0x0079, r1
    1d34:	0b c0       	rjmp	.+22     	; 0x1d4c <TIME_DOWN+0x2b0>
					} else {
						minTens--;
    1d36:	80 91 7a 00 	lds	r24, 0x007A
    1d3a:	81 50       	subi	r24, 0x01	; 1
    1d3c:	80 93 7a 00 	sts	0x007A, r24
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <TIME_DOWN+0x2b0>
					}
				} else {
					minUnits--;
    1d42:	80 91 79 00 	lds	r24, 0x0079
    1d46:	81 50       	subi	r24, 0x01	; 1
    1d48:	80 93 79 00 	sts	0x0079, r24
				}
				min_decrement_flag = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 93 74 00 	sts	0x0074, r24
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <TIME_DOWN+0x2bc>
			}
		}
	} else {
		min_decrement_flag = 0;
    1d54:	10 92 74 00 	sts	0x0074, r1
	}
	//HOURS DEC.
	if (!(PINB & (1 << PB0))) {
    1d58:	e6 e3       	ldi	r30, 0x36	; 54
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	81 70       	andi	r24, 0x01	; 1
    1d64:	90 70       	andi	r25, 0x00	; 0
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <TIME_DOWN+0x2d0>
    1d6a:	9e c0       	rjmp	.+316    	; 0x1ea8 <TIME_DOWN+0x40c>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a0 ef       	ldi	r26, 0xF0	; 240
    1d72:	b1 e4       	ldi	r27, 0x41	; 65
    1d74:	8b 87       	std	Y+11, r24	; 0x0b
    1d76:	9c 87       	std	Y+12, r25	; 0x0c
    1d78:	ad 87       	std	Y+13, r26	; 0x0d
    1d7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a e7       	ldi	r20, 0x7A	; 122
    1d8a:	55 e4       	ldi	r21, 0x45	; 69
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	8f 83       	std	Y+7, r24	; 0x07
    1d96:	98 87       	std	Y+8, r25	; 0x08
    1d98:	a9 87       	std	Y+9, r26	; 0x09
    1d9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <TIME_DOWN+0x322>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <TIME_DOWN+0x3a0>
	else if (__tmp > 65535)
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <TIME_DOWN+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <TIME_DOWN+0x382>
    1e00:	80 e9       	ldi	r24, 0x90	; 144
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	9c 83       	std	Y+4, r25	; 0x04
    1e06:	8b 83       	std	Y+3, r24	; 0x03
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <TIME_DOWN+0x370>
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <TIME_DOWN+0x364>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <TIME_DOWN+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <TIME_DOWN+0x3ac>
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(30);
		if (!(PINB & (1 << PB0))) {
    1e50:	e6 e3       	ldi	r30, 0x36	; 54
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	81 70       	andi	r24, 0x01	; 1
    1e5c:	90 70       	andi	r25, 0x00	; 0
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	29 f5       	brne	.+74     	; 0x1eac <TIME_DOWN+0x410>
			if (hrs_decrement_flag == 0) {
    1e62:	80 91 72 00 	lds	r24, 0x0072
    1e66:	88 23       	and	r24, r24
    1e68:	09 f5       	brne	.+66     	; 0x1eac <TIME_DOWN+0x410>
				if (hrsUnits == 0) {
    1e6a:	80 91 7b 00 	lds	r24, 0x007B
    1e6e:	88 23       	and	r24, r24
    1e70:	91 f4       	brne	.+36     	; 0x1e96 <TIME_DOWN+0x3fa>
					hrsUnits = 9;
    1e72:	89 e0       	ldi	r24, 0x09	; 9
    1e74:	80 93 7b 00 	sts	0x007B, r24
					if (hrsTens == 0) {
    1e78:	80 91 7c 00 	lds	r24, 0x007C
    1e7c:	88 23       	and	r24, r24
    1e7e:	29 f4       	brne	.+10     	; 0x1e8a <TIME_DOWN+0x3ee>
						hrsTens = 0;
    1e80:	10 92 7c 00 	sts	0x007C, r1
						hrsUnits = 0;
    1e84:	10 92 7b 00 	sts	0x007B, r1
    1e88:	0b c0       	rjmp	.+22     	; 0x1ea0 <TIME_DOWN+0x404>
					} else {
						hrsTens--;
    1e8a:	80 91 7c 00 	lds	r24, 0x007C
    1e8e:	81 50       	subi	r24, 0x01	; 1
    1e90:	80 93 7c 00 	sts	0x007C, r24
    1e94:	05 c0       	rjmp	.+10     	; 0x1ea0 <TIME_DOWN+0x404>
					}
				} else {
					hrsUnits--;
    1e96:	80 91 7b 00 	lds	r24, 0x007B
    1e9a:	81 50       	subi	r24, 0x01	; 1
    1e9c:	80 93 7b 00 	sts	0x007B, r24
				}
				hrs_decrement_flag = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	80 93 72 00 	sts	0x0072, r24
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <TIME_DOWN+0x410>
			}
		}
	} else {
		hrs_decrement_flag = 0;
    1ea8:	10 92 72 00 	sts	0x0072, r1
	}
}
    1eac:	aa 96       	adiw	r28, 0x2a	; 42
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <countingTimer>:
void countingTimer(void)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	if (mode == 1) {
    1ec6:	80 91 68 00 	lds	r24, 0x0068
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <countingTimer+0x12>
    1ece:	6f c0       	rjmp	.+222    	; 0x1fae <countingTimer+0xf0>
		PORTD |= (1 << PD4);
    1ed0:	a2 e3       	ldi	r26, 0x32	; 50
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e2 e3       	ldi	r30, 0x32	; 50
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 61       	ori	r24, 0x10	; 16
    1edc:	8c 93       	st	X, r24
		PORTD &= (~(1 << PD5));
    1ede:	a2 e3       	ldi	r26, 0x32	; 50
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e2 e3       	ldi	r30, 0x32	; 50
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8f 7d       	andi	r24, 0xDF	; 223
    1eea:	8c 93       	st	X, r24
		PORTD &= (~(1 << PD0));
    1eec:	a2 e3       	ldi	r26, 0x32	; 50
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e2 e3       	ldi	r30, 0x32	; 50
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8e 7f       	andi	r24, 0xFE	; 254
    1ef8:	8c 93       	st	X, r24
		if (secUnits >= 9) {
    1efa:	80 91 77 00 	lds	r24, 0x0077
    1efe:	89 30       	cpi	r24, 0x09	; 9
    1f00:	08 f4       	brcc	.+2      	; 0x1f04 <countingTimer+0x46>
    1f02:	4f c0       	rjmp	.+158    	; 0x1fa2 <countingTimer+0xe4>
			secUnits = 0;
    1f04:	10 92 77 00 	sts	0x0077, r1
			secTens++;
    1f08:	80 91 78 00 	lds	r24, 0x0078
    1f0c:	8f 5f       	subi	r24, 0xFF	; 255
    1f0e:	80 93 78 00 	sts	0x0078, r24
			if (secTens >= 6) {
    1f12:	80 91 78 00 	lds	r24, 0x0078
    1f16:	86 30       	cpi	r24, 0x06	; 6
    1f18:	08 f4       	brcc	.+2      	; 0x1f1c <countingTimer+0x5e>
    1f1a:	c3 c0       	rjmp	.+390    	; 0x20a2 <countingTimer+0x1e4>
				secTens = 0;
    1f1c:	10 92 78 00 	sts	0x0078, r1
				minUnits++;
    1f20:	80 91 79 00 	lds	r24, 0x0079
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	80 93 79 00 	sts	0x0079, r24
				if (minUnits >= 9) {
    1f2a:	80 91 79 00 	lds	r24, 0x0079
    1f2e:	89 30       	cpi	r24, 0x09	; 9
    1f30:	08 f4       	brcc	.+2      	; 0x1f34 <countingTimer+0x76>
    1f32:	b7 c0       	rjmp	.+366    	; 0x20a2 <countingTimer+0x1e4>
					minUnits = 0;
    1f34:	10 92 79 00 	sts	0x0079, r1
					minTens++;
    1f38:	80 91 7a 00 	lds	r24, 0x007A
    1f3c:	8f 5f       	subi	r24, 0xFF	; 255
    1f3e:	80 93 7a 00 	sts	0x007A, r24
					if (minTens >= 6) {
    1f42:	80 91 7a 00 	lds	r24, 0x007A
    1f46:	86 30       	cpi	r24, 0x06	; 6
    1f48:	08 f4       	brcc	.+2      	; 0x1f4c <countingTimer+0x8e>
    1f4a:	ab c0       	rjmp	.+342    	; 0x20a2 <countingTimer+0x1e4>
						minTens = 0;
    1f4c:	10 92 7a 00 	sts	0x007A, r1
						hrsUnits++;
    1f50:	80 91 7b 00 	lds	r24, 0x007B
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	80 93 7b 00 	sts	0x007B, r24
						if (hrsUnits >= 9) {
    1f5a:	80 91 7b 00 	lds	r24, 0x007B
    1f5e:	89 30       	cpi	r24, 0x09	; 9
    1f60:	08 f4       	brcc	.+2      	; 0x1f64 <countingTimer+0xa6>
    1f62:	9f c0       	rjmp	.+318    	; 0x20a2 <countingTimer+0x1e4>
							hrsUnits = 0;
    1f64:	10 92 7b 00 	sts	0x007B, r1
							hrsTens++;
    1f68:	80 91 7c 00 	lds	r24, 0x007C
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	80 93 7c 00 	sts	0x007C, r24
							if (hrsTens >= 6) {
    1f72:	80 91 7c 00 	lds	r24, 0x007C
    1f76:	86 30       	cpi	r24, 0x06	; 6
    1f78:	08 f4       	brcc	.+2      	; 0x1f7c <countingTimer+0xbe>
    1f7a:	93 c0       	rjmp	.+294    	; 0x20a2 <countingTimer+0x1e4>
								hrsTens = 5;
    1f7c:	85 e0       	ldi	r24, 0x05	; 5
    1f7e:	80 93 7c 00 	sts	0x007C, r24
								hrsUnits = 9;
    1f82:	89 e0       	ldi	r24, 0x09	; 9
    1f84:	80 93 7b 00 	sts	0x007B, r24
								minTens = 5;
    1f88:	85 e0       	ldi	r24, 0x05	; 5
    1f8a:	80 93 7a 00 	sts	0x007A, r24
								minUnits = 9;
    1f8e:	89 e0       	ldi	r24, 0x09	; 9
    1f90:	80 93 79 00 	sts	0x0079, r24
								secTens = 5;
    1f94:	85 e0       	ldi	r24, 0x05	; 5
    1f96:	80 93 78 00 	sts	0x0078, r24
								secUnits = 9;
    1f9a:	89 e0       	ldi	r24, 0x09	; 9
    1f9c:	80 93 77 00 	sts	0x0077, r24
    1fa0:	80 c0       	rjmp	.+256    	; 0x20a2 <countingTimer+0x1e4>
						}
					}
				}
			}
		} else {
			secUnits++;
    1fa2:	80 91 77 00 	lds	r24, 0x0077
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	80 93 77 00 	sts	0x0077, r24
    1fac:	7a c0       	rjmp	.+244    	; 0x20a2 <countingTimer+0x1e4>
		}
	} else if (mode == 0) {
    1fae:	80 91 68 00 	lds	r24, 0x0068
    1fb2:	88 23       	and	r24, r24
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <countingTimer+0xfa>
    1fb6:	75 c0       	rjmp	.+234    	; 0x20a2 <countingTimer+0x1e4>
		PORTD &= ~(1 << PD4);
    1fb8:	a2 e3       	ldi	r26, 0x32	; 50
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e2 e3       	ldi	r30, 0x32	; 50
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	8f 7e       	andi	r24, 0xEF	; 239
    1fc4:	8c 93       	st	X, r24
		PORTD |= ((1 << PD5));
    1fc6:	a2 e3       	ldi	r26, 0x32	; 50
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e2 e3       	ldi	r30, 0x32	; 50
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	80 62       	ori	r24, 0x20	; 32
    1fd2:	8c 93       	st	X, r24
		PORTD &= (~(1 << PD0));
    1fd4:	a2 e3       	ldi	r26, 0x32	; 50
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e2 e3       	ldi	r30, 0x32	; 50
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	8e 7f       	andi	r24, 0xFE	; 254
    1fe0:	8c 93       	st	X, r24
		if (secUnits == 0) {
    1fe2:	80 91 77 00 	lds	r24, 0x0077
    1fe6:	88 23       	and	r24, r24
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <countingTimer+0x12e>
    1fea:	56 c0       	rjmp	.+172    	; 0x2098 <countingTimer+0x1da>
			secUnits = 9;
    1fec:	89 e0       	ldi	r24, 0x09	; 9
    1fee:	80 93 77 00 	sts	0x0077, r24
			if (secTens == 0) {
    1ff2:	80 91 78 00 	lds	r24, 0x0078
    1ff6:	88 23       	and	r24, r24
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <countingTimer+0x13e>
    1ffa:	48 c0       	rjmp	.+144    	; 0x208c <countingTimer+0x1ce>
				secTens = 5;
    1ffc:	85 e0       	ldi	r24, 0x05	; 5
    1ffe:	80 93 78 00 	sts	0x0078, r24
				if (minUnits == 0) {
    2002:	80 91 79 00 	lds	r24, 0x0079
    2006:	88 23       	and	r24, r24
    2008:	d9 f5       	brne	.+118    	; 0x2080 <countingTimer+0x1c2>
					minUnits = 9;
    200a:	89 e0       	ldi	r24, 0x09	; 9
    200c:	80 93 79 00 	sts	0x0079, r24
					if (minTens == 0) {
    2010:	80 91 7a 00 	lds	r24, 0x007A
    2014:	88 23       	and	r24, r24
    2016:	71 f5       	brne	.+92     	; 0x2074 <countingTimer+0x1b6>
						minTens = 5;
    2018:	85 e0       	ldi	r24, 0x05	; 5
    201a:	80 93 7a 00 	sts	0x007A, r24
						if (hrsUnits == 0) {
    201e:	80 91 7b 00 	lds	r24, 0x007B
    2022:	88 23       	and	r24, r24
    2024:	09 f5       	brne	.+66     	; 0x2068 <countingTimer+0x1aa>
							hrsUnits = 9;
    2026:	89 e0       	ldi	r24, 0x09	; 9
    2028:	80 93 7b 00 	sts	0x007B, r24
							if (hrsTens == 0) {
    202c:	80 91 7c 00 	lds	r24, 0x007C
    2030:	88 23       	and	r24, r24
    2032:	a1 f4       	brne	.+40     	; 0x205c <countingTimer+0x19e>
								hrsTens = 0;
    2034:	10 92 7c 00 	sts	0x007C, r1
								hrsUnits = 0;
    2038:	10 92 7b 00 	sts	0x007B, r1
								minTens = 0;
    203c:	10 92 7a 00 	sts	0x007A, r1
								minUnits = 0;
    2040:	10 92 79 00 	sts	0x0079, r1
								secTens = 0;
    2044:	10 92 78 00 	sts	0x0078, r1
								secUnits = 0;
    2048:	10 92 77 00 	sts	0x0077, r1
								PORTD |= (1 << PD0);
    204c:	a2 e3       	ldi	r26, 0x32	; 50
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e2 e3       	ldi	r30, 0x32	; 50
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	81 60       	ori	r24, 0x01	; 1
    2058:	8c 93       	st	X, r24
    205a:	23 c0       	rjmp	.+70     	; 0x20a2 <countingTimer+0x1e4>
							} else {
								hrsTens--;
    205c:	80 91 7c 00 	lds	r24, 0x007C
    2060:	81 50       	subi	r24, 0x01	; 1
    2062:	80 93 7c 00 	sts	0x007C, r24
    2066:	1d c0       	rjmp	.+58     	; 0x20a2 <countingTimer+0x1e4>
							}
						} else {
							hrsUnits--;
    2068:	80 91 7b 00 	lds	r24, 0x007B
    206c:	81 50       	subi	r24, 0x01	; 1
    206e:	80 93 7b 00 	sts	0x007B, r24
    2072:	17 c0       	rjmp	.+46     	; 0x20a2 <countingTimer+0x1e4>
						}
					} else {
						minTens--;
    2074:	80 91 7a 00 	lds	r24, 0x007A
    2078:	81 50       	subi	r24, 0x01	; 1
    207a:	80 93 7a 00 	sts	0x007A, r24
    207e:	11 c0       	rjmp	.+34     	; 0x20a2 <countingTimer+0x1e4>
					}
				} else {
					minUnits--;
    2080:	80 91 79 00 	lds	r24, 0x0079
    2084:	81 50       	subi	r24, 0x01	; 1
    2086:	80 93 79 00 	sts	0x0079, r24
    208a:	0b c0       	rjmp	.+22     	; 0x20a2 <countingTimer+0x1e4>
				}
			} else {
				secTens--;
    208c:	80 91 78 00 	lds	r24, 0x0078
    2090:	81 50       	subi	r24, 0x01	; 1
    2092:	80 93 78 00 	sts	0x0078, r24
    2096:	05 c0       	rjmp	.+10     	; 0x20a2 <countingTimer+0x1e4>
			}
		} else {
			secUnits--;
    2098:	80 91 77 00 	lds	r24, 0x0077
    209c:	81 50       	subi	r24, 0x01	; 1
    209e:	80 93 77 00 	sts	0x0077, r24
		}
	}
}
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <GPIO_setupPinDirection+0x6>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <GPIO_setupPinDirection+0x8>
    20b0:	0f 92       	push	r0
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	6a 83       	std	Y+2, r22	; 0x02
    20ba:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	88 30       	cpi	r24, 0x08	; 8
    20c0:	08 f0       	brcs	.+2      	; 0x20c4 <GPIO_setupPinDirection+0x1c>
    20c2:	d5 c0       	rjmp	.+426    	; 0x226e <GPIO_setupPinDirection+0x1c6>
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	84 30       	cpi	r24, 0x04	; 4
    20c8:	08 f0       	brcs	.+2      	; 0x20cc <GPIO_setupPinDirection+0x24>
    20ca:	d1 c0       	rjmp	.+418    	; 0x226e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	3d 83       	std	Y+5, r19	; 0x05
    20d4:	2c 83       	std	Y+4, r18	; 0x04
    20d6:	8c 81       	ldd	r24, Y+4	; 0x04
    20d8:	9d 81       	ldd	r25, Y+5	; 0x05
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	91 05       	cpc	r25, r1
    20de:	09 f4       	brne	.+2      	; 0x20e2 <GPIO_setupPinDirection+0x3a>
    20e0:	43 c0       	rjmp	.+134    	; 0x2168 <GPIO_setupPinDirection+0xc0>
    20e2:	2c 81       	ldd	r18, Y+4	; 0x04
    20e4:	3d 81       	ldd	r19, Y+5	; 0x05
    20e6:	22 30       	cpi	r18, 0x02	; 2
    20e8:	31 05       	cpc	r19, r1
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <GPIO_setupPinDirection+0x4e>
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	9d 81       	ldd	r25, Y+5	; 0x05
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	71 f0       	breq	.+28     	; 0x2110 <GPIO_setupPinDirection+0x68>
    20f4:	bc c0       	rjmp	.+376    	; 0x226e <GPIO_setupPinDirection+0x1c6>
    20f6:	2c 81       	ldd	r18, Y+4	; 0x04
    20f8:	3d 81       	ldd	r19, Y+5	; 0x05
    20fa:	22 30       	cpi	r18, 0x02	; 2
    20fc:	31 05       	cpc	r19, r1
    20fe:	09 f4       	brne	.+2      	; 0x2102 <GPIO_setupPinDirection+0x5a>
    2100:	5f c0       	rjmp	.+190    	; 0x21c0 <GPIO_setupPinDirection+0x118>
    2102:	8c 81       	ldd	r24, Y+4	; 0x04
    2104:	9d 81       	ldd	r25, Y+5	; 0x05
    2106:	83 30       	cpi	r24, 0x03	; 3
    2108:	91 05       	cpc	r25, r1
    210a:	09 f4       	brne	.+2      	; 0x210e <GPIO_setupPinDirection+0x66>
    210c:	85 c0       	rjmp	.+266    	; 0x2218 <GPIO_setupPinDirection+0x170>
    210e:	af c0       	rjmp	.+350    	; 0x226e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	81 30       	cpi	r24, 0x01	; 1
    2114:	a1 f4       	brne	.+40     	; 0x213e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2116:	aa e3       	ldi	r26, 0x3A	; 58
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	ea e3       	ldi	r30, 0x3A	; 58
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	48 2f       	mov	r20, r24
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	02 2e       	mov	r0, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <GPIO_setupPinDirection+0x8c>
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	0a 94       	dec	r0
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <GPIO_setupPinDirection+0x88>
    2138:	84 2b       	or	r24, r20
    213a:	8c 93       	st	X, r24
    213c:	98 c0       	rjmp	.+304    	; 0x226e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    213e:	aa e3       	ldi	r26, 0x3A	; 58
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	ea e3       	ldi	r30, 0x3A	; 58
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	48 2f       	mov	r20, r24
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	02 2e       	mov	r0, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <GPIO_setupPinDirection+0xb4>
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	0a 94       	dec	r0
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <GPIO_setupPinDirection+0xb0>
    2160:	80 95       	com	r24
    2162:	84 23       	and	r24, r20
    2164:	8c 93       	st	X, r24
    2166:	83 c0       	rjmp	.+262    	; 0x226e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	a1 f4       	brne	.+40     	; 0x2196 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    216e:	a7 e3       	ldi	r26, 0x37	; 55
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e7 e3       	ldi	r30, 0x37	; 55
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	48 2f       	mov	r20, r24
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	02 2e       	mov	r0, r18
    2186:	02 c0       	rjmp	.+4      	; 0x218c <GPIO_setupPinDirection+0xe4>
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	0a 94       	dec	r0
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <GPIO_setupPinDirection+0xe0>
    2190:	84 2b       	or	r24, r20
    2192:	8c 93       	st	X, r24
    2194:	6c c0       	rjmp	.+216    	; 0x226e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2196:	a7 e3       	ldi	r26, 0x37	; 55
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e7 e3       	ldi	r30, 0x37	; 55
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	48 2f       	mov	r20, r24
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	02 2e       	mov	r0, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <GPIO_setupPinDirection+0x10c>
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	0a 94       	dec	r0
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <GPIO_setupPinDirection+0x108>
    21b8:	80 95       	com	r24
    21ba:	84 23       	and	r24, r20
    21bc:	8c 93       	st	X, r24
    21be:	57 c0       	rjmp	.+174    	; 0x226e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	a1 f4       	brne	.+40     	; 0x21ee <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    21c6:	a4 e3       	ldi	r26, 0x34	; 52
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e4 e3       	ldi	r30, 0x34	; 52
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	48 2f       	mov	r20, r24
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 2e       	mov	r0, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <GPIO_setupPinDirection+0x13c>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	0a 94       	dec	r0
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <GPIO_setupPinDirection+0x138>
    21e8:	84 2b       	or	r24, r20
    21ea:	8c 93       	st	X, r24
    21ec:	40 c0       	rjmp	.+128    	; 0x226e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    21ee:	a4 e3       	ldi	r26, 0x34	; 52
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e4 e3       	ldi	r30, 0x34	; 52
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	48 2f       	mov	r20, r24
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	02 2e       	mov	r0, r18
    2206:	02 c0       	rjmp	.+4      	; 0x220c <GPIO_setupPinDirection+0x164>
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	0a 94       	dec	r0
    220e:	e2 f7       	brpl	.-8      	; 0x2208 <GPIO_setupPinDirection+0x160>
    2210:	80 95       	com	r24
    2212:	84 23       	and	r24, r20
    2214:	8c 93       	st	X, r24
    2216:	2b c0       	rjmp	.+86     	; 0x226e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	a1 f4       	brne	.+40     	; 0x2246 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    221e:	a1 e3       	ldi	r26, 0x31	; 49
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e1 e3       	ldi	r30, 0x31	; 49
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	48 2f       	mov	r20, r24
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	02 2e       	mov	r0, r18
    2236:	02 c0       	rjmp	.+4      	; 0x223c <GPIO_setupPinDirection+0x194>
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	0a 94       	dec	r0
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <GPIO_setupPinDirection+0x190>
    2240:	84 2b       	or	r24, r20
    2242:	8c 93       	st	X, r24
    2244:	14 c0       	rjmp	.+40     	; 0x226e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2246:	a1 e3       	ldi	r26, 0x31	; 49
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e1 e3       	ldi	r30, 0x31	; 49
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	48 2f       	mov	r20, r24
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	02 2e       	mov	r0, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <GPIO_setupPinDirection+0x1bc>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <GPIO_setupPinDirection+0x1b8>
    2268:	80 95       	com	r24
    226a:	84 23       	and	r24, r20
    226c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	00 d0       	rcall	.+0      	; 0x2284 <GPIO_writePin+0x6>
    2284:	00 d0       	rcall	.+0      	; 0x2286 <GPIO_writePin+0x8>
    2286:	0f 92       	push	r0
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	6a 83       	std	Y+2, r22	; 0x02
    2290:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	88 30       	cpi	r24, 0x08	; 8
    2296:	08 f0       	brcs	.+2      	; 0x229a <GPIO_writePin+0x1c>
    2298:	d5 c0       	rjmp	.+426    	; 0x2444 <GPIO_writePin+0x1c6>
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	84 30       	cpi	r24, 0x04	; 4
    229e:	08 f0       	brcs	.+2      	; 0x22a2 <GPIO_writePin+0x24>
    22a0:	d1 c0       	rjmp	.+418    	; 0x2444 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	3d 83       	std	Y+5, r19	; 0x05
    22aa:	2c 83       	std	Y+4, r18	; 0x04
    22ac:	8c 81       	ldd	r24, Y+4	; 0x04
    22ae:	9d 81       	ldd	r25, Y+5	; 0x05
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	91 05       	cpc	r25, r1
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <GPIO_writePin+0x3a>
    22b6:	43 c0       	rjmp	.+134    	; 0x233e <GPIO_writePin+0xc0>
    22b8:	2c 81       	ldd	r18, Y+4	; 0x04
    22ba:	3d 81       	ldd	r19, Y+5	; 0x05
    22bc:	22 30       	cpi	r18, 0x02	; 2
    22be:	31 05       	cpc	r19, r1
    22c0:	2c f4       	brge	.+10     	; 0x22cc <GPIO_writePin+0x4e>
    22c2:	8c 81       	ldd	r24, Y+4	; 0x04
    22c4:	9d 81       	ldd	r25, Y+5	; 0x05
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	71 f0       	breq	.+28     	; 0x22e6 <GPIO_writePin+0x68>
    22ca:	bc c0       	rjmp	.+376    	; 0x2444 <GPIO_writePin+0x1c6>
    22cc:	2c 81       	ldd	r18, Y+4	; 0x04
    22ce:	3d 81       	ldd	r19, Y+5	; 0x05
    22d0:	22 30       	cpi	r18, 0x02	; 2
    22d2:	31 05       	cpc	r19, r1
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <GPIO_writePin+0x5a>
    22d6:	5f c0       	rjmp	.+190    	; 0x2396 <GPIO_writePin+0x118>
    22d8:	8c 81       	ldd	r24, Y+4	; 0x04
    22da:	9d 81       	ldd	r25, Y+5	; 0x05
    22dc:	83 30       	cpi	r24, 0x03	; 3
    22de:	91 05       	cpc	r25, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <GPIO_writePin+0x66>
    22e2:	85 c0       	rjmp	.+266    	; 0x23ee <GPIO_writePin+0x170>
    22e4:	af c0       	rjmp	.+350    	; 0x2444 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	81 30       	cpi	r24, 0x01	; 1
    22ea:	a1 f4       	brne	.+40     	; 0x2314 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    22ec:	ab e3       	ldi	r26, 0x3B	; 59
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	eb e3       	ldi	r30, 0x3B	; 59
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	48 2f       	mov	r20, r24
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	02 2e       	mov	r0, r18
    2304:	02 c0       	rjmp	.+4      	; 0x230a <GPIO_writePin+0x8c>
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	0a 94       	dec	r0
    230c:	e2 f7       	brpl	.-8      	; 0x2306 <GPIO_writePin+0x88>
    230e:	84 2b       	or	r24, r20
    2310:	8c 93       	st	X, r24
    2312:	98 c0       	rjmp	.+304    	; 0x2444 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2314:	ab e3       	ldi	r26, 0x3B	; 59
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	eb e3       	ldi	r30, 0x3B	; 59
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	48 2f       	mov	r20, r24
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	28 2f       	mov	r18, r24
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	02 2e       	mov	r0, r18
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <GPIO_writePin+0xb4>
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	0a 94       	dec	r0
    2334:	e2 f7       	brpl	.-8      	; 0x232e <GPIO_writePin+0xb0>
    2336:	80 95       	com	r24
    2338:	84 23       	and	r24, r20
    233a:	8c 93       	st	X, r24
    233c:	83 c0       	rjmp	.+262    	; 0x2444 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	a1 f4       	brne	.+40     	; 0x236c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2344:	a8 e3       	ldi	r26, 0x38	; 56
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e8 e3       	ldi	r30, 0x38	; 56
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	48 2f       	mov	r20, r24
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 2e       	mov	r0, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <GPIO_writePin+0xe4>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <GPIO_writePin+0xe0>
    2366:	84 2b       	or	r24, r20
    2368:	8c 93       	st	X, r24
    236a:	6c c0       	rjmp	.+216    	; 0x2444 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    236c:	a8 e3       	ldi	r26, 0x38	; 56
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e8 e3       	ldi	r30, 0x38	; 56
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	48 2f       	mov	r20, r24
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 2e       	mov	r0, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <GPIO_writePin+0x10c>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	0a 94       	dec	r0
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <GPIO_writePin+0x108>
    238e:	80 95       	com	r24
    2390:	84 23       	and	r24, r20
    2392:	8c 93       	st	X, r24
    2394:	57 c0       	rjmp	.+174    	; 0x2444 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	81 30       	cpi	r24, 0x01	; 1
    239a:	a1 f4       	brne	.+40     	; 0x23c4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    239c:	a5 e3       	ldi	r26, 0x35	; 53
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e5 e3       	ldi	r30, 0x35	; 53
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	48 2f       	mov	r20, r24
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 2e       	mov	r0, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <GPIO_writePin+0x13c>
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	0a 94       	dec	r0
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <GPIO_writePin+0x138>
    23be:	84 2b       	or	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	40 c0       	rjmp	.+128    	; 0x2444 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    23c4:	a5 e3       	ldi	r26, 0x35	; 53
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e5 e3       	ldi	r30, 0x35	; 53
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	48 2f       	mov	r20, r24
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	02 2e       	mov	r0, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <GPIO_writePin+0x164>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <GPIO_writePin+0x160>
    23e6:	80 95       	com	r24
    23e8:	84 23       	and	r24, r20
    23ea:	8c 93       	st	X, r24
    23ec:	2b c0       	rjmp	.+86     	; 0x2444 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	a1 f4       	brne	.+40     	; 0x241c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    23f4:	a2 e3       	ldi	r26, 0x32	; 50
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e2 e3       	ldi	r30, 0x32	; 50
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	48 2f       	mov	r20, r24
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	02 2e       	mov	r0, r18
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <GPIO_writePin+0x194>
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	0a 94       	dec	r0
    2414:	e2 f7       	brpl	.-8      	; 0x240e <GPIO_writePin+0x190>
    2416:	84 2b       	or	r24, r20
    2418:	8c 93       	st	X, r24
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    241c:	a2 e3       	ldi	r26, 0x32	; 50
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e2 e3       	ldi	r30, 0x32	; 50
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	48 2f       	mov	r20, r24
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	02 2e       	mov	r0, r18
    2434:	02 c0       	rjmp	.+4      	; 0x243a <GPIO_writePin+0x1bc>
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	0a 94       	dec	r0
    243c:	e2 f7       	brpl	.-8      	; 0x2436 <GPIO_writePin+0x1b8>
    243e:	80 95       	com	r24
    2440:	84 23       	and	r24, r20
    2442:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	00 d0       	rcall	.+0      	; 0x245a <GPIO_readPin+0x6>
    245a:	00 d0       	rcall	.+0      	; 0x245c <GPIO_readPin+0x8>
    245c:	0f 92       	push	r0
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	8a 83       	std	Y+2, r24	; 0x02
    2464:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2466:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	88 30       	cpi	r24, 0x08	; 8
    246c:	08 f0       	brcs	.+2      	; 0x2470 <GPIO_readPin+0x1c>
    246e:	84 c0       	rjmp	.+264    	; 0x2578 <GPIO_readPin+0x124>
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	84 30       	cpi	r24, 0x04	; 4
    2474:	08 f0       	brcs	.+2      	; 0x2478 <GPIO_readPin+0x24>
    2476:	80 c0       	rjmp	.+256    	; 0x2578 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	3d 83       	std	Y+5, r19	; 0x05
    2480:	2c 83       	std	Y+4, r18	; 0x04
    2482:	4c 81       	ldd	r20, Y+4	; 0x04
    2484:	5d 81       	ldd	r21, Y+5	; 0x05
    2486:	41 30       	cpi	r20, 0x01	; 1
    2488:	51 05       	cpc	r21, r1
    248a:	79 f1       	breq	.+94     	; 0x24ea <GPIO_readPin+0x96>
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	9d 81       	ldd	r25, Y+5	; 0x05
    2490:	82 30       	cpi	r24, 0x02	; 2
    2492:	91 05       	cpc	r25, r1
    2494:	34 f4       	brge	.+12     	; 0x24a2 <GPIO_readPin+0x4e>
    2496:	2c 81       	ldd	r18, Y+4	; 0x04
    2498:	3d 81       	ldd	r19, Y+5	; 0x05
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	69 f0       	breq	.+26     	; 0x24ba <GPIO_readPin+0x66>
    24a0:	6b c0       	rjmp	.+214    	; 0x2578 <GPIO_readPin+0x124>
    24a2:	4c 81       	ldd	r20, Y+4	; 0x04
    24a4:	5d 81       	ldd	r21, Y+5	; 0x05
    24a6:	42 30       	cpi	r20, 0x02	; 2
    24a8:	51 05       	cpc	r21, r1
    24aa:	b9 f1       	breq	.+110    	; 0x251a <GPIO_readPin+0xc6>
    24ac:	8c 81       	ldd	r24, Y+4	; 0x04
    24ae:	9d 81       	ldd	r25, Y+5	; 0x05
    24b0:	83 30       	cpi	r24, 0x03	; 3
    24b2:	91 05       	cpc	r25, r1
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <GPIO_readPin+0x64>
    24b6:	49 c0       	rjmp	.+146    	; 0x254a <GPIO_readPin+0xf6>
    24b8:	5f c0       	rjmp	.+190    	; 0x2578 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    24ba:	e9 e3       	ldi	r30, 0x39	; 57
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a9 01       	movw	r20, r18
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <GPIO_readPin+0x7e>
    24ce:	55 95       	asr	r21
    24d0:	47 95       	ror	r20
    24d2:	8a 95       	dec	r24
    24d4:	e2 f7       	brpl	.-8      	; 0x24ce <GPIO_readPin+0x7a>
    24d6:	ca 01       	movw	r24, r20
    24d8:	81 70       	andi	r24, 0x01	; 1
    24da:	90 70       	andi	r25, 0x00	; 0
    24dc:	88 23       	and	r24, r24
    24de:	19 f0       	breq	.+6      	; 0x24e6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	49 c0       	rjmp	.+146    	; 0x2578 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24e6:	19 82       	std	Y+1, r1	; 0x01
    24e8:	47 c0       	rjmp	.+142    	; 0x2578 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    24ea:	e6 e3       	ldi	r30, 0x36	; 54
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a9 01       	movw	r20, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <GPIO_readPin+0xae>
    24fe:	55 95       	asr	r21
    2500:	47 95       	ror	r20
    2502:	8a 95       	dec	r24
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <GPIO_readPin+0xaa>
    2506:	ca 01       	movw	r24, r20
    2508:	81 70       	andi	r24, 0x01	; 1
    250a:	90 70       	andi	r25, 0x00	; 0
    250c:	88 23       	and	r24, r24
    250e:	19 f0       	breq	.+6      	; 0x2516 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	31 c0       	rjmp	.+98     	; 0x2578 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2516:	19 82       	std	Y+1, r1	; 0x01
    2518:	2f c0       	rjmp	.+94     	; 0x2578 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    251a:	e3 e3       	ldi	r30, 0x33	; 51
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	a9 01       	movw	r20, r18
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <GPIO_readPin+0xde>
    252e:	55 95       	asr	r21
    2530:	47 95       	ror	r20
    2532:	8a 95       	dec	r24
    2534:	e2 f7       	brpl	.-8      	; 0x252e <GPIO_readPin+0xda>
    2536:	ca 01       	movw	r24, r20
    2538:	81 70       	andi	r24, 0x01	; 1
    253a:	90 70       	andi	r25, 0x00	; 0
    253c:	88 23       	and	r24, r24
    253e:	19 f0       	breq	.+6      	; 0x2546 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	19 c0       	rjmp	.+50     	; 0x2578 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2546:	19 82       	std	Y+1, r1	; 0x01
    2548:	17 c0       	rjmp	.+46     	; 0x2578 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    254a:	e0 e3       	ldi	r30, 0x30	; 48
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a9 01       	movw	r20, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <GPIO_readPin+0x10e>
    255e:	55 95       	asr	r21
    2560:	47 95       	ror	r20
    2562:	8a 95       	dec	r24
    2564:	e2 f7       	brpl	.-8      	; 0x255e <GPIO_readPin+0x10a>
    2566:	ca 01       	movw	r24, r20
    2568:	81 70       	andi	r24, 0x01	; 1
    256a:	90 70       	andi	r25, 0x00	; 0
    256c:	88 23       	and	r24, r24
    256e:	19 f0       	breq	.+6      	; 0x2576 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2576:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2578:	89 81       	ldd	r24, Y+1	; 0x01
}
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	00 d0       	rcall	.+0      	; 0x2590 <GPIO_setupPortDirection+0x6>
    2590:	00 d0       	rcall	.+0      	; 0x2592 <GPIO_setupPortDirection+0x8>
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	84 30       	cpi	r24, 0x04	; 4
    259e:	90 f5       	brcc	.+100    	; 0x2604 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	3c 83       	std	Y+4, r19	; 0x04
    25a8:	2b 83       	std	Y+3, r18	; 0x03
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	91 05       	cpc	r25, r1
    25b2:	d1 f0       	breq	.+52     	; 0x25e8 <GPIO_setupPortDirection+0x5e>
    25b4:	2b 81       	ldd	r18, Y+3	; 0x03
    25b6:	3c 81       	ldd	r19, Y+4	; 0x04
    25b8:	22 30       	cpi	r18, 0x02	; 2
    25ba:	31 05       	cpc	r19, r1
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <GPIO_setupPortDirection+0x3e>
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	61 f0       	breq	.+24     	; 0x25de <GPIO_setupPortDirection+0x54>
    25c6:	1e c0       	rjmp	.+60     	; 0x2604 <GPIO_setupPortDirection+0x7a>
    25c8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ca:	3c 81       	ldd	r19, Y+4	; 0x04
    25cc:	22 30       	cpi	r18, 0x02	; 2
    25ce:	31 05       	cpc	r19, r1
    25d0:	81 f0       	breq	.+32     	; 0x25f2 <GPIO_setupPortDirection+0x68>
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	83 30       	cpi	r24, 0x03	; 3
    25d8:	91 05       	cpc	r25, r1
    25da:	81 f0       	breq	.+32     	; 0x25fc <GPIO_setupPortDirection+0x72>
    25dc:	13 c0       	rjmp	.+38     	; 0x2604 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    25de:	ea e3       	ldi	r30, 0x3A	; 58
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	80 83       	st	Z, r24
    25e6:	0e c0       	rjmp	.+28     	; 0x2604 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    25e8:	e7 e3       	ldi	r30, 0x37	; 55
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	80 83       	st	Z, r24
    25f0:	09 c0       	rjmp	.+18     	; 0x2604 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25f2:	e4 e3       	ldi	r30, 0x34	; 52
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	80 83       	st	Z, r24
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    25fc:	e1 e3       	ldi	r30, 0x31	; 49
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	80 83       	st	Z, r24
			break;
		}
	}
}
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	00 d0       	rcall	.+0      	; 0x2618 <GPIO_writePort+0x6>
    2618:	00 d0       	rcall	.+0      	; 0x261a <GPIO_writePort+0x8>
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	84 30       	cpi	r24, 0x04	; 4
    2626:	90 f5       	brcc	.+100    	; 0x268c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	3c 83       	std	Y+4, r19	; 0x04
    2630:	2b 83       	std	Y+3, r18	; 0x03
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	91 05       	cpc	r25, r1
    263a:	d1 f0       	breq	.+52     	; 0x2670 <GPIO_writePort+0x5e>
    263c:	2b 81       	ldd	r18, Y+3	; 0x03
    263e:	3c 81       	ldd	r19, Y+4	; 0x04
    2640:	22 30       	cpi	r18, 0x02	; 2
    2642:	31 05       	cpc	r19, r1
    2644:	2c f4       	brge	.+10     	; 0x2650 <GPIO_writePort+0x3e>
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	61 f0       	breq	.+24     	; 0x2666 <GPIO_writePort+0x54>
    264e:	1e c0       	rjmp	.+60     	; 0x268c <GPIO_writePort+0x7a>
    2650:	2b 81       	ldd	r18, Y+3	; 0x03
    2652:	3c 81       	ldd	r19, Y+4	; 0x04
    2654:	22 30       	cpi	r18, 0x02	; 2
    2656:	31 05       	cpc	r19, r1
    2658:	81 f0       	breq	.+32     	; 0x267a <GPIO_writePort+0x68>
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	83 30       	cpi	r24, 0x03	; 3
    2660:	91 05       	cpc	r25, r1
    2662:	81 f0       	breq	.+32     	; 0x2684 <GPIO_writePort+0x72>
    2664:	13 c0       	rjmp	.+38     	; 0x268c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2666:	eb e3       	ldi	r30, 0x3B	; 59
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	80 83       	st	Z, r24
    266e:	0e c0       	rjmp	.+28     	; 0x268c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2670:	e8 e3       	ldi	r30, 0x38	; 56
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	80 83       	st	Z, r24
    2678:	09 c0       	rjmp	.+18     	; 0x268c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    267a:	e5 e3       	ldi	r30, 0x35	; 53
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	80 83       	st	Z, r24
    2682:	04 c0       	rjmp	.+8      	; 0x268c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2684:	e2 e3       	ldi	r30, 0x32	; 50
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	80 83       	st	Z, r24
			break;
		}
	}
}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <GPIO_readPort+0x6>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <GPIO_readPort+0x8>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    26a8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	84 30       	cpi	r24, 0x04	; 4
    26ae:	90 f5       	brcc	.+100    	; 0x2714 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	3c 83       	std	Y+4, r19	; 0x04
    26b8:	2b 83       	std	Y+3, r18	; 0x03
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	91 05       	cpc	r25, r1
    26c2:	d1 f0       	breq	.+52     	; 0x26f8 <GPIO_readPort+0x5e>
    26c4:	2b 81       	ldd	r18, Y+3	; 0x03
    26c6:	3c 81       	ldd	r19, Y+4	; 0x04
    26c8:	22 30       	cpi	r18, 0x02	; 2
    26ca:	31 05       	cpc	r19, r1
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <GPIO_readPort+0x3e>
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	61 f0       	breq	.+24     	; 0x26ee <GPIO_readPort+0x54>
    26d6:	1e c0       	rjmp	.+60     	; 0x2714 <GPIO_readPort+0x7a>
    26d8:	2b 81       	ldd	r18, Y+3	; 0x03
    26da:	3c 81       	ldd	r19, Y+4	; 0x04
    26dc:	22 30       	cpi	r18, 0x02	; 2
    26de:	31 05       	cpc	r19, r1
    26e0:	81 f0       	breq	.+32     	; 0x2702 <GPIO_readPort+0x68>
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	83 30       	cpi	r24, 0x03	; 3
    26e8:	91 05       	cpc	r25, r1
    26ea:	81 f0       	breq	.+32     	; 0x270c <GPIO_readPort+0x72>
    26ec:	13 c0       	rjmp	.+38     	; 0x2714 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    26ee:	e9 e3       	ldi	r30, 0x39	; 57
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	0e c0       	rjmp	.+28     	; 0x2714 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    26f8:	e6 e3       	ldi	r30, 0x36	; 54
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	09 c0       	rjmp	.+18     	; 0x2714 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2702:	e3 e3       	ldi	r30, 0x33	; 51
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    270c:	e0 e3       	ldi	r30, 0x30	; 48
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2714:	89 81       	ldd	r24, Y+1	; 0x01
}
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2724:	1f 92       	push	r1
    2726:	0f 92       	push	r0
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	0f 92       	push	r0
    272c:	11 24       	eor	r1, r1
    272e:	2f 93       	push	r18
    2730:	3f 93       	push	r19
    2732:	4f 93       	push	r20
    2734:	5f 93       	push	r21
    2736:	6f 93       	push	r22
    2738:	7f 93       	push	r23
    273a:	8f 93       	push	r24
    273c:	9f 93       	push	r25
    273e:	af 93       	push	r26
    2740:	bf 93       	push	r27
    2742:	ef 93       	push	r30
    2744:	ff 93       	push	r31
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    274e:	80 91 7d 00 	lds	r24, 0x007D
    2752:	90 91 7e 00 	lds	r25, 0x007E
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	29 f0       	breq	.+10     	; 0x2764 <__vector_11+0x40>
	{
		(*g_callBackPtr0)();
    275a:	e0 91 7d 00 	lds	r30, 0x007D
    275e:	f0 91 7e 00 	lds	r31, 0x007E
    2762:	09 95       	icall
	}
}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	ff 91       	pop	r31
    276a:	ef 91       	pop	r30
    276c:	bf 91       	pop	r27
    276e:	af 91       	pop	r26
    2770:	9f 91       	pop	r25
    2772:	8f 91       	pop	r24
    2774:	7f 91       	pop	r23
    2776:	6f 91       	pop	r22
    2778:	5f 91       	pop	r21
    277a:	4f 91       	pop	r20
    277c:	3f 91       	pop	r19
    277e:	2f 91       	pop	r18
    2780:	0f 90       	pop	r0
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	0f 90       	pop	r0
    2786:	1f 90       	pop	r1
    2788:	18 95       	reti

0000278a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    278a:	1f 92       	push	r1
    278c:	0f 92       	push	r0
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	0f 92       	push	r0
    2792:	11 24       	eor	r1, r1
    2794:	2f 93       	push	r18
    2796:	3f 93       	push	r19
    2798:	4f 93       	push	r20
    279a:	5f 93       	push	r21
    279c:	6f 93       	push	r22
    279e:	7f 93       	push	r23
    27a0:	8f 93       	push	r24
    27a2:	9f 93       	push	r25
    27a4:	af 93       	push	r26
    27a6:	bf 93       	push	r27
    27a8:	ef 93       	push	r30
    27aa:	ff 93       	push	r31
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    27b4:	80 91 7d 00 	lds	r24, 0x007D
    27b8:	90 91 7e 00 	lds	r25, 0x007E
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	29 f0       	breq	.+10     	; 0x27ca <__vector_10+0x40>
	{
		(*g_callBackPtr0)();
    27c0:	e0 91 7d 00 	lds	r30, 0x007D
    27c4:	f0 91 7e 00 	lds	r31, 0x007E
    27c8:	09 95       	icall
	}
}
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	ff 91       	pop	r31
    27d0:	ef 91       	pop	r30
    27d2:	bf 91       	pop	r27
    27d4:	af 91       	pop	r26
    27d6:	9f 91       	pop	r25
    27d8:	8f 91       	pop	r24
    27da:	7f 91       	pop	r23
    27dc:	6f 91       	pop	r22
    27de:	5f 91       	pop	r21
    27e0:	4f 91       	pop	r20
    27e2:	3f 91       	pop	r19
    27e4:	2f 91       	pop	r18
    27e6:	0f 90       	pop	r0
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	0f 90       	pop	r0
    27ec:	1f 90       	pop	r1
    27ee:	18 95       	reti

000027f0 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    27f0:	1f 92       	push	r1
    27f2:	0f 92       	push	r0
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	0f 92       	push	r0
    27f8:	11 24       	eor	r1, r1
    27fa:	2f 93       	push	r18
    27fc:	3f 93       	push	r19
    27fe:	4f 93       	push	r20
    2800:	5f 93       	push	r21
    2802:	6f 93       	push	r22
    2804:	7f 93       	push	r23
    2806:	8f 93       	push	r24
    2808:	9f 93       	push	r25
    280a:	af 93       	push	r26
    280c:	bf 93       	push	r27
    280e:	ef 93       	push	r30
    2810:	ff 93       	push	r31
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    281a:	80 91 7f 00 	lds	r24, 0x007F
    281e:	90 91 80 00 	lds	r25, 0x0080
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	29 f0       	breq	.+10     	; 0x2830 <__vector_9+0x40>
	{

		(*g_callBackPtr1)();
    2826:	e0 91 7f 00 	lds	r30, 0x007F
    282a:	f0 91 80 00 	lds	r31, 0x0080
    282e:	09 95       	icall
	}
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	ff 91       	pop	r31
    2836:	ef 91       	pop	r30
    2838:	bf 91       	pop	r27
    283a:	af 91       	pop	r26
    283c:	9f 91       	pop	r25
    283e:	8f 91       	pop	r24
    2840:	7f 91       	pop	r23
    2842:	6f 91       	pop	r22
    2844:	5f 91       	pop	r21
    2846:	4f 91       	pop	r20
    2848:	3f 91       	pop	r19
    284a:	2f 91       	pop	r18
    284c:	0f 90       	pop	r0
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	0f 90       	pop	r0
    2852:	1f 90       	pop	r1
    2854:	18 95       	reti

00002856 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2856:	1f 92       	push	r1
    2858:	0f 92       	push	r0
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	0f 92       	push	r0
    285e:	11 24       	eor	r1, r1
    2860:	2f 93       	push	r18
    2862:	3f 93       	push	r19
    2864:	4f 93       	push	r20
    2866:	5f 93       	push	r21
    2868:	6f 93       	push	r22
    286a:	7f 93       	push	r23
    286c:	8f 93       	push	r24
    286e:	9f 93       	push	r25
    2870:	af 93       	push	r26
    2872:	bf 93       	push	r27
    2874:	ef 93       	push	r30
    2876:	ff 93       	push	r31
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    2880:	80 91 7f 00 	lds	r24, 0x007F
    2884:	90 91 80 00 	lds	r25, 0x0080
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	29 f0       	breq	.+10     	; 0x2896 <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
    288c:	e0 91 7f 00 	lds	r30, 0x007F
    2890:	f0 91 80 00 	lds	r31, 0x0080
    2894:	09 95       	icall
	}
}
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	ff 91       	pop	r31
    289c:	ef 91       	pop	r30
    289e:	bf 91       	pop	r27
    28a0:	af 91       	pop	r26
    28a2:	9f 91       	pop	r25
    28a4:	8f 91       	pop	r24
    28a6:	7f 91       	pop	r23
    28a8:	6f 91       	pop	r22
    28aa:	5f 91       	pop	r21
    28ac:	4f 91       	pop	r20
    28ae:	3f 91       	pop	r19
    28b0:	2f 91       	pop	r18
    28b2:	0f 90       	pop	r0
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	0f 90       	pop	r0
    28b8:	1f 90       	pop	r1
    28ba:	18 95       	reti

000028bc <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    28bc:	1f 92       	push	r1
    28be:	0f 92       	push	r0
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	0f 92       	push	r0
    28c4:	11 24       	eor	r1, r1
    28c6:	2f 93       	push	r18
    28c8:	3f 93       	push	r19
    28ca:	4f 93       	push	r20
    28cc:	5f 93       	push	r21
    28ce:	6f 93       	push	r22
    28d0:	7f 93       	push	r23
    28d2:	8f 93       	push	r24
    28d4:	9f 93       	push	r25
    28d6:	af 93       	push	r26
    28d8:	bf 93       	push	r27
    28da:	ef 93       	push	r30
    28dc:	ff 93       	push	r31
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    28e6:	80 91 81 00 	lds	r24, 0x0081
    28ea:	90 91 82 00 	lds	r25, 0x0082
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	29 f0       	breq	.+10     	; 0x28fc <__vector_5+0x40>
	{

		(*g_callBackPtr2)();
    28f2:	e0 91 81 00 	lds	r30, 0x0081
    28f6:	f0 91 82 00 	lds	r31, 0x0082
    28fa:	09 95       	icall
	}
}
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	ff 91       	pop	r31
    2902:	ef 91       	pop	r30
    2904:	bf 91       	pop	r27
    2906:	af 91       	pop	r26
    2908:	9f 91       	pop	r25
    290a:	8f 91       	pop	r24
    290c:	7f 91       	pop	r23
    290e:	6f 91       	pop	r22
    2910:	5f 91       	pop	r21
    2912:	4f 91       	pop	r20
    2914:	3f 91       	pop	r19
    2916:	2f 91       	pop	r18
    2918:	0f 90       	pop	r0
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	0f 90       	pop	r0
    291e:	1f 90       	pop	r1
    2920:	18 95       	reti

00002922 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    2922:	1f 92       	push	r1
    2924:	0f 92       	push	r0
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	0f 92       	push	r0
    292a:	11 24       	eor	r1, r1
    292c:	2f 93       	push	r18
    292e:	3f 93       	push	r19
    2930:	4f 93       	push	r20
    2932:	5f 93       	push	r21
    2934:	6f 93       	push	r22
    2936:	7f 93       	push	r23
    2938:	8f 93       	push	r24
    293a:	9f 93       	push	r25
    293c:	af 93       	push	r26
    293e:	bf 93       	push	r27
    2940:	ef 93       	push	r30
    2942:	ff 93       	push	r31
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    294c:	80 91 81 00 	lds	r24, 0x0081
    2950:	90 91 82 00 	lds	r25, 0x0082
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	29 f0       	breq	.+10     	; 0x2962 <__vector_4+0x40>
	{
		(*g_callBackPtr2)();
    2958:	e0 91 81 00 	lds	r30, 0x0081
    295c:	f0 91 82 00 	lds	r31, 0x0082
    2960:	09 95       	icall
	}
}
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	ff 91       	pop	r31
    2968:	ef 91       	pop	r30
    296a:	bf 91       	pop	r27
    296c:	af 91       	pop	r26
    296e:	9f 91       	pop	r25
    2970:	8f 91       	pop	r24
    2972:	7f 91       	pop	r23
    2974:	6f 91       	pop	r22
    2976:	5f 91       	pop	r21
    2978:	4f 91       	pop	r20
    297a:	3f 91       	pop	r19
    297c:	2f 91       	pop	r18
    297e:	0f 90       	pop	r0
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	0f 90       	pop	r0
    2984:	1f 90       	pop	r1
    2986:	18 95       	reti

00002988 <Timer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*  Initializes the timer with the specified settings. */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	00 d0       	rcall	.+0      	; 0x298e <Timer_init+0x6>
    298e:	00 d0       	rcall	.+0      	; 0x2990 <Timer_init+0x8>
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	9c 83       	std	Y+4, r25	; 0x04
    2996:	8b 83       	std	Y+3, r24	; 0x03
	uint8 timer_ID = Config_Ptr -> timer_ID ;
    2998:	eb 81       	ldd	r30, Y+3	; 0x03
    299a:	fc 81       	ldd	r31, Y+4	; 0x04
    299c:	84 81       	ldd	r24, Z+4	; 0x04
    299e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_Mode = Config_Ptr -> timer_mode;
    29a0:	eb 81       	ldd	r30, Y+3	; 0x03
    29a2:	fc 81       	ldd	r31, Y+4	; 0x04
    29a4:	86 81       	ldd	r24, Z+6	; 0x06
    29a6:	89 83       	std	Y+1, r24	; 0x01


	/* Timer0 configuration */
	if (timer_ID == TIMER_0)
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	88 23       	and	r24, r24
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <Timer_init+0x28>
    29ae:	49 c0       	rjmp	.+146    	; 0x2a42 <Timer_init+0xba>
	{
		/* normal mode configuration */
		if(timer_Mode == NORMAL_MODE)
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	88 23       	and	r24, r24
    29b4:	e1 f4       	brne	.+56     	; 0x29ee <Timer_init+0x66>
		{
			TCNT0 = Config_Ptr -> timer_InitialValue ; /* Set Timer initial value */
    29b6:	a2 e5       	ldi	r26, 0x52	; 82
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	eb 81       	ldd	r30, Y+3	; 0x03
    29bc:	fc 81       	ldd	r31, Y+4	; 0x04
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	8c 93       	st	X, r24

			TIMSK = (1<<TOIE0); /* Enable Timer0 Overflow Interrupt */
    29c4:	e9 e5       	ldi	r30, 0x59	; 89
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR0 = (1<<FOC0) ;
    29cc:	e3 e5       	ldi	r30, 0x53	; 83
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 e8       	ldi	r24, 0x80	; 128
    29d2:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock);
    29d4:	a3 e5       	ldi	r26, 0x53	; 83
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e3 e5       	ldi	r30, 0x53	; 83
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	98 2f       	mov	r25, r24
    29e0:	98 7f       	andi	r25, 0xF8	; 248
    29e2:	eb 81       	ldd	r30, Y+3	; 0x03
    29e4:	fc 81       	ldd	r31, Y+4	; 0x04
    29e6:	85 81       	ldd	r24, Z+5	; 0x05
    29e8:	89 2b       	or	r24, r25
    29ea:	8c 93       	st	X, r24
    29ec:	cf c0       	rjmp	.+414    	; 0x2b8c <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == COMPARE_MODE)
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	81 30       	cpi	r24, 0x01	; 1
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <Timer_init+0x6e>
    29f4:	cb c0       	rjmp	.+406    	; 0x2b8c <Timer_init+0x204>
		{
			TCNT0 = Config_Ptr -> timer_InitialValue ; /* Set Timer Initial Value 0 */
    29f6:	a2 e5       	ldi	r26, 0x52	; 82
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	eb 81       	ldd	r30, Y+3	; 0x03
    29fc:	fc 81       	ldd	r31, Y+4	; 0x04
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	8c 93       	st	X, r24
			OCR0 = Config_Ptr -> timer_compare_MatchValue; /* Set Compare Value */
    2a04:	ac e5       	ldi	r26, 0x5C	; 92
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	eb 81       	ldd	r30, Y+3	; 0x03
    2a0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a0c:	82 81       	ldd	r24, Z+2	; 0x02
    2a0e:	93 81       	ldd	r25, Z+3	; 0x03
    2a10:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE0); /* Enable Timer0 Compare Interrupt */
    2a12:	a9 e5       	ldi	r26, 0x59	; 89
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	e9 e5       	ldi	r30, 0x59	; 89
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	82 60       	ori	r24, 0x02	; 2
    2a1e:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    2a20:	e3 e5       	ldi	r30, 0x53	; 83
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	88 e8       	ldi	r24, 0x88	; 136
    2a26:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock);
    2a28:	a3 e5       	ldi	r26, 0x53	; 83
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e3 e5       	ldi	r30, 0x53	; 83
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	98 2f       	mov	r25, r24
    2a34:	98 7f       	andi	r25, 0xF8	; 248
    2a36:	eb 81       	ldd	r30, Y+3	; 0x03
    2a38:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3a:	85 81       	ldd	r24, Z+5	; 0x05
    2a3c:	89 2b       	or	r24, r25
    2a3e:	8c 93       	st	X, r24
    2a40:	a5 c0       	rjmp	.+330    	; 0x2b8c <Timer_init+0x204>
		}
	}

	/* Timer1 configuration */
	else if (timer_ID == TIMER_1)
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <Timer_init+0xc2>
    2a48:	56 c0       	rjmp	.+172    	; 0x2af6 <Timer_init+0x16e>
	{
		/* normal mode configuration */
		if(timer_Mode == NORMAL_MODE)
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	88 23       	and	r24, r24
    2a4e:	09 f5       	brne	.+66     	; 0x2a92 <Timer_init+0x10a>
		{
			TCNT1 = Config_Ptr -> timer_InitialValue ;		/* Set timer1 initial count  */
    2a50:	ac e4       	ldi	r26, 0x4C	; 76
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	eb 81       	ldd	r30, Y+3	; 0x03
    2a56:	fc 81       	ldd	r31, Y+4	; 0x04
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	11 96       	adiw	r26, 0x01	; 1
    2a5e:	9c 93       	st	X, r25
    2a60:	8e 93       	st	-X, r24

			TIMSK |= (1<<TOIE1) ; /* Enable Timer1 Overflow Interrupt */
    2a62:	a9 e5       	ldi	r26, 0x59	; 89
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e9 e5       	ldi	r30, 0x59	; 89
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	84 60       	ori	r24, 0x04	; 4
    2a6e:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Normal Mode COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. Non PWM FOC1A=1 FOC1B=1
			 * 3. Normal Mode WGM10=0 WGM11=0
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2a70:	ef e4       	ldi	r30, 0x4F	; 79
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	8c e0       	ldi	r24, 0x0C	; 12
    2a76:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. Normal Mode WGM12=0 WGM13=0
			 * 2. Prescaler = F_CPU/Prescaler
			 */
			TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    2a78:	ae e4       	ldi	r26, 0x4E	; 78
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	ee e4       	ldi	r30, 0x4E	; 78
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	98 2f       	mov	r25, r24
    2a84:	98 7f       	andi	r25, 0xF8	; 248
    2a86:	eb 81       	ldd	r30, Y+3	; 0x03
    2a88:	fc 81       	ldd	r31, Y+4	; 0x04
    2a8a:	85 81       	ldd	r24, Z+5	; 0x05
    2a8c:	89 2b       	or	r24, r25
    2a8e:	8c 93       	st	X, r24
    2a90:	7d c0       	rjmp	.+250    	; 0x2b8c <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == COMPARE_MODE)
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	81 30       	cpi	r24, 0x01	; 1
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <Timer_init+0x112>
    2a98:	79 c0       	rjmp	.+242    	; 0x2b8c <Timer_init+0x204>
		{
			TCNT1 = Config_Ptr -> timer_InitialValue ;		/* Set timer1 initial count  */
    2a9a:	ac e4       	ldi	r26, 0x4C	; 76
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa0:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa2:	80 81       	ld	r24, Z
    2aa4:	91 81       	ldd	r25, Z+1	; 0x01
    2aa6:	11 96       	adiw	r26, 0x01	; 1
    2aa8:	9c 93       	st	X, r25
    2aaa:	8e 93       	st	-X, r24

			OCR1A = Config_Ptr -> timer_compare_MatchValue;    /* Set the Compare value */
    2aac:	aa e4       	ldi	r26, 0x4A	; 74
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ab2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	11 96       	adiw	r26, 0x01	; 1
    2aba:	9c 93       	st	X, r25
    2abc:	8e 93       	st	-X, r24

			TIMSK |= (1<<OCIE1A) ; /* Enable Timer1 Compare A Interrupt */
    2abe:	a9 e5       	ldi	r26, 0x59	; 89
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e9 e5       	ldi	r30, 0x59	; 89
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	80 61       	ori	r24, 0x10	; 16
    2aca:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=1
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2acc:	ef e4       	ldi	r30, 0x4F	; 79
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	8c e0       	ldi	r24, 0x0C	; 12
    2ad2:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 * 2. Prescaler = F_CPU/Prescaler
			 */
			TCCR1B = (1<<WGM12);
    2ad4:	ee e4       	ldi	r30, 0x4E	; 78
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	88 e0       	ldi	r24, 0x08	; 8
    2ada:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    2adc:	ae e4       	ldi	r26, 0x4E	; 78
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ee e4       	ldi	r30, 0x4E	; 78
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	98 2f       	mov	r25, r24
    2ae8:	98 7f       	andi	r25, 0xF8	; 248
    2aea:	eb 81       	ldd	r30, Y+3	; 0x03
    2aec:	fc 81       	ldd	r31, Y+4	; 0x04
    2aee:	85 81       	ldd	r24, Z+5	; 0x05
    2af0:	89 2b       	or	r24, r25
    2af2:	8c 93       	st	X, r24
    2af4:	4b c0       	rjmp	.+150    	; 0x2b8c <Timer_init+0x204>
		}
	}

	/* Timer2 configuration */
	else if (timer_ID == TIMER_2)
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	82 30       	cpi	r24, 0x02	; 2
    2afa:	09 f0       	breq	.+2      	; 0x2afe <Timer_init+0x176>
    2afc:	47 c0       	rjmp	.+142    	; 0x2b8c <Timer_init+0x204>
	{
		/* normal mode configuration */
		if(timer_Mode == NORMAL_MODE)
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	88 23       	and	r24, r24
    2b02:	e1 f4       	brne	.+56     	; 0x2b3c <Timer_init+0x1b4>
		{
			TCNT2 = Config_Ptr -> timer_InitialValue ; /* Set Timer initial value */
    2b04:	a4 e4       	ldi	r26, 0x44	; 68
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0c:	80 81       	ld	r24, Z
    2b0e:	91 81       	ldd	r25, Z+1	; 0x01
    2b10:	8c 93       	st	X, r24

			TIMSK = (1<<TOIE2); /* Enable Timer2 Overflow Interrupt */
    2b12:	e9 e5       	ldi	r30, 0x59	; 89
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 e4       	ldi	r24, 0x40	; 64
    2b18:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal Mode COM20=0 & COM21=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR2 = (1<<FOC2) ;
    2b1a:	e5 e4       	ldi	r30, 0x45	; 69
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 e8       	ldi	r24, 0x80	; 128
    2b20:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock);
    2b22:	a5 e4       	ldi	r26, 0x45	; 69
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e5 e4       	ldi	r30, 0x45	; 69
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	98 2f       	mov	r25, r24
    2b2e:	98 7f       	andi	r25, 0xF8	; 248
    2b30:	eb 81       	ldd	r30, Y+3	; 0x03
    2b32:	fc 81       	ldd	r31, Y+4	; 0x04
    2b34:	85 81       	ldd	r24, Z+5	; 0x05
    2b36:	89 2b       	or	r24, r25
    2b38:	8c 93       	st	X, r24
    2b3a:	28 c0       	rjmp	.+80     	; 0x2b8c <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == COMPARE_MODE)
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	29 f5       	brne	.+74     	; 0x2b8c <Timer_init+0x204>
		{
			TCNT2 = Config_Ptr -> timer_InitialValue ; /* Set Timer Initial Value  */
    2b42:	a4 e4       	ldi	r26, 0x44	; 68
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	eb 81       	ldd	r30, Y+3	; 0x03
    2b48:	fc 81       	ldd	r31, Y+4	; 0x04
    2b4a:	80 81       	ld	r24, Z
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	8c 93       	st	X, r24
			OCR2 = Config_Ptr -> timer_compare_MatchValue; /* Set Compare Value */
    2b50:	a3 e4       	ldi	r26, 0x43	; 67
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	eb 81       	ldd	r30, Y+3	; 0x03
    2b56:	fc 81       	ldd	r31, Y+4	; 0x04
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	93 81       	ldd	r25, Z+3	; 0x03
    2b5c:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE2); /* Enable Timer2 Compare Interrupt */
    2b5e:	a9 e5       	ldi	r26, 0x59	; 89
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e9 e5       	ldi	r30, 0x59	; 89
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	80 68       	ori	r24, 0x80	; 128
    2b6a:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. CTC Mode WGM21=1 & WGM20=0
			 * 3. No need for OC2 so COM20=0 & COM21=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    2b6c:	e5 e4       	ldi	r30, 0x45	; 69
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	88 e8       	ldi	r24, 0x88	; 136
    2b72:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock);
    2b74:	a5 e4       	ldi	r26, 0x45	; 69
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e5 e4       	ldi	r30, 0x45	; 69
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	98 2f       	mov	r25, r24
    2b80:	98 7f       	andi	r25, 0xF8	; 248
    2b82:	eb 81       	ldd	r30, Y+3	; 0x03
    2b84:	fc 81       	ldd	r31, Y+4	; 0x04
    2b86:	85 81       	ldd	r24, Z+5	; 0x05
    2b88:	89 2b       	or	r24, r25
    2b8a:	8c 93       	st	X, r24
		}
	}
}
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <Timer_deInit>:

/* Disables the specified timer and resets its settings. */
void Timer_deInit(Timer_ID_Type timer_type)
{
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <Timer_deInit+0x6>
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_ID = timer_type;
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01

	/* Timer0 deinit */
	if (timer_ID == TIMER_0)
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	88 23       	and	r24, r24
    2bae:	c1 f4       	brne	.+48     	; 0x2be0 <Timer_deInit+0x46>
	{
		TCNT0 = 0; /* Reset Timer value */
    2bb0:	e2 e5       	ldi	r30, 0x52	; 82
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	10 82       	st	Z, r1
		OCR0  = 0; /* Reset Compare value */
    2bb6:	ec e5       	ldi	r30, 0x5C	; 92
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE0); /* Disable Timer0 Overflow Interrupt */
    2bbc:	a9 e5       	ldi	r26, 0x59	; 89
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e9 e5       	ldi	r30, 0x59	; 89
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	8e 7f       	andi	r24, 0xFE	; 254
    2bc8:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE0); /* Disable Timer0 Compare Interrupt */
    2bca:	a9 e5       	ldi	r26, 0x59	; 89
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e9 e5       	ldi	r30, 0x59	; 89
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	8d 7f       	andi	r24, 0xFD	; 253
    2bd6:	8c 93       	st	X, r24
		TCCR0 = 0 ; /* Clear Register */
    2bd8:	e3 e5       	ldi	r30, 0x53	; 83
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	10 82       	st	Z, r1
    2bde:	3a c0       	rjmp	.+116    	; 0x2c54 <Timer_deInit+0xba>
	}

	/* Timer1 deinit */
	else if (timer_ID == TIMER_1)
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	81 30       	cpi	r24, 0x01	; 1
    2be4:	e9 f4       	brne	.+58     	; 0x2c20 <Timer_deInit+0x86>
	{
		TCNT1 = 0;		 /* Reset Timer value */
    2be6:	ec e4       	ldi	r30, 0x4C	; 76
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	11 82       	std	Z+1, r1	; 0x01
    2bec:	10 82       	st	Z, r1
		OCR1A = 0;       /* Reset Compare value */
    2bee:	ea e4       	ldi	r30, 0x4A	; 74
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	11 82       	std	Z+1, r1	; 0x01
    2bf4:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE1) ;   /* Disable Timer1 Overflow Interrupt */
    2bf6:	a9 e5       	ldi	r26, 0x59	; 89
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e9 e5       	ldi	r30, 0x59	; 89
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	8b 7f       	andi	r24, 0xFB	; 251
    2c02:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE1A) ;  /* Disable Timer1 Compare A Interrupt */
    2c04:	a9 e5       	ldi	r26, 0x59	; 89
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e9 e5       	ldi	r30, 0x59	; 89
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	8f 7e       	andi	r24, 0xEF	; 239
    2c10:	8c 93       	st	X, r24
		TCCR1A = 0; /* Clear Register */
    2c12:	ef e4       	ldi	r30, 0x4F	; 79
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	10 82       	st	Z, r1
		TCCR1B = 0; /* Clear Register */
    2c18:	ee e4       	ldi	r30, 0x4E	; 78
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	10 82       	st	Z, r1
    2c1e:	1a c0       	rjmp	.+52     	; 0x2c54 <Timer_deInit+0xba>
	}

	/* Timer2 deinit */
	else if (timer_ID == TIMER_2)
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	82 30       	cpi	r24, 0x02	; 2
    2c24:	b9 f4       	brne	.+46     	; 0x2c54 <Timer_deInit+0xba>
	{
		TCNT2 = 0; /* Reset Timer value */
    2c26:	e4 e4       	ldi	r30, 0x44	; 68
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	10 82       	st	Z, r1
		OCR2  = 0; /* Reset Compare value */
    2c2c:	e3 e4       	ldi	r30, 0x43	; 67
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE2); /* Disable Timer2 Overflow Interrupt */
    2c32:	a9 e5       	ldi	r26, 0x59	; 89
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e9 e5       	ldi	r30, 0x59	; 89
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	8f 7b       	andi	r24, 0xBF	; 191
    2c3e:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE2); /* Disable Timer2 Compare Interrupt */
    2c40:	a9 e5       	ldi	r26, 0x59	; 89
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e9 e5       	ldi	r30, 0x59	; 89
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	8f 77       	andi	r24, 0x7F	; 127
    2c4c:	8c 93       	st	X, r24
		TCCR2 = 0 ; /* Clear Register */
    2c4e:	e5 e4       	ldi	r30, 0x45	; 69
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	10 82       	st	Z, r1
	}
}
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <Timer_setCallBack>:

/* Sets a callback function for the specified timer's interrupt. */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <Timer_setCallBack+0x6>
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <Timer_setCallBack+0x8>
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	9b 83       	std	Y+3, r25	; 0x03
    2c6c:	8a 83       	std	Y+2, r24	; 0x02
    2c6e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 timer_ID = a_timer_ID;
    2c70:	8c 81       	ldd	r24, Y+4	; 0x04
    2c72:	89 83       	std	Y+1, r24	; 0x01

	/* Timer0 callback */
	if (timer_ID == TIMER_0)
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	88 23       	and	r24, r24
    2c78:	39 f4       	brne	.+14     	; 0x2c88 <Timer_setCallBack+0x2a>
	{
		g_callBackPtr0 = a_ptr;
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7e:	90 93 7e 00 	sts	0x007E, r25
    2c82:	80 93 7d 00 	sts	0x007D, r24
    2c86:	13 c0       	rjmp	.+38     	; 0x2cae <Timer_setCallBack+0x50>
	}

	/* Timer1 callback */
	else if (timer_ID == TIMER_1)
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	81 30       	cpi	r24, 0x01	; 1
    2c8c:	39 f4       	brne	.+14     	; 0x2c9c <Timer_setCallBack+0x3e>
	{
		g_callBackPtr1 = a_ptr;
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	9b 81       	ldd	r25, Y+3	; 0x03
    2c92:	90 93 80 00 	sts	0x0080, r25
    2c96:	80 93 7f 00 	sts	0x007F, r24
    2c9a:	09 c0       	rjmp	.+18     	; 0x2cae <Timer_setCallBack+0x50>

	}

	/* Timer2 callback */
	else if (timer_ID == TIMER_2)
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	82 30       	cpi	r24, 0x02	; 2
    2ca0:	31 f4       	brne	.+12     	; 0x2cae <Timer_setCallBack+0x50>
	{
		g_callBackPtr2 = a_ptr;
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	90 93 82 00 	sts	0x0082, r25
    2caa:	80 93 81 00 	sts	0x0081, r24

	}
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <__prologue_saves__>:
    2cbc:	2f 92       	push	r2
    2cbe:	3f 92       	push	r3
    2cc0:	4f 92       	push	r4
    2cc2:	5f 92       	push	r5
    2cc4:	6f 92       	push	r6
    2cc6:	7f 92       	push	r7
    2cc8:	8f 92       	push	r8
    2cca:	9f 92       	push	r9
    2ccc:	af 92       	push	r10
    2cce:	bf 92       	push	r11
    2cd0:	cf 92       	push	r12
    2cd2:	df 92       	push	r13
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	ca 1b       	sub	r28, r26
    2ce6:	db 0b       	sbc	r29, r27
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	09 94       	ijmp

00002cf4 <__epilogue_restores__>:
    2cf4:	2a 88       	ldd	r2, Y+18	; 0x12
    2cf6:	39 88       	ldd	r3, Y+17	; 0x11
    2cf8:	48 88       	ldd	r4, Y+16	; 0x10
    2cfa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cfc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cfe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d00:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d02:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d04:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d06:	b9 84       	ldd	r11, Y+9	; 0x09
    2d08:	c8 84       	ldd	r12, Y+8	; 0x08
    2d0a:	df 80       	ldd	r13, Y+7	; 0x07
    2d0c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d10:	0c 81       	ldd	r16, Y+4	; 0x04
    2d12:	1b 81       	ldd	r17, Y+3	; 0x03
    2d14:	aa 81       	ldd	r26, Y+2	; 0x02
    2d16:	b9 81       	ldd	r27, Y+1	; 0x01
    2d18:	ce 0f       	add	r28, r30
    2d1a:	d1 1d       	adc	r29, r1
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	ed 01       	movw	r28, r26
    2d28:	08 95       	ret

00002d2a <_exit>:
    2d2a:	f8 94       	cli

00002d2c <__stop_program>:
    2d2c:	ff cf       	rjmp	.-2      	; 0x2d2c <__stop_program>
