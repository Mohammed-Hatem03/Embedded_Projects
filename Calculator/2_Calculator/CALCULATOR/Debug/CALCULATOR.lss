
CALCULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00002e7c  00002f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008001a4  008001a4  00003054  2**0
                  ALLOC
  3 .stab         00001c80  00000000  00000000  00003054  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c45  00000000  00000000  00004cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005919  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  00005ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  00005ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  00008372  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  00009843  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000acd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000afcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__ltsf2+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ec e7       	ldi	r30, 0x7C	; 124
     162:	fe e2       	ldi	r31, 0x2E	; 46
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a4 3a       	cpi	r26, 0xA4	; 164
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a4 ea       	ldi	r26, 0xA4	; 164
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a3 3b       	cpi	r26, 0xB3	; 179
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 a9 07 	call	0xf52	; 0xf52 <main>
     184:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 a2 04 	call	0x944	; 0x944 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	ac e9       	ldi	r26, 0x9C	; 156
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8c e9       	ldi	r24, 0x9C	; 156
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6c e9       	ldi	r22, 0x9C	; 156
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__+0x10>

00000884 <__eqsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__eqsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__eqsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__eqsf2+0x58>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__epilogue_restores__+0x18>

000008e4 <__gtsf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gtsf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gtsf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gtsf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__epilogue_restores__+0x18>

00000944 <__gesf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__gesf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__gesf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__gesf2+0x58>
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__epilogue_restores__+0x18>

000009a4 <__ltsf2>:
     9a4:	a8 e1       	ldi	r26, 0x18	; 24
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__prologue_saves__+0x18>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	2d 83       	std	Y+5, r18	; 0x05
     9ba:	3e 83       	std	Y+6, r19	; 0x06
     9bc:	4f 83       	std	Y+7, r20	; 0x07
     9be:	58 87       	std	Y+8, r21	; 0x08
     9c0:	89 e0       	ldi	r24, 0x09	; 9
     9c2:	e8 2e       	mov	r14, r24
     9c4:	f1 2c       	mov	r15, r1
     9c6:	ec 0e       	add	r14, r28
     9c8:	fd 1e       	adc	r15, r29
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	b7 01       	movw	r22, r14
     9d0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9d4:	8e 01       	movw	r16, r28
     9d6:	0f 5e       	subi	r16, 0xEF	; 239
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
     9da:	ce 01       	movw	r24, r28
     9dc:	05 96       	adiw	r24, 0x05	; 5
     9de:	b8 01       	movw	r22, r16
     9e0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	40 f0       	brcs	.+16     	; 0x9fa <__ltsf2+0x56>
     9ea:	89 89       	ldd	r24, Y+17	; 0x11
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	28 f0       	brcs	.+10     	; 0x9fa <__ltsf2+0x56>
     9f0:	c7 01       	movw	r24, r14
     9f2:	b8 01       	movw	r22, r16
     9f4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__ltsf2+0x58>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	68 96       	adiw	r28, 0x18	; 24
     9fe:	e6 e0       	ldi	r30, 0x06	; 6
     a00:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__epilogue_restores__+0x18>

00000a04 <__floatsisf>:
     a04:	a8 e0       	ldi	r26, 0x08	; 8
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e8 e0       	ldi	r30, 0x08	; 8
     a0a:	f5 e0       	ldi	r31, 0x05	; 5
     a0c:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x12>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	da 01       	movw	r26, r20
     a1a:	c9 01       	movw	r24, r18
     a1c:	88 27       	eor	r24, r24
     a1e:	b7 fd       	sbrc	r27, 7
     a20:	83 95       	inc	r24
     a22:	99 27       	eor	r25, r25
     a24:	aa 27       	eor	r26, r26
     a26:	bb 27       	eor	r27, r27
     a28:	b8 2e       	mov	r11, r24
     a2a:	21 15       	cp	r18, r1
     a2c:	31 05       	cpc	r19, r1
     a2e:	41 05       	cpc	r20, r1
     a30:	51 05       	cpc	r21, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__floatsisf+0x36>
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	3a c0       	rjmp	.+116    	; 0xaae <__floatsisf+0xaa>
     a3a:	88 23       	and	r24, r24
     a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x64>
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	38 07       	cpc	r19, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	48 07       	cpc	r20, r24
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	58 07       	cpc	r21, r24
     a4c:	29 f4       	brne	.+10     	; 0xa58 <__floatsisf+0x54>
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	9f ec       	ldi	r25, 0xCF	; 207
     a56:	30 c0       	rjmp	.+96     	; 0xab8 <__floatsisf+0xb4>
     a58:	ee 24       	eor	r14, r14
     a5a:	ff 24       	eor	r15, r15
     a5c:	87 01       	movw	r16, r14
     a5e:	e2 1a       	sub	r14, r18
     a60:	f3 0a       	sbc	r15, r19
     a62:	04 0b       	sbc	r16, r20
     a64:	15 0b       	sbc	r17, r21
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <__floatsisf+0x68>
     a68:	79 01       	movw	r14, r18
     a6a:	8a 01       	movw	r16, r20
     a6c:	8e e1       	ldi	r24, 0x1E	; 30
     a6e:	c8 2e       	mov	r12, r24
     a70:	d1 2c       	mov	r13, r1
     a72:	dc 82       	std	Y+4, r13	; 0x04
     a74:	cb 82       	std	Y+3, r12	; 0x03
     a76:	ed 82       	std	Y+5, r14	; 0x05
     a78:	fe 82       	std	Y+6, r15	; 0x06
     a7a:	0f 83       	std	Y+7, r16	; 0x07
     a7c:	18 87       	std	Y+8, r17	; 0x08
     a7e:	c8 01       	movw	r24, r16
     a80:	b7 01       	movw	r22, r14
     a82:	0e 94 b4 05 	call	0xb68	; 0xb68 <__clzsi2>
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	18 16       	cp	r1, r24
     a8a:	19 06       	cpc	r1, r25
     a8c:	84 f4       	brge	.+32     	; 0xaae <__floatsisf+0xaa>
     a8e:	08 2e       	mov	r0, r24
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <__floatsisf+0x96>
     a92:	ee 0c       	add	r14, r14
     a94:	ff 1c       	adc	r15, r15
     a96:	00 1f       	adc	r16, r16
     a98:	11 1f       	adc	r17, r17
     a9a:	0a 94       	dec	r0
     a9c:	d2 f7       	brpl	.-12     	; 0xa92 <__floatsisf+0x8e>
     a9e:	ed 82       	std	Y+5, r14	; 0x05
     aa0:	fe 82       	std	Y+6, r15	; 0x06
     aa2:	0f 83       	std	Y+7, r16	; 0x07
     aa4:	18 87       	std	Y+8, r17	; 0x08
     aa6:	c8 1a       	sub	r12, r24
     aa8:	d9 0a       	sbc	r13, r25
     aaa:	dc 82       	std	Y+4, r13	; 0x04
     aac:	cb 82       	std	Y+3, r12	; 0x03
     aae:	ba 82       	std	Y+2, r11	; 0x02
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     ab8:	28 96       	adiw	r28, 0x08	; 8
     aba:	e9 e0       	ldi	r30, 0x09	; 9
     abc:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x12>

00000ac0 <__fixsfsi>:
     ac0:	ac e0       	ldi	r26, 0x0C	; 12
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e6 e6       	ldi	r30, 0x66	; 102
     ac6:	f5 e0       	ldi	r31, 0x05	; 5
     ac8:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__prologue_saves__+0x20>
     acc:	69 83       	std	Y+1, r22	; 0x01
     ace:	7a 83       	std	Y+2, r23	; 0x02
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	be 01       	movw	r22, r28
     ada:	6b 5f       	subi	r22, 0xFB	; 251
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	61 f1       	breq	.+88     	; 0xb40 <__fixsfsi+0x80>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	50 f1       	brcs	.+84     	; 0xb40 <__fixsfsi+0x80>
     aec:	84 30       	cpi	r24, 0x04	; 4
     aee:	21 f4       	brne	.+8      	; 0xaf8 <__fixsfsi+0x38>
     af0:	8e 81       	ldd	r24, Y+6	; 0x06
     af2:	88 23       	and	r24, r24
     af4:	51 f1       	breq	.+84     	; 0xb4a <__fixsfsi+0x8a>
     af6:	2e c0       	rjmp	.+92     	; 0xb54 <__fixsfsi+0x94>
     af8:	2f 81       	ldd	r18, Y+7	; 0x07
     afa:	38 85       	ldd	r19, Y+8	; 0x08
     afc:	37 fd       	sbrc	r19, 7
     afe:	20 c0       	rjmp	.+64     	; 0xb40 <__fixsfsi+0x80>
     b00:	6e 81       	ldd	r22, Y+6	; 0x06
     b02:	2f 31       	cpi	r18, 0x1F	; 31
     b04:	31 05       	cpc	r19, r1
     b06:	1c f0       	brlt	.+6      	; 0xb0e <__fixsfsi+0x4e>
     b08:	66 23       	and	r22, r22
     b0a:	f9 f0       	breq	.+62     	; 0xb4a <__fixsfsi+0x8a>
     b0c:	23 c0       	rjmp	.+70     	; 0xb54 <__fixsfsi+0x94>
     b0e:	8e e1       	ldi	r24, 0x1E	; 30
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 1b       	sub	r24, r18
     b14:	93 0b       	sbc	r25, r19
     b16:	29 85       	ldd	r18, Y+9	; 0x09
     b18:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b1c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fixsfsi+0x68>
     b20:	56 95       	lsr	r21
     b22:	47 95       	ror	r20
     b24:	37 95       	ror	r19
     b26:	27 95       	ror	r18
     b28:	8a 95       	dec	r24
     b2a:	d2 f7       	brpl	.-12     	; 0xb20 <__fixsfsi+0x60>
     b2c:	66 23       	and	r22, r22
     b2e:	b1 f0       	breq	.+44     	; 0xb5c <__fixsfsi+0x9c>
     b30:	50 95       	com	r21
     b32:	40 95       	com	r20
     b34:	30 95       	com	r19
     b36:	21 95       	neg	r18
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	4f 4f       	sbci	r20, 0xFF	; 255
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <__fixsfsi+0x9c>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <__fixsfsi+0x9c>
     b4a:	2f ef       	ldi	r18, 0xFF	; 255
     b4c:	3f ef       	ldi	r19, 0xFF	; 255
     b4e:	4f ef       	ldi	r20, 0xFF	; 255
     b50:	5f e7       	ldi	r21, 0x7F	; 127
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__fixsfsi+0x9c>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e8       	ldi	r21, 0x80	; 128
     b5c:	b9 01       	movw	r22, r18
     b5e:	ca 01       	movw	r24, r20
     b60:	2c 96       	adiw	r28, 0x0c	; 12
     b62:	e2 e0       	ldi	r30, 0x02	; 2
     b64:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__epilogue_restores__+0x20>

00000b68 <__clzsi2>:
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	7b 01       	movw	r14, r22
     b72:	8c 01       	movw	r16, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	e8 16       	cp	r14, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	f8 06       	cpc	r15, r24
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	08 07       	cpc	r16, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	18 07       	cpc	r17, r24
     b84:	88 f4       	brcc	.+34     	; 0xba8 <__clzsi2+0x40>
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	e8 16       	cp	r14, r24
     b8a:	f1 04       	cpc	r15, r1
     b8c:	01 05       	cpc	r16, r1
     b8e:	11 05       	cpc	r17, r1
     b90:	31 f0       	breq	.+12     	; 0xb9e <__clzsi2+0x36>
     b92:	28 f0       	brcs	.+10     	; 0xb9e <__clzsi2+0x36>
     b94:	88 e0       	ldi	r24, 0x08	; 8
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	17 c0       	rjmp	.+46     	; 0xbcc <__clzsi2+0x64>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <__clzsi2+0x64>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	e8 16       	cp	r14, r24
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	f8 06       	cpc	r15, r24
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	08 07       	cpc	r16, r24
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	18 07       	cpc	r17, r24
     bb8:	28 f0       	brcs	.+10     	; 0xbc4 <__clzsi2+0x5c>
     bba:	88 e1       	ldi	r24, 0x18	; 24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__clzsi2+0x64>
     bc4:	80 e1       	ldi	r24, 0x10	; 16
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	20 e2       	ldi	r18, 0x20	; 32
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	28 1b       	sub	r18, r24
     bd6:	39 0b       	sbc	r19, r25
     bd8:	4a 0b       	sbc	r20, r26
     bda:	5b 0b       	sbc	r21, r27
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__clzsi2+0x7e>
     bde:	16 95       	lsr	r17
     be0:	07 95       	ror	r16
     be2:	f7 94       	ror	r15
     be4:	e7 94       	ror	r14
     be6:	8a 95       	dec	r24
     be8:	d2 f7       	brpl	.-12     	; 0xbde <__clzsi2+0x76>
     bea:	f7 01       	movw	r30, r14
     bec:	ec 55       	subi	r30, 0x5C	; 92
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	80 81       	ld	r24, Z
     bf2:	28 1b       	sub	r18, r24
     bf4:	31 09       	sbc	r19, r1
     bf6:	41 09       	sbc	r20, r1
     bf8:	51 09       	sbc	r21, r1
     bfa:	c9 01       	movw	r24, r18
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	08 95       	ret

00000c06 <__pack_f>:
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	fc 01       	movw	r30, r24
     c12:	e4 80       	ldd	r14, Z+4	; 0x04
     c14:	f5 80       	ldd	r15, Z+5	; 0x05
     c16:	06 81       	ldd	r16, Z+6	; 0x06
     c18:	17 81       	ldd	r17, Z+7	; 0x07
     c1a:	d1 80       	ldd	r13, Z+1	; 0x01
     c1c:	80 81       	ld	r24, Z
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	48 f4       	brcc	.+18     	; 0xc34 <__pack_f+0x2e>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e1       	ldi	r26, 0x10	; 16
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 2a       	or	r14, r24
     c2c:	f9 2a       	or	r15, r25
     c2e:	0a 2b       	or	r16, r26
     c30:	1b 2b       	or	r17, r27
     c32:	a5 c0       	rjmp	.+330    	; 0xd7e <__pack_f+0x178>
     c34:	84 30       	cpi	r24, 0x04	; 4
     c36:	09 f4       	brne	.+2      	; 0xc3a <__pack_f+0x34>
     c38:	9f c0       	rjmp	.+318    	; 0xd78 <__pack_f+0x172>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	21 f4       	brne	.+8      	; 0xc46 <__pack_f+0x40>
     c3e:	ee 24       	eor	r14, r14
     c40:	ff 24       	eor	r15, r15
     c42:	87 01       	movw	r16, r14
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <__pack_f+0x4a>
     c46:	e1 14       	cp	r14, r1
     c48:	f1 04       	cpc	r15, r1
     c4a:	01 05       	cpc	r16, r1
     c4c:	11 05       	cpc	r17, r1
     c4e:	19 f4       	brne	.+6      	; 0xc56 <__pack_f+0x50>
     c50:	e0 e0       	ldi	r30, 0x00	; 0
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	96 c0       	rjmp	.+300    	; 0xd82 <__pack_f+0x17c>
     c56:	62 81       	ldd	r22, Z+2	; 0x02
     c58:	73 81       	ldd	r23, Z+3	; 0x03
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	62 38       	cpi	r22, 0x82	; 130
     c5e:	79 07       	cpc	r23, r25
     c60:	0c f0       	brlt	.+2      	; 0xc64 <__pack_f+0x5e>
     c62:	5b c0       	rjmp	.+182    	; 0xd1a <__pack_f+0x114>
     c64:	22 e8       	ldi	r18, 0x82	; 130
     c66:	3f ef       	ldi	r19, 0xFF	; 255
     c68:	26 1b       	sub	r18, r22
     c6a:	37 0b       	sbc	r19, r23
     c6c:	2a 31       	cpi	r18, 0x1A	; 26
     c6e:	31 05       	cpc	r19, r1
     c70:	2c f0       	brlt	.+10     	; 0xc7c <__pack_f+0x76>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	2a c0       	rjmp	.+84     	; 0xcd0 <__pack_f+0xca>
     c7c:	b8 01       	movw	r22, r16
     c7e:	a7 01       	movw	r20, r14
     c80:	02 2e       	mov	r0, r18
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__pack_f+0x86>
     c84:	76 95       	lsr	r23
     c86:	67 95       	ror	r22
     c88:	57 95       	ror	r21
     c8a:	47 95       	ror	r20
     c8c:	0a 94       	dec	r0
     c8e:	d2 f7       	brpl	.-12     	; 0xc84 <__pack_f+0x7e>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <__pack_f+0x9c>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	aa 1f       	adc	r26, r26
     ca0:	bb 1f       	adc	r27, r27
     ca2:	2a 95       	dec	r18
     ca4:	d2 f7       	brpl	.-12     	; 0xc9a <__pack_f+0x94>
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	a1 09       	sbc	r26, r1
     caa:	b1 09       	sbc	r27, r1
     cac:	8e 21       	and	r24, r14
     cae:	9f 21       	and	r25, r15
     cb0:	a0 23       	and	r26, r16
     cb2:	b1 23       	and	r27, r17
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	21 f0       	breq	.+8      	; 0xcc4 <__pack_f+0xbe>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	9a 01       	movw	r18, r20
     cc6:	ab 01       	movw	r20, r22
     cc8:	28 2b       	or	r18, r24
     cca:	39 2b       	or	r19, r25
     ccc:	4a 2b       	or	r20, r26
     cce:	5b 2b       	or	r21, r27
     cd0:	da 01       	movw	r26, r20
     cd2:	c9 01       	movw	r24, r18
     cd4:	8f 77       	andi	r24, 0x7F	; 127
     cd6:	90 70       	andi	r25, 0x00	; 0
     cd8:	a0 70       	andi	r26, 0x00	; 0
     cda:	b0 70       	andi	r27, 0x00	; 0
     cdc:	80 34       	cpi	r24, 0x40	; 64
     cde:	91 05       	cpc	r25, r1
     ce0:	a1 05       	cpc	r26, r1
     ce2:	b1 05       	cpc	r27, r1
     ce4:	39 f4       	brne	.+14     	; 0xcf4 <__pack_f+0xee>
     ce6:	27 ff       	sbrs	r18, 7
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <__pack_f+0xf6>
     cea:	20 5c       	subi	r18, 0xC0	; 192
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	4f 4f       	sbci	r20, 0xFF	; 255
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <__pack_f+0xf6>
     cf4:	21 5c       	subi	r18, 0xC1	; 193
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	4f 4f       	sbci	r20, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	20 30       	cpi	r18, 0x00	; 0
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	3a 07       	cpc	r19, r26
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	4a 07       	cpc	r20, r26
     d0a:	a0 e4       	ldi	r26, 0x40	; 64
     d0c:	5a 07       	cpc	r21, r26
     d0e:	10 f0       	brcs	.+4      	; 0xd14 <__pack_f+0x10e>
     d10:	e1 e0       	ldi	r30, 0x01	; 1
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	79 01       	movw	r14, r18
     d16:	8a 01       	movw	r16, r20
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <__pack_f+0x162>
     d1a:	60 38       	cpi	r22, 0x80	; 128
     d1c:	71 05       	cpc	r23, r1
     d1e:	64 f5       	brge	.+88     	; 0xd78 <__pack_f+0x172>
     d20:	fb 01       	movw	r30, r22
     d22:	e1 58       	subi	r30, 0x81	; 129
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	d8 01       	movw	r26, r16
     d28:	c7 01       	movw	r24, r14
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	a0 70       	andi	r26, 0x00	; 0
     d30:	b0 70       	andi	r27, 0x00	; 0
     d32:	80 34       	cpi	r24, 0x40	; 64
     d34:	91 05       	cpc	r25, r1
     d36:	a1 05       	cpc	r26, r1
     d38:	b1 05       	cpc	r27, r1
     d3a:	39 f4       	brne	.+14     	; 0xd4a <__pack_f+0x144>
     d3c:	e7 fe       	sbrs	r14, 7
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <__pack_f+0x154>
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <__pack_f+0x14c>
     d4a:	8f e3       	ldi	r24, 0x3F	; 63
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e8 0e       	add	r14, r24
     d54:	f9 1e       	adc	r15, r25
     d56:	0a 1f       	adc	r16, r26
     d58:	1b 1f       	adc	r17, r27
     d5a:	17 ff       	sbrs	r17, 7
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__pack_f+0x162>
     d5e:	16 95       	lsr	r17
     d60:	07 95       	ror	r16
     d62:	f7 94       	ror	r15
     d64:	e7 94       	ror	r14
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	87 e0       	ldi	r24, 0x07	; 7
     d6a:	16 95       	lsr	r17
     d6c:	07 95       	ror	r16
     d6e:	f7 94       	ror	r15
     d70:	e7 94       	ror	r14
     d72:	8a 95       	dec	r24
     d74:	d1 f7       	brne	.-12     	; 0xd6a <__pack_f+0x164>
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <__pack_f+0x17c>
     d78:	ee 24       	eor	r14, r14
     d7a:	ff 24       	eor	r15, r15
     d7c:	87 01       	movw	r16, r14
     d7e:	ef ef       	ldi	r30, 0xFF	; 255
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	6e 2f       	mov	r22, r30
     d84:	67 95       	ror	r22
     d86:	66 27       	eor	r22, r22
     d88:	67 95       	ror	r22
     d8a:	90 2f       	mov	r25, r16
     d8c:	9f 77       	andi	r25, 0x7F	; 127
     d8e:	d7 94       	ror	r13
     d90:	dd 24       	eor	r13, r13
     d92:	d7 94       	ror	r13
     d94:	8e 2f       	mov	r24, r30
     d96:	86 95       	lsr	r24
     d98:	49 2f       	mov	r20, r25
     d9a:	46 2b       	or	r20, r22
     d9c:	58 2f       	mov	r21, r24
     d9e:	5d 29       	or	r21, r13
     da0:	b7 01       	movw	r22, r14
     da2:	ca 01       	movw	r24, r20
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	08 95       	ret

00000db0 <__unpack_f>:
     db0:	fc 01       	movw	r30, r24
     db2:	db 01       	movw	r26, r22
     db4:	40 81       	ld	r20, Z
     db6:	51 81       	ldd	r21, Z+1	; 0x01
     db8:	22 81       	ldd	r18, Z+2	; 0x02
     dba:	62 2f       	mov	r22, r18
     dbc:	6f 77       	andi	r22, 0x7F	; 127
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	22 1f       	adc	r18, r18
     dc2:	22 27       	eor	r18, r18
     dc4:	22 1f       	adc	r18, r18
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	89 2f       	mov	r24, r25
     dca:	88 0f       	add	r24, r24
     dcc:	82 2b       	or	r24, r18
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	99 1f       	adc	r25, r25
     dd4:	99 27       	eor	r25, r25
     dd6:	99 1f       	adc	r25, r25
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	9c 93       	st	X, r25
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	21 15       	cp	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	a9 f5       	brne	.+106    	; 0xe4e <__unpack_f+0x9e>
     de4:	41 15       	cp	r20, r1
     de6:	51 05       	cpc	r21, r1
     de8:	61 05       	cpc	r22, r1
     dea:	71 05       	cpc	r23, r1
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__unpack_f+0x42>
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	37 c0       	rjmp	.+110    	; 0xe60 <__unpack_f+0xb0>
     df2:	82 e8       	ldi	r24, 0x82	; 130
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	13 96       	adiw	r26, 0x03	; 3
     df8:	9c 93       	st	X, r25
     dfa:	8e 93       	st	-X, r24
     dfc:	12 97       	sbiw	r26, 0x02	; 2
     dfe:	9a 01       	movw	r18, r20
     e00:	ab 01       	movw	r20, r22
     e02:	67 e0       	ldi	r22, 0x07	; 7
     e04:	22 0f       	add	r18, r18
     e06:	33 1f       	adc	r19, r19
     e08:	44 1f       	adc	r20, r20
     e0a:	55 1f       	adc	r21, r21
     e0c:	6a 95       	dec	r22
     e0e:	d1 f7       	brne	.-12     	; 0xe04 <__unpack_f+0x54>
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	8c 93       	st	X, r24
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <__unpack_f+0x80>
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	44 1f       	adc	r20, r20
     e1c:	55 1f       	adc	r21, r21
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	8d 91       	ld	r24, X+
     e22:	9c 91       	ld	r25, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	13 96       	adiw	r26, 0x03	; 3
     e2a:	9c 93       	st	X, r25
     e2c:	8e 93       	st	-X, r24
     e2e:	12 97       	sbiw	r26, 0x02	; 2
     e30:	20 30       	cpi	r18, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	38 07       	cpc	r19, r24
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	48 07       	cpc	r20, r24
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	58 07       	cpc	r21, r24
     e3e:	58 f3       	brcs	.-42     	; 0xe16 <__unpack_f+0x66>
     e40:	14 96       	adiw	r26, 0x04	; 4
     e42:	2d 93       	st	X+, r18
     e44:	3d 93       	st	X+, r19
     e46:	4d 93       	st	X+, r20
     e48:	5c 93       	st	X, r21
     e4a:	17 97       	sbiw	r26, 0x07	; 7
     e4c:	08 95       	ret
     e4e:	2f 3f       	cpi	r18, 0xFF	; 255
     e50:	31 05       	cpc	r19, r1
     e52:	79 f4       	brne	.+30     	; 0xe72 <__unpack_f+0xc2>
     e54:	41 15       	cp	r20, r1
     e56:	51 05       	cpc	r21, r1
     e58:	61 05       	cpc	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	19 f4       	brne	.+6      	; 0xe64 <__unpack_f+0xb4>
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	8c 93       	st	X, r24
     e62:	08 95       	ret
     e64:	64 ff       	sbrs	r22, 4
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <__unpack_f+0xbe>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	8c 93       	st	X, r24
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <__unpack_f+0xe2>
     e6e:	1c 92       	st	X, r1
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <__unpack_f+0xe2>
     e72:	2f 57       	subi	r18, 0x7F	; 127
     e74:	30 40       	sbci	r19, 0x00	; 0
     e76:	13 96       	adiw	r26, 0x03	; 3
     e78:	3c 93       	st	X, r19
     e7a:	2e 93       	st	-X, r18
     e7c:	12 97       	sbiw	r26, 0x02	; 2
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	8c 93       	st	X, r24
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	44 0f       	add	r20, r20
     e86:	55 1f       	adc	r21, r21
     e88:	66 1f       	adc	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	8a 95       	dec	r24
     e8e:	d1 f7       	brne	.-12     	; 0xe84 <__unpack_f+0xd4>
     e90:	70 64       	ori	r23, 0x40	; 64
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	4d 93       	st	X+, r20
     e96:	5d 93       	st	X+, r21
     e98:	6d 93       	st	X+, r22
     e9a:	7c 93       	st	X, r23
     e9c:	17 97       	sbiw	r26, 0x07	; 7
     e9e:	08 95       	ret

00000ea0 <__fpcmp_parts_f>:
     ea0:	1f 93       	push	r17
     ea2:	dc 01       	movw	r26, r24
     ea4:	fb 01       	movw	r30, r22
     ea6:	9c 91       	ld	r25, X
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0xe>
     eac:	47 c0       	rjmp	.+142    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eae:	80 81       	ld	r24, Z
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <__fpcmp_parts_f+0x16>
     eb4:	43 c0       	rjmp	.+134    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eb6:	94 30       	cpi	r25, 0x04	; 4
     eb8:	51 f4       	brne	.+20     	; 0xece <__fpcmp_parts_f+0x2e>
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	1c 91       	ld	r17, X
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	99 f5       	brne	.+102    	; 0xf28 <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	68 2f       	mov	r22, r24
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	61 1b       	sub	r22, r17
     eca:	71 09       	sbc	r23, r1
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <__fpcmp_parts_f+0xac>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	21 f0       	breq	.+8      	; 0xeda <__fpcmp_parts_f+0x3a>
     ed2:	92 30       	cpi	r25, 0x02	; 2
     ed4:	31 f4       	brne	.+12     	; 0xee2 <__fpcmp_parts_f+0x42>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	b9 f1       	breq	.+110    	; 0xf48 <__fpcmp_parts_f+0xa8>
     eda:	81 81       	ldd	r24, Z+1	; 0x01
     edc:	88 23       	and	r24, r24
     ede:	89 f1       	breq	.+98     	; 0xf42 <__fpcmp_parts_f+0xa2>
     ee0:	2d c0       	rjmp	.+90     	; 0xf3c <__fpcmp_parts_f+0x9c>
     ee2:	11 96       	adiw	r26, 0x01	; 1
     ee4:	1c 91       	ld	r17, X
     ee6:	11 97       	sbiw	r26, 0x01	; 1
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	f1 f0       	breq	.+60     	; 0xf28 <__fpcmp_parts_f+0x88>
     eec:	81 81       	ldd	r24, Z+1	; 0x01
     eee:	18 17       	cp	r17, r24
     ef0:	d9 f4       	brne	.+54     	; 0xf28 <__fpcmp_parts_f+0x88>
     ef2:	12 96       	adiw	r26, 0x02	; 2
     ef4:	2d 91       	ld	r18, X+
     ef6:	3c 91       	ld	r19, X
     ef8:	13 97       	sbiw	r26, 0x03	; 3
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	82 17       	cp	r24, r18
     f00:	93 07       	cpc	r25, r19
     f02:	94 f0       	brlt	.+36     	; 0xf28 <__fpcmp_parts_f+0x88>
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	bc f0       	brlt	.+46     	; 0xf38 <__fpcmp_parts_f+0x98>
     f0a:	14 96       	adiw	r26, 0x04	; 4
     f0c:	8d 91       	ld	r24, X+
     f0e:	9d 91       	ld	r25, X+
     f10:	0d 90       	ld	r0, X+
     f12:	bc 91       	ld	r27, X
     f14:	a0 2d       	mov	r26, r0
     f16:	24 81       	ldd	r18, Z+4	; 0x04
     f18:	35 81       	ldd	r19, Z+5	; 0x05
     f1a:	46 81       	ldd	r20, Z+6	; 0x06
     f1c:	57 81       	ldd	r21, Z+7	; 0x07
     f1e:	28 17       	cp	r18, r24
     f20:	39 07       	cpc	r19, r25
     f22:	4a 07       	cpc	r20, r26
     f24:	5b 07       	cpc	r21, r27
     f26:	18 f4       	brcc	.+6      	; 0xf2e <__fpcmp_parts_f+0x8e>
     f28:	11 23       	and	r17, r17
     f2a:	41 f0       	breq	.+16     	; 0xf3c <__fpcmp_parts_f+0x9c>
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <__fpcmp_parts_f+0xa2>
     f2e:	82 17       	cp	r24, r18
     f30:	93 07       	cpc	r25, r19
     f32:	a4 07       	cpc	r26, r20
     f34:	b5 07       	cpc	r27, r21
     f36:	40 f4       	brcc	.+16     	; 0xf48 <__fpcmp_parts_f+0xa8>
     f38:	11 23       	and	r17, r17
     f3a:	19 f0       	breq	.+6      	; 0xf42 <__fpcmp_parts_f+0xa2>
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <__fpcmp_parts_f+0xac>
     f42:	6f ef       	ldi	r22, 0xFF	; 255
     f44:	7f ef       	ldi	r23, 0xFF	; 255
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <__fpcmp_parts_f+0xac>
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	cb 01       	movw	r24, r22
     f4e:	1f 91       	pop	r17
     f50:	08 95       	ret

00000f52 <main>:
//		LCD_displayStringRowColumn(1,0,"          ");
//		LCD_displayStringRowColumn(1,0,"NO OPERATOR!");
//	}
//}

int main(void){
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	6e 97       	sbiw	r28, 0x1e	; 30
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
     f6e:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_init>
	LCD_displayStringRowColumn(0,2,"Calculator ON");
     f72:	20 e6       	ldi	r18, 0x60	; 96
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	62 e0       	ldi	r22, 0x02	; 2
     f7a:	a9 01       	movw	r20, r18
     f7c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_displayStringRowColumn>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	aa e7       	ldi	r26, 0x7A	; 122
     f86:	b4 e4       	ldi	r27, 0x44	; 68
     f88:	89 8f       	std	Y+25, r24	; 0x19
     f8a:	9a 8f       	std	Y+26, r25	; 0x1a
     f8c:	ab 8f       	std	Y+27, r26	; 0x1b
     f8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f90:	69 8d       	ldd	r22, Y+25	; 0x19
     f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	4a e7       	ldi	r20, 0x7A	; 122
     f9e:	55 e4       	ldi	r21, 0x45	; 69
     fa0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	8d 8b       	std	Y+21, r24	; 0x15
     faa:	9e 8b       	std	Y+22, r25	; 0x16
     fac:	af 8b       	std	Y+23, r26	; 0x17
     fae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb0:	6d 89       	ldd	r22, Y+21	; 0x15
     fb2:	7e 89       	ldd	r23, Y+22	; 0x16
     fb4:	8f 89       	ldd	r24, Y+23	; 0x17
     fb6:	98 8d       	ldd	r25, Y+24	; 0x18
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <main+0x80>
		__ticks = 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9c 8b       	std	Y+20, r25	; 0x14
     fce:	8b 8b       	std	Y+19, r24	; 0x13
     fd0:	3f c0       	rjmp	.+126    	; 0x1050 <main+0xfe>
	else if (__tmp > 65535)
     fd2:	6d 89       	ldd	r22, Y+21	; 0x15
     fd4:	7e 89       	ldd	r23, Y+22	; 0x16
     fd6:	8f 89       	ldd	r24, Y+23	; 0x17
     fd8:	98 8d       	ldd	r25, Y+24	; 0x18
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	3f ef       	ldi	r19, 0xFF	; 255
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	57 e4       	ldi	r21, 0x47	; 71
     fe2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	4c f5       	brge	.+82     	; 0x103c <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	69 8d       	ldd	r22, Y+25	; 0x19
     fec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e2       	ldi	r20, 0x20	; 32
     ff8:	51 e4       	ldi	r21, 0x41	; 65
     ffa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9c 8b       	std	Y+20, r25	; 0x14
    1010:	8b 8b       	std	Y+19, r24	; 0x13
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <main+0xe0>
    1014:	80 e9       	ldi	r24, 0x90	; 144
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	9a 8b       	std	Y+18, r25	; 0x12
    101a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    101c:	89 89       	ldd	r24, Y+17	; 0x11
    101e:	9a 89       	ldd	r25, Y+18	; 0x12
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <main+0xce>
    1024:	9a 8b       	std	Y+18, r25	; 0x12
    1026:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	8b 89       	ldd	r24, Y+19	; 0x13
    102a:	9c 89       	ldd	r25, Y+20	; 0x14
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	9c 8b       	std	Y+20, r25	; 0x14
    1030:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	8b 89       	ldd	r24, Y+19	; 0x13
    1034:	9c 89       	ldd	r25, Y+20	; 0x14
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	69 f7       	brne	.-38     	; 0x1014 <main+0xc2>
    103a:	14 c0       	rjmp	.+40     	; 0x1064 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103c:	6d 89       	ldd	r22, Y+21	; 0x15
    103e:	7e 89       	ldd	r23, Y+22	; 0x16
    1040:	8f 89       	ldd	r24, Y+23	; 0x17
    1042:	98 8d       	ldd	r25, Y+24	; 0x18
    1044:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	9c 8b       	std	Y+20, r25	; 0x14
    104e:	8b 8b       	std	Y+19, r24	; 0x13
    1050:	8b 89       	ldd	r24, Y+19	; 0x13
    1052:	9c 89       	ldd	r25, Y+20	; 0x14
    1054:	98 8b       	std	Y+16, r25	; 0x10
    1056:	8f 87       	std	Y+15, r24	; 0x0f
    1058:	8f 85       	ldd	r24, Y+15	; 0x0f
    105a:	98 89       	ldd	r25, Y+16	; 0x10
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <main+0x10a>
    1060:	98 8b       	std	Y+16, r25	; 0x10
    1062:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_clearScreen();
    1064:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <LCD_clearScreen>

	while(1)
	{
		key = KEYPAD_getPressedKey();
    1068:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <KEYPAD_getPressedKey>
    106c:	80 93 b2 01 	sts	0x01B2, r24
		if((key<=9) && (key>=0))
    1070:	80 91 b2 01 	lds	r24, 0x01B2
    1074:	8a 30       	cpi	r24, 0x0A	; 10
    1076:	b8 f5       	brcc	.+110    	; 0x10e6 <main+0x194>
		{
			LCD_intgerToString(key);
    1078:	80 91 b2 01 	lds	r24, 0x01B2
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_intgerToString>
			num2=(num2*10)+key;
    1084:	80 91 a8 01 	lds	r24, 0x01A8
    1088:	90 91 a9 01 	lds	r25, 0x01A9
    108c:	a0 91 aa 01 	lds	r26, 0x01AA
    1090:	b0 91 ab 01 	lds	r27, 0x01AB
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e2       	ldi	r20, 0x20	; 32
    109e:	51 e4       	ldi	r21, 0x41	; 65
    10a0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	7c 01       	movw	r14, r24
    10aa:	8d 01       	movw	r16, r26
    10ac:	80 91 b2 01 	lds	r24, 0x01B2
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	aa 27       	eor	r26, r26
    10b6:	97 fd       	sbrc	r25, 7
    10b8:	a0 95       	com	r26
    10ba:	ba 2f       	mov	r27, r26
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    10c4:	9b 01       	movw	r18, r22
    10c6:	ac 01       	movw	r20, r24
    10c8:	c8 01       	movw	r24, r16
    10ca:	b7 01       	movw	r22, r14
    10cc:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	80 93 a8 01 	sts	0x01A8, r24
    10d8:	90 93 a9 01 	sts	0x01A9, r25
    10dc:	a0 93 aa 01 	sts	0x01AA, r26
    10e0:	b0 93 ab 01 	sts	0x01AB, r27
    10e4:	54 c1       	rjmp	.+680    	; 0x138e <main+0x43c>
		}
		else if ((key == ADDITION) || (key == SUBTRACTION) || (key == MULTIPLICATION) || (key == DIVISION))
    10e6:	80 91 b2 01 	lds	r24, 0x01B2
    10ea:	8b 32       	cpi	r24, 0x2B	; 43
    10ec:	61 f0       	breq	.+24     	; 0x1106 <main+0x1b4>
    10ee:	80 91 b2 01 	lds	r24, 0x01B2
    10f2:	8d 32       	cpi	r24, 0x2D	; 45
    10f4:	41 f0       	breq	.+16     	; 0x1106 <main+0x1b4>
    10f6:	80 91 b2 01 	lds	r24, 0x01B2
    10fa:	8a 32       	cpi	r24, 0x2A	; 42
    10fc:	21 f0       	breq	.+8      	; 0x1106 <main+0x1b4>
    10fe:	80 91 b2 01 	lds	r24, 0x01B2
    1102:	8f 32       	cpi	r24, 0x2F	; 47
    1104:	29 f5       	brne	.+74     	; 0x1150 <main+0x1fe>
		{
			LCD_displayCharacter(key);
    1106:	80 91 b2 01 	lds	r24, 0x01B2
    110a:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayCharacter>
			operator = key;
    110e:	80 91 b2 01 	lds	r24, 0x01B2
    1112:	80 93 b0 01 	sts	0x01B0, r24
			num1 = num2;
    1116:	80 91 a8 01 	lds	r24, 0x01A8
    111a:	90 91 a9 01 	lds	r25, 0x01A9
    111e:	a0 91 aa 01 	lds	r26, 0x01AA
    1122:	b0 91 ab 01 	lds	r27, 0x01AB
    1126:	80 93 a4 01 	sts	0x01A4, r24
    112a:	90 93 a5 01 	sts	0x01A5, r25
    112e:	a0 93 a6 01 	sts	0x01A6, r26
    1132:	b0 93 a7 01 	sts	0x01A7, r27
			num2=0;
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 e0       	ldi	r26, 0x00	; 0
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	80 93 a8 01 	sts	0x01A8, r24
    1142:	90 93 a9 01 	sts	0x01A9, r25
    1146:	a0 93 aa 01 	sts	0x01AA, r26
    114a:	b0 93 ab 01 	sts	0x01AB, r27
    114e:	1f c1       	rjmp	.+574    	; 0x138e <main+0x43c>

		}
		else if(key == EQUAL)
    1150:	80 91 b2 01 	lds	r24, 0x01B2
    1154:	8d 33       	cpi	r24, 0x3D	; 61
    1156:	09 f0       	breq	.+2      	; 0x115a <main+0x208>
    1158:	ea c0       	rjmp	.+468    	; 0x132e <main+0x3dc>
		{
			switch(operator)
    115a:	80 91 b0 01 	lds	r24, 0x01B0
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3e 8f       	std	Y+30, r19	; 0x1e
    1164:	2d 8f       	std	Y+29, r18	; 0x1d
    1166:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1168:	9e 8d       	ldd	r25, Y+30	; 0x1e
    116a:	8b 32       	cpi	r24, 0x2B	; 43
    116c:	91 05       	cpc	r25, r1
    116e:	c1 f0       	breq	.+48     	; 0x11a0 <main+0x24e>
    1170:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1172:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1174:	2c 32       	cpi	r18, 0x2C	; 44
    1176:	31 05       	cpc	r19, r1
    1178:	3c f4       	brge	.+14     	; 0x1188 <main+0x236>
    117a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    117c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    117e:	8a 32       	cpi	r24, 0x2A	; 42
    1180:	91 05       	cpc	r25, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <main+0x234>
    1184:	4f c0       	rjmp	.+158    	; 0x1224 <main+0x2d2>
    1186:	ac c0       	rjmp	.+344    	; 0x12e0 <main+0x38e>
    1188:	2d 8d       	ldd	r18, Y+29	; 0x1d
    118a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    118c:	2d 32       	cpi	r18, 0x2D	; 45
    118e:	31 05       	cpc	r19, r1
    1190:	41 f1       	breq	.+80     	; 0x11e2 <main+0x290>
    1192:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1194:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1196:	8f 32       	cpi	r24, 0x2F	; 47
    1198:	91 05       	cpc	r25, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <main+0x24c>
    119c:	64 c0       	rjmp	.+200    	; 0x1266 <main+0x314>
    119e:	a0 c0       	rjmp	.+320    	; 0x12e0 <main+0x38e>
			{
			case ADDITION:
				g_math_error = 0;
    11a0:	10 92 b1 01 	sts	0x01B1, r1
				result = num1 + num2;
    11a4:	80 91 a4 01 	lds	r24, 0x01A4
    11a8:	90 91 a5 01 	lds	r25, 0x01A5
    11ac:	a0 91 a6 01 	lds	r26, 0x01A6
    11b0:	b0 91 a7 01 	lds	r27, 0x01A7
    11b4:	20 91 a8 01 	lds	r18, 0x01A8
    11b8:	30 91 a9 01 	lds	r19, 0x01A9
    11bc:	40 91 aa 01 	lds	r20, 0x01AA
    11c0:	50 91 ab 01 	lds	r21, 0x01AB
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	80 93 ac 01 	sts	0x01AC, r24
    11d4:	90 93 ad 01 	sts	0x01AD, r25
    11d8:	a0 93 ae 01 	sts	0x01AE, r26
    11dc:	b0 93 af 01 	sts	0x01AF, r27
    11e0:	8d c0       	rjmp	.+282    	; 0x12fc <main+0x3aa>
				break;
			case SUBTRACTION:
				g_math_error = 0;
    11e2:	10 92 b1 01 	sts	0x01B1, r1
				result = num1-num2;
    11e6:	80 91 a4 01 	lds	r24, 0x01A4
    11ea:	90 91 a5 01 	lds	r25, 0x01A5
    11ee:	a0 91 a6 01 	lds	r26, 0x01A6
    11f2:	b0 91 a7 01 	lds	r27, 0x01A7
    11f6:	20 91 a8 01 	lds	r18, 0x01A8
    11fa:	30 91 a9 01 	lds	r19, 0x01A9
    11fe:	40 91 aa 01 	lds	r20, 0x01AA
    1202:	50 91 ab 01 	lds	r21, 0x01AB
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	80 93 ac 01 	sts	0x01AC, r24
    1216:	90 93 ad 01 	sts	0x01AD, r25
    121a:	a0 93 ae 01 	sts	0x01AE, r26
    121e:	b0 93 af 01 	sts	0x01AF, r27
    1222:	6c c0       	rjmp	.+216    	; 0x12fc <main+0x3aa>
				break;
			case MULTIPLICATION:
				g_math_error = 0;
    1224:	10 92 b1 01 	sts	0x01B1, r1
				result = num1*num2;
    1228:	80 91 a4 01 	lds	r24, 0x01A4
    122c:	90 91 a5 01 	lds	r25, 0x01A5
    1230:	a0 91 a6 01 	lds	r26, 0x01A6
    1234:	b0 91 a7 01 	lds	r27, 0x01A7
    1238:	20 91 a8 01 	lds	r18, 0x01A8
    123c:	30 91 a9 01 	lds	r19, 0x01A9
    1240:	40 91 aa 01 	lds	r20, 0x01AA
    1244:	50 91 ab 01 	lds	r21, 0x01AB
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	80 93 ac 01 	sts	0x01AC, r24
    1258:	90 93 ad 01 	sts	0x01AD, r25
    125c:	a0 93 ae 01 	sts	0x01AE, r26
    1260:	b0 93 af 01 	sts	0x01AF, r27
    1264:	4b c0       	rjmp	.+150    	; 0x12fc <main+0x3aa>
				break;
			case DIVISION:
				if(num2 == 0)
    1266:	80 91 a8 01 	lds	r24, 0x01A8
    126a:	90 91 a9 01 	lds	r25, 0x01A9
    126e:	a0 91 aa 01 	lds	r26, 0x01AA
    1272:	b0 91 ab 01 	lds	r27, 0x01AB
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	0e 94 42 04 	call	0x884	; 0x884 <__eqsf2>
    1286:	88 23       	and	r24, r24
    1288:	51 f4       	brne	.+20     	; 0x129e <main+0x34c>
				{
					g_math_error = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 b1 01 	sts	0x01B1, r24
					LCD_clearScreen();
    1290:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <LCD_clearScreen>
					LCD_displayString("MATH ERROR!");
    1294:	8e e6       	ldi	r24, 0x6E	; 110
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 86 13 	call	0x270c	; 0x270c <LCD_displayString>
    129c:	2f c0       	rjmp	.+94     	; 0x12fc <main+0x3aa>
				}
				else
				{
					g_math_error = 0;
    129e:	10 92 b1 01 	sts	0x01B1, r1
					result = num1/num2;
    12a2:	80 91 a4 01 	lds	r24, 0x01A4
    12a6:	90 91 a5 01 	lds	r25, 0x01A5
    12aa:	a0 91 a6 01 	lds	r26, 0x01A6
    12ae:	b0 91 a7 01 	lds	r27, 0x01A7
    12b2:	20 91 a8 01 	lds	r18, 0x01A8
    12b6:	30 91 a9 01 	lds	r19, 0x01A9
    12ba:	40 91 aa 01 	lds	r20, 0x01AA
    12be:	50 91 ab 01 	lds	r21, 0x01AB
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	80 93 ac 01 	sts	0x01AC, r24
    12d2:	90 93 ad 01 	sts	0x01AD, r25
    12d6:	a0 93 ae 01 	sts	0x01AE, r26
    12da:	b0 93 af 01 	sts	0x01AF, r27
    12de:	0e c0       	rjmp	.+28     	; 0x12fc <main+0x3aa>
				}
				break;
			default:
				LCD_displayStringRowColumn(1,0,"          ");
    12e0:	2a e7       	ldi	r18, 0x7A	; 122
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	a9 01       	movw	r20, r18
    12ea:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"NO OPERATOR!");
    12ee:	25 e8       	ldi	r18, 0x85	; 133
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	a9 01       	movw	r20, r18
    12f8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_displayStringRowColumn>
			}
//			CALCULATOR_operation(num1,num2,operator);
			if(!g_math_error)
    12fc:	80 91 b1 01 	lds	r24, 0x01B1
    1300:	88 23       	and	r24, r24
    1302:	09 f0       	breq	.+2      	; 0x1306 <main+0x3b4>
    1304:	44 c0       	rjmp	.+136    	; 0x138e <main+0x43c>
			{
				LCD_displayStringRowColumn(1,0,"Answer = ");
    1306:	22 e9       	ldi	r18, 0x92	; 146
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_displayStringRowColumn>
				LCD_floatToString(result);
    1314:	80 91 ac 01 	lds	r24, 0x01AC
    1318:	90 91 ad 01 	lds	r25, 0x01AD
    131c:	a0 91 ae 01 	lds	r26, 0x01AE
    1320:	b0 91 af 01 	lds	r27, 0x01AF
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 2d 14 	call	0x285a	; 0x285a <LCD_floatToString>
    132c:	30 c0       	rjmp	.+96     	; 0x138e <main+0x43c>
			}
		}
		else if(key == ALL_CLEAR)
    132e:	80 91 b2 01 	lds	r24, 0x01B2
    1332:	8d 30       	cpi	r24, 0x0D	; 13
    1334:	61 f5       	brne	.+88     	; 0x138e <main+0x43c>
		{
			LCD_clearScreen();
    1336:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <LCD_clearScreen>
			num1 = num2 = 0;
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a0 e0       	ldi	r26, 0x00	; 0
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	80 93 a8 01 	sts	0x01A8, r24
    1346:	90 93 a9 01 	sts	0x01A9, r25
    134a:	a0 93 aa 01 	sts	0x01AA, r26
    134e:	b0 93 ab 01 	sts	0x01AB, r27
    1352:	80 91 a8 01 	lds	r24, 0x01A8
    1356:	90 91 a9 01 	lds	r25, 0x01A9
    135a:	a0 91 aa 01 	lds	r26, 0x01AA
    135e:	b0 91 ab 01 	lds	r27, 0x01AB
    1362:	80 93 a4 01 	sts	0x01A4, r24
    1366:	90 93 a5 01 	sts	0x01A5, r25
    136a:	a0 93 a6 01 	sts	0x01A6, r26
    136e:	b0 93 a7 01 	sts	0x01A7, r27
			operator = 0;
    1372:	10 92 b0 01 	sts	0x01B0, r1
			result = 0;
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e0       	ldi	r26, 0x00	; 0
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	80 93 ac 01 	sts	0x01AC, r24
    1382:	90 93 ad 01 	sts	0x01AD, r25
    1386:	a0 93 ae 01 	sts	0x01AE, r26
    138a:	b0 93 af 01 	sts	0x01AF, r27
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	aa ef       	ldi	r26, 0xFA	; 250
    1394:	b3 e4       	ldi	r27, 0x43	; 67
    1396:	8b 87       	std	Y+11, r24	; 0x0b
    1398:	9c 87       	std	Y+12, r25	; 0x0c
    139a:	ad 87       	std	Y+13, r26	; 0x0d
    139c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139e:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	4a e7       	ldi	r20, 0x7A	; 122
    13ac:	55 e4       	ldi	r21, 0x45	; 69
    13ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8f 83       	std	Y+7, r24	; 0x07
    13b8:	98 87       	std	Y+8, r25	; 0x08
    13ba:	a9 87       	std	Y+9, r26	; 0x09
    13bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13be:	6f 81       	ldd	r22, Y+7	; 0x07
    13c0:	78 85       	ldd	r23, Y+8	; 0x08
    13c2:	89 85       	ldd	r24, Y+9	; 0x09
    13c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    13d2:	88 23       	and	r24, r24
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <main+0x48e>
		__ticks = 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9e 83       	std	Y+6, r25	; 0x06
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	3f c0       	rjmp	.+126    	; 0x145e <main+0x50c>
	else if (__tmp > 65535)
    13e0:	6f 81       	ldd	r22, Y+7	; 0x07
    13e2:	78 85       	ldd	r23, Y+8	; 0x08
    13e4:	89 85       	ldd	r24, Y+9	; 0x09
    13e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	3f ef       	ldi	r19, 0xFF	; 255
    13ec:	4f e7       	ldi	r20, 0x7F	; 127
    13ee:	57 e4       	ldi	r21, 0x47	; 71
    13f0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    13f4:	18 16       	cp	r1, r24
    13f6:	4c f5       	brge	.+82     	; 0x144a <main+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e2       	ldi	r20, 0x20	; 32
    1406:	51 e4       	ldi	r21, 0x41	; 65
    1408:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	8d 83       	std	Y+5, r24	; 0x05
    1420:	0f c0       	rjmp	.+30     	; 0x1440 <main+0x4ee>
    1422:	80 e9       	ldi	r24, 0x90	; 144
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	9c 83       	std	Y+4, r25	; 0x04
    1428:	8b 83       	std	Y+3, r24	; 0x03
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <main+0x4dc>
    1432:	9c 83       	std	Y+4, r25	; 0x04
    1434:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	9e 83       	std	Y+6, r25	; 0x06
    143e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	69 f7       	brne	.-38     	; 0x1422 <main+0x4d0>
    1448:	0f ce       	rjmp	.-994    	; 0x1068 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144a:	6f 81       	ldd	r22, Y+7	; 0x07
    144c:	78 85       	ldd	r23, Y+8	; 0x08
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9e 83       	std	Y+6, r25	; 0x06
    145c:	8d 83       	std	Y+5, r24	; 0x05
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <main+0x518>
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	fa cd       	rjmp	.-1036   	; 0x1068 <main+0x116>

00001474 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <GPIO_setupPinDirection+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <GPIO_setupPinDirection+0x8>
    147c:	0f 92       	push	r0
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	6a 83       	std	Y+2, r22	; 0x02
    1486:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	88 30       	cpi	r24, 0x08	; 8
    148c:	08 f0       	brcs	.+2      	; 0x1490 <GPIO_setupPinDirection+0x1c>
    148e:	d5 c0       	rjmp	.+426    	; 0x163a <GPIO_setupPinDirection+0x1c6>
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	84 30       	cpi	r24, 0x04	; 4
    1494:	08 f0       	brcs	.+2      	; 0x1498 <GPIO_setupPinDirection+0x24>
    1496:	d1 c0       	rjmp	.+418    	; 0x163a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3d 83       	std	Y+5, r19	; 0x05
    14a0:	2c 83       	std	Y+4, r18	; 0x04
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <GPIO_setupPinDirection+0x3a>
    14ac:	43 c0       	rjmp	.+134    	; 0x1534 <GPIO_setupPinDirection+0xc0>
    14ae:	2c 81       	ldd	r18, Y+4	; 0x04
    14b0:	3d 81       	ldd	r19, Y+5	; 0x05
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <GPIO_setupPinDirection+0x4e>
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	71 f0       	breq	.+28     	; 0x14dc <GPIO_setupPinDirection+0x68>
    14c0:	bc c0       	rjmp	.+376    	; 0x163a <GPIO_setupPinDirection+0x1c6>
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <GPIO_setupPinDirection+0x5a>
    14cc:	5f c0       	rjmp	.+190    	; 0x158c <GPIO_setupPinDirection+0x118>
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <GPIO_setupPinDirection+0x66>
    14d8:	85 c0       	rjmp	.+266    	; 0x15e4 <GPIO_setupPinDirection+0x170>
    14da:	af c0       	rjmp	.+350    	; 0x163a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	a1 f4       	brne	.+40     	; 0x150a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14e2:	aa e3       	ldi	r26, 0x3A	; 58
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	ea e3       	ldi	r30, 0x3A	; 58
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <GPIO_setupPinDirection+0x8c>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <GPIO_setupPinDirection+0x88>
    1504:	84 2b       	or	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	98 c0       	rjmp	.+304    	; 0x163a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    150a:	aa e3       	ldi	r26, 0x3A	; 58
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ea e3       	ldi	r30, 0x3A	; 58
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <GPIO_setupPinDirection+0xb4>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <GPIO_setupPinDirection+0xb0>
    152c:	80 95       	com	r24
    152e:	84 23       	and	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	83 c0       	rjmp	.+262    	; 0x163a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	a1 f4       	brne	.+40     	; 0x1562 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    153a:	a7 e3       	ldi	r26, 0x37	; 55
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e7 e3       	ldi	r30, 0x37	; 55
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <GPIO_setupPinDirection+0xe4>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <GPIO_setupPinDirection+0xe0>
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	6c c0       	rjmp	.+216    	; 0x163a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1562:	a7 e3       	ldi	r26, 0x37	; 55
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e7 e3       	ldi	r30, 0x37	; 55
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <GPIO_setupPinDirection+0x10c>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <GPIO_setupPinDirection+0x108>
    1584:	80 95       	com	r24
    1586:	84 23       	and	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	57 c0       	rjmp	.+174    	; 0x163a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	a1 f4       	brne	.+40     	; 0x15ba <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1592:	a4 e3       	ldi	r26, 0x34	; 52
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e4 e3       	ldi	r30, 0x34	; 52
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <GPIO_setupPinDirection+0x13c>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <GPIO_setupPinDirection+0x138>
    15b4:	84 2b       	or	r24, r20
    15b6:	8c 93       	st	X, r24
    15b8:	40 c0       	rjmp	.+128    	; 0x163a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15ba:	a4 e3       	ldi	r26, 0x34	; 52
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e4 e3       	ldi	r30, 0x34	; 52
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <GPIO_setupPinDirection+0x164>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <GPIO_setupPinDirection+0x160>
    15dc:	80 95       	com	r24
    15de:	84 23       	and	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	2b c0       	rjmp	.+86     	; 0x163a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	a1 f4       	brne	.+40     	; 0x1612 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15ea:	a1 e3       	ldi	r26, 0x31	; 49
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e1 e3       	ldi	r30, 0x31	; 49
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <GPIO_setupPinDirection+0x194>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <GPIO_setupPinDirection+0x190>
    160c:	84 2b       	or	r24, r20
    160e:	8c 93       	st	X, r24
    1610:	14 c0       	rjmp	.+40     	; 0x163a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1612:	a1 e3       	ldi	r26, 0x31	; 49
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e1 e3       	ldi	r30, 0x31	; 49
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <GPIO_setupPinDirection+0x1bc>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <GPIO_setupPinDirection+0x1b8>
    1634:	80 95       	com	r24
    1636:	84 23       	and	r24, r20
    1638:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <GPIO_writePin+0x6>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <GPIO_writePin+0x8>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	6a 83       	std	Y+2, r22	; 0x02
    165c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	88 30       	cpi	r24, 0x08	; 8
    1662:	08 f0       	brcs	.+2      	; 0x1666 <GPIO_writePin+0x1c>
    1664:	d5 c0       	rjmp	.+426    	; 0x1810 <GPIO_writePin+0x1c6>
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	84 30       	cpi	r24, 0x04	; 4
    166a:	08 f0       	brcs	.+2      	; 0x166e <GPIO_writePin+0x24>
    166c:	d1 c0       	rjmp	.+418    	; 0x1810 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	3d 83       	std	Y+5, r19	; 0x05
    1676:	2c 83       	std	Y+4, r18	; 0x04
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	91 05       	cpc	r25, r1
    1680:	09 f4       	brne	.+2      	; 0x1684 <GPIO_writePin+0x3a>
    1682:	43 c0       	rjmp	.+134    	; 0x170a <GPIO_writePin+0xc0>
    1684:	2c 81       	ldd	r18, Y+4	; 0x04
    1686:	3d 81       	ldd	r19, Y+5	; 0x05
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	2c f4       	brge	.+10     	; 0x1698 <GPIO_writePin+0x4e>
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	71 f0       	breq	.+28     	; 0x16b2 <GPIO_writePin+0x68>
    1696:	bc c0       	rjmp	.+376    	; 0x1810 <GPIO_writePin+0x1c6>
    1698:	2c 81       	ldd	r18, Y+4	; 0x04
    169a:	3d 81       	ldd	r19, Y+5	; 0x05
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <GPIO_writePin+0x5a>
    16a2:	5f c0       	rjmp	.+190    	; 0x1762 <GPIO_writePin+0x118>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	91 05       	cpc	r25, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <GPIO_writePin+0x66>
    16ae:	85 c0       	rjmp	.+266    	; 0x17ba <GPIO_writePin+0x170>
    16b0:	af c0       	rjmp	.+350    	; 0x1810 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	a1 f4       	brne	.+40     	; 0x16e0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16b8:	ab e3       	ldi	r26, 0x3B	; 59
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	eb e3       	ldi	r30, 0x3B	; 59
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <GPIO_writePin+0x8c>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <GPIO_writePin+0x88>
    16da:	84 2b       	or	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	98 c0       	rjmp	.+304    	; 0x1810 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16e0:	ab e3       	ldi	r26, 0x3B	; 59
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	eb e3       	ldi	r30, 0x3B	; 59
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <GPIO_writePin+0xb4>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <GPIO_writePin+0xb0>
    1702:	80 95       	com	r24
    1704:	84 23       	and	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	83 c0       	rjmp	.+262    	; 0x1810 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	a1 f4       	brne	.+40     	; 0x1738 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1710:	a8 e3       	ldi	r26, 0x38	; 56
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e8 e3       	ldi	r30, 0x38	; 56
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <GPIO_writePin+0xe4>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <GPIO_writePin+0xe0>
    1732:	84 2b       	or	r24, r20
    1734:	8c 93       	st	X, r24
    1736:	6c c0       	rjmp	.+216    	; 0x1810 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1738:	a8 e3       	ldi	r26, 0x38	; 56
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e8 e3       	ldi	r30, 0x38	; 56
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	48 2f       	mov	r20, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <GPIO_writePin+0x10c>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <GPIO_writePin+0x108>
    175a:	80 95       	com	r24
    175c:	84 23       	and	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	57 c0       	rjmp	.+174    	; 0x1810 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	a1 f4       	brne	.+40     	; 0x1790 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1768:	a5 e3       	ldi	r26, 0x35	; 53
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e5 e3       	ldi	r30, 0x35	; 53
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GPIO_writePin+0x13c>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <GPIO_writePin+0x138>
    178a:	84 2b       	or	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	40 c0       	rjmp	.+128    	; 0x1810 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1790:	a5 e3       	ldi	r26, 0x35	; 53
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e5 e3       	ldi	r30, 0x35	; 53
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <GPIO_writePin+0x164>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <GPIO_writePin+0x160>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	2b c0       	rjmp	.+86     	; 0x1810 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	a1 f4       	brne	.+40     	; 0x17e8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17c0:	a2 e3       	ldi	r26, 0x32	; 50
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e2 e3       	ldi	r30, 0x32	; 50
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <GPIO_writePin+0x194>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <GPIO_writePin+0x190>
    17e2:	84 2b       	or	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17e8:	a2 e3       	ldi	r26, 0x32	; 50
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e2 e3       	ldi	r30, 0x32	; 50
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <GPIO_writePin+0x1bc>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <GPIO_writePin+0x1b8>
    180a:	80 95       	com	r24
    180c:	84 23       	and	r24, r20
    180e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	00 d0       	rcall	.+0      	; 0x1826 <GPIO_readPin+0x6>
    1826:	00 d0       	rcall	.+0      	; 0x1828 <GPIO_readPin+0x8>
    1828:	0f 92       	push	r0
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	8a 83       	std	Y+2, r24	; 0x02
    1830:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1832:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	88 30       	cpi	r24, 0x08	; 8
    1838:	08 f0       	brcs	.+2      	; 0x183c <GPIO_readPin+0x1c>
    183a:	84 c0       	rjmp	.+264    	; 0x1944 <GPIO_readPin+0x124>
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	08 f0       	brcs	.+2      	; 0x1844 <GPIO_readPin+0x24>
    1842:	80 c0       	rjmp	.+256    	; 0x1944 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3d 83       	std	Y+5, r19	; 0x05
    184c:	2c 83       	std	Y+4, r18	; 0x04
    184e:	4c 81       	ldd	r20, Y+4	; 0x04
    1850:	5d 81       	ldd	r21, Y+5	; 0x05
    1852:	41 30       	cpi	r20, 0x01	; 1
    1854:	51 05       	cpc	r21, r1
    1856:	79 f1       	breq	.+94     	; 0x18b6 <GPIO_readPin+0x96>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	82 30       	cpi	r24, 0x02	; 2
    185e:	91 05       	cpc	r25, r1
    1860:	34 f4       	brge	.+12     	; 0x186e <GPIO_readPin+0x4e>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	21 15       	cp	r18, r1
    1868:	31 05       	cpc	r19, r1
    186a:	69 f0       	breq	.+26     	; 0x1886 <GPIO_readPin+0x66>
    186c:	6b c0       	rjmp	.+214    	; 0x1944 <GPIO_readPin+0x124>
    186e:	4c 81       	ldd	r20, Y+4	; 0x04
    1870:	5d 81       	ldd	r21, Y+5	; 0x05
    1872:	42 30       	cpi	r20, 0x02	; 2
    1874:	51 05       	cpc	r21, r1
    1876:	b9 f1       	breq	.+110    	; 0x18e6 <GPIO_readPin+0xc6>
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	9d 81       	ldd	r25, Y+5	; 0x05
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	91 05       	cpc	r25, r1
    1880:	09 f4       	brne	.+2      	; 0x1884 <GPIO_readPin+0x64>
    1882:	49 c0       	rjmp	.+146    	; 0x1916 <GPIO_readPin+0xf6>
    1884:	5f c0       	rjmp	.+190    	; 0x1944 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1886:	e9 e3       	ldi	r30, 0x39	; 57
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	88 2f       	mov	r24, r24
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a9 01       	movw	r20, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_readPin+0x7e>
    189a:	55 95       	asr	r21
    189c:	47 95       	ror	r20
    189e:	8a 95       	dec	r24
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_readPin+0x7a>
    18a2:	ca 01       	movw	r24, r20
    18a4:	81 70       	andi	r24, 0x01	; 1
    18a6:	90 70       	andi	r25, 0x00	; 0
    18a8:	88 23       	and	r24, r24
    18aa:	19 f0       	breq	.+6      	; 0x18b2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	49 c0       	rjmp	.+146    	; 0x1944 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18b2:	19 82       	std	Y+1, r1	; 0x01
    18b4:	47 c0       	rjmp	.+142    	; 0x1944 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18b6:	e6 e3       	ldi	r30, 0x36	; 54
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a9 01       	movw	r20, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <GPIO_readPin+0xae>
    18ca:	55 95       	asr	r21
    18cc:	47 95       	ror	r20
    18ce:	8a 95       	dec	r24
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <GPIO_readPin+0xaa>
    18d2:	ca 01       	movw	r24, r20
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	90 70       	andi	r25, 0x00	; 0
    18d8:	88 23       	and	r24, r24
    18da:	19 f0       	breq	.+6      	; 0x18e2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	31 c0       	rjmp	.+98     	; 0x1944 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18e2:	19 82       	std	Y+1, r1	; 0x01
    18e4:	2f c0       	rjmp	.+94     	; 0x1944 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18e6:	e3 e3       	ldi	r30, 0x33	; 51
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a9 01       	movw	r20, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <GPIO_readPin+0xde>
    18fa:	55 95       	asr	r21
    18fc:	47 95       	ror	r20
    18fe:	8a 95       	dec	r24
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <GPIO_readPin+0xda>
    1902:	ca 01       	movw	r24, r20
    1904:	81 70       	andi	r24, 0x01	; 1
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	88 23       	and	r24, r24
    190a:	19 f0       	breq	.+6      	; 0x1912 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	19 c0       	rjmp	.+50     	; 0x1944 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1912:	19 82       	std	Y+1, r1	; 0x01
    1914:	17 c0       	rjmp	.+46     	; 0x1944 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1916:	e0 e3       	ldi	r30, 0x30	; 48
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a9 01       	movw	r20, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_readPin+0x10e>
    192a:	55 95       	asr	r21
    192c:	47 95       	ror	r20
    192e:	8a 95       	dec	r24
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_readPin+0x10a>
    1932:	ca 01       	movw	r24, r20
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	90 70       	andi	r25, 0x00	; 0
    1938:	88 23       	and	r24, r24
    193a:	19 f0       	breq	.+6      	; 0x1942 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1942:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1944:	89 81       	ldd	r24, Y+1	; 0x01
}
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <GPIO_setupPortDirection+0x6>
    195c:	00 d0       	rcall	.+0      	; 0x195e <GPIO_setupPortDirection+0x8>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	84 30       	cpi	r24, 0x04	; 4
    196a:	90 f5       	brcc	.+100    	; 0x19d0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	3c 83       	std	Y+4, r19	; 0x04
    1974:	2b 83       	std	Y+3, r18	; 0x03
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	91 05       	cpc	r25, r1
    197e:	d1 f0       	breq	.+52     	; 0x19b4 <GPIO_setupPortDirection+0x5e>
    1980:	2b 81       	ldd	r18, Y+3	; 0x03
    1982:	3c 81       	ldd	r19, Y+4	; 0x04
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	2c f4       	brge	.+10     	; 0x1994 <GPIO_setupPortDirection+0x3e>
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	61 f0       	breq	.+24     	; 0x19aa <GPIO_setupPortDirection+0x54>
    1992:	1e c0       	rjmp	.+60     	; 0x19d0 <GPIO_setupPortDirection+0x7a>
    1994:	2b 81       	ldd	r18, Y+3	; 0x03
    1996:	3c 81       	ldd	r19, Y+4	; 0x04
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	81 f0       	breq	.+32     	; 0x19be <GPIO_setupPortDirection+0x68>
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	91 05       	cpc	r25, r1
    19a6:	81 f0       	breq	.+32     	; 0x19c8 <GPIO_setupPortDirection+0x72>
    19a8:	13 c0       	rjmp	.+38     	; 0x19d0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19aa:	ea e3       	ldi	r30, 0x3A	; 58
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	80 83       	st	Z, r24
    19b2:	0e c0       	rjmp	.+28     	; 0x19d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19b4:	e7 e3       	ldi	r30, 0x37	; 55
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	80 83       	st	Z, r24
    19bc:	09 c0       	rjmp	.+18     	; 0x19d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19be:	e4 e3       	ldi	r30, 0x34	; 52
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	80 83       	st	Z, r24
    19c6:	04 c0       	rjmp	.+8      	; 0x19d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19c8:	e1 e3       	ldi	r30, 0x31	; 49
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	80 83       	st	Z, r24
			break;
		}
	}
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <GPIO_writePort+0x6>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <GPIO_writePort+0x8>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	90 f5       	brcc	.+100    	; 0x1a58 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	3c 83       	std	Y+4, r19	; 0x04
    19fc:	2b 83       	std	Y+3, r18	; 0x03
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	91 05       	cpc	r25, r1
    1a06:	d1 f0       	breq	.+52     	; 0x1a3c <GPIO_writePort+0x5e>
    1a08:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <GPIO_writePort+0x3e>
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <GPIO_writePort+0x54>
    1a1a:	1e c0       	rjmp	.+60     	; 0x1a58 <GPIO_writePort+0x7a>
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	81 f0       	breq	.+32     	; 0x1a46 <GPIO_writePort+0x68>
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	83 30       	cpi	r24, 0x03	; 3
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	81 f0       	breq	.+32     	; 0x1a50 <GPIO_writePort+0x72>
    1a30:	13 c0       	rjmp	.+38     	; 0x1a58 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a32:	eb e3       	ldi	r30, 0x3B	; 59
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	80 83       	st	Z, r24
    1a3a:	0e c0       	rjmp	.+28     	; 0x1a58 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a3c:	e8 e3       	ldi	r30, 0x38	; 56
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	80 83       	st	Z, r24
    1a44:	09 c0       	rjmp	.+18     	; 0x1a58 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a46:	e5 e3       	ldi	r30, 0x35	; 53
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	80 83       	st	Z, r24
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a50:	e2 e3       	ldi	r30, 0x32	; 50
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <GPIO_readPort+0x6>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <GPIO_readPort+0x8>
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a74:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	84 30       	cpi	r24, 0x04	; 4
    1a7a:	90 f5       	brcc	.+100    	; 0x1ae0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	3c 83       	std	Y+4, r19	; 0x04
    1a84:	2b 83       	std	Y+3, r18	; 0x03
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	d1 f0       	breq	.+52     	; 0x1ac4 <GPIO_readPort+0x5e>
    1a90:	2b 81       	ldd	r18, Y+3	; 0x03
    1a92:	3c 81       	ldd	r19, Y+4	; 0x04
    1a94:	22 30       	cpi	r18, 0x02	; 2
    1a96:	31 05       	cpc	r19, r1
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <GPIO_readPort+0x3e>
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <GPIO_readPort+0x54>
    1aa2:	1e c0       	rjmp	.+60     	; 0x1ae0 <GPIO_readPort+0x7a>
    1aa4:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa6:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	31 05       	cpc	r19, r1
    1aac:	81 f0       	breq	.+32     	; 0x1ace <GPIO_readPort+0x68>
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	83 30       	cpi	r24, 0x03	; 3
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	81 f0       	breq	.+32     	; 0x1ad8 <GPIO_readPort+0x72>
    1ab8:	13 c0       	rjmp	.+38     	; 0x1ae0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1aba:	e9 e3       	ldi	r30, 0x39	; 57
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	0e c0       	rjmp	.+28     	; 0x1ae0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ac4:	e6 e3       	ldi	r30, 0x36	; 54
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	09 c0       	rjmp	.+18     	; 0x1ae0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ace:	e3 e3       	ldi	r30, 0x33	; 51
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	04 c0       	rjmp	.+8      	; 0x1ae0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ad8:	e0 e3       	ldi	r30, 0x30	; 48
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	60 97       	sbiw	r28, 0x10	; 16
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	64 e0       	ldi	r22, 0x04	; 4
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	65 e0       	ldi	r22, 0x05	; 5
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	66 e0       	ldi	r22, 0x06	; 6
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	67 e0       	ldi	r22, 0x07	; 7
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1b2c:	83 e0       	ldi	r24, 0x03	; 3
    1b2e:	62 e0       	ldi	r22, 0x02	; 2
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	63 e0       	ldi	r22, 0x03	; 3
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	64 e0       	ldi	r22, 0x04	; 4
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1b4a:	83 e0       	ldi	r24, 0x03	; 3
    1b4c:	65 e0       	ldi	r22, 0x05	; 5
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b54:	1f 86       	std	Y+15, r1	; 0x0f
    1b56:	b4 c0       	rjmp	.+360    	; 0x1cc0 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5a:	98 2f       	mov	r25, r24
    1b5c:	9c 5f       	subi	r25, 0xFC	; 252
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	69 2f       	mov	r22, r25
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	9c 5f       	subi	r25, 0xFC	; 252
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	69 2f       	mov	r22, r25
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1b78:	18 8a       	std	Y+16, r1	; 0x10
    1b7a:	22 c0       	rjmp	.+68     	; 0x1bc0 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1b7c:	88 89       	ldd	r24, Y+16	; 0x10
    1b7e:	98 2f       	mov	r25, r24
    1b80:	9e 5f       	subi	r25, 0xFE	; 254
    1b82:	83 e0       	ldi	r24, 0x03	; 3
    1b84:	69 2f       	mov	r22, r25
    1b86:	0e 94 10 0c 	call	0x1820	; 0x1820 <GPIO_readPin>
    1b8a:	88 23       	and	r24, r24
    1b8c:	b1 f4       	brne	.+44     	; 0x1bba <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	98 2f       	mov	r25, r24
    1b9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ba0:	89 0f       	add	r24, r25
    1ba2:	8f 5f       	subi	r24, 0xFF	; 255
    1ba4:	0e 94 65 0e 	call	0x1cca	; 0x1cca <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1ba8:	60 96       	adiw	r28, 0x10	; 16
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1bba:	88 89       	ldd	r24, Y+16	; 0x10
    1bbc:	8f 5f       	subi	r24, 0xFF	; 255
    1bbe:	88 8b       	std	Y+16, r24	; 0x10
    1bc0:	88 89       	ldd	r24, Y+16	; 0x10
    1bc2:	84 30       	cpi	r24, 0x04	; 4
    1bc4:	d8 f2       	brcs	.-74     	; 0x1b7c <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1bc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc8:	98 2f       	mov	r25, r24
    1bca:	9c 5f       	subi	r25, 0xFC	; 252
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	69 2f       	mov	r22, r25
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 ea       	ldi	r26, 0xA0	; 160
    1bdc:	b0 e4       	ldi	r27, 0x40	; 64
    1bde:	8b 87       	std	Y+11, r24	; 0x0b
    1be0:	9c 87       	std	Y+12, r25	; 0x0c
    1be2:	ad 87       	std	Y+13, r26	; 0x0d
    1be4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	55 e4       	ldi	r21, 0x45	; 69
    1bf6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8f 83       	std	Y+7, r24	; 0x07
    1c00:	98 87       	std	Y+8, r25	; 0x08
    1c02:	a9 87       	std	Y+9, r26	; 0x09
    1c04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9e 83       	std	Y+6, r25	; 0x06
    1c24:	8d 83       	std	Y+5, r24	; 0x05
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1c28:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2a:	78 85       	ldd	r23, Y+8	; 0x08
    1c2c:	89 85       	ldd	r24, Y+9	; 0x09
    1c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <KEYPAD_getPressedKey+0x198>
    1c6a:	80 e9       	ldi	r24, 0x90	; 144
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <KEYPAD_getPressedKey+0x186>
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <KEYPAD_getPressedKey+0x17a>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6f 81       	ldd	r22, Y+7	; 0x07
    1c94:	78 85       	ldd	r23, Y+8	; 0x08
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <KEYPAD_getPressedKey+0x1c2>
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	8f 87       	std	Y+15, r24	; 0x0f
    1cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc2:	84 30       	cpi	r24, 0x04	; 4
    1cc4:	08 f4       	brcc	.+2      	; 0x1cc8 <KEYPAD_getPressedKey+0x1d8>
    1cc6:	48 cf       	rjmp	.-368    	; 0x1b58 <KEYPAD_getPressedKey+0x68>
    1cc8:	45 cf       	rjmp	.-374    	; 0x1b54 <KEYPAD_getPressedKey+0x64>

00001cca <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1cd8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	3c 83       	std	Y+4, r19	; 0x04
    1ce2:	2b 83       	std	Y+3, r18	; 0x03
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	88 30       	cpi	r24, 0x08	; 8
    1cea:	91 05       	cpc	r25, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1cee:	70 c0       	rjmp	.+224    	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1cf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf4:	29 30       	cpi	r18, 0x09	; 9
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	5c f5       	brge	.+86     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d04:	59 c0       	rjmp	.+178    	; 0x1db8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d06:	2b 81       	ldd	r18, Y+3	; 0x03
    1d08:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0a:	25 30       	cpi	r18, 0x05	; 5
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	9c f4       	brge	.+38     	; 0x1d36 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	82 30       	cpi	r24, 0x02	; 2
    1d16:	91 05       	cpc	r25, r1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d1a:	48 c0       	rjmp	.+144    	; 0x1dac <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d20:	23 30       	cpi	r18, 0x03	; 3
    1d22:	31 05       	cpc	r19, r1
    1d24:	0c f0       	brlt	.+2      	; 0x1d28 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d26:	45 c0       	rjmp	.+138    	; 0x1db2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d32:	39 c0       	rjmp	.+114    	; 0x1da6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d34:	67 c0       	rjmp	.+206    	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d36:	2b 81       	ldd	r18, Y+3	; 0x03
    1d38:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3a:	26 30       	cpi	r18, 0x06	; 6
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d40:	41 c0       	rjmp	.+130    	; 0x1dc4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	87 30       	cpi	r24, 0x07	; 7
    1d48:	91 05       	cpc	r25, r1
    1d4a:	0c f0       	brlt	.+2      	; 0x1d4e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d4c:	3e c0       	rjmp	.+124    	; 0x1dca <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d4e:	37 c0       	rjmp	.+110    	; 0x1dbe <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d50:	2b 81       	ldd	r18, Y+3	; 0x03
    1d52:	3c 81       	ldd	r19, Y+4	; 0x04
    1d54:	2c 30       	cpi	r18, 0x0C	; 12
    1d56:	31 05       	cpc	r19, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d5a:	46 c0       	rjmp	.+140    	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	8d 30       	cpi	r24, 0x0D	; 13
    1d62:	91 05       	cpc	r25, r1
    1d64:	5c f4       	brge	.+22     	; 0x1d7c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d66:	2b 81       	ldd	r18, Y+3	; 0x03
    1d68:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6a:	2a 30       	cpi	r18, 0x0A	; 10
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	b1 f1       	breq	.+108    	; 0x1ddc <KEYPAD_4x4_adjustKeyNumber+0x112>
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	8b 30       	cpi	r24, 0x0B	; 11
    1d76:	91 05       	cpc	r25, r1
    1d78:	a4 f5       	brge	.+104    	; 0x1de2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1d7a:	2d c0       	rjmp	.+90     	; 0x1dd6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d80:	2e 30       	cpi	r18, 0x0E	; 14
    1d82:	31 05       	cpc	r19, r1
    1d84:	b9 f1       	breq	.+110    	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	8e 30       	cpi	r24, 0x0E	; 14
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	7c f1       	brlt	.+94     	; 0x1dee <KEYPAD_4x4_adjustKeyNumber+0x124>
    1d90:	2b 81       	ldd	r18, Y+3	; 0x03
    1d92:	3c 81       	ldd	r19, Y+4	; 0x04
    1d94:	2f 30       	cpi	r18, 0x0F	; 15
    1d96:	31 05       	cpc	r19, r1
    1d98:	79 f1       	breq	.+94     	; 0x1df8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	80 31       	cpi	r24, 0x10	; 16
    1da0:	91 05       	cpc	r25, r1
    1da2:	69 f1       	breq	.+90     	; 0x1dfe <KEYPAD_4x4_adjustKeyNumber+0x134>
    1da4:	2f c0       	rjmp	.+94     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1da6:	87 e0       	ldi	r24, 0x07	; 7
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	2e c0       	rjmp	.+92     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1dac:	88 e0       	ldi	r24, 0x08	; 8
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	2b c0       	rjmp	.+86     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1db2:	89 e0       	ldi	r24, 0x09	; 9
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	28 c0       	rjmp	.+80     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = DIVISION; // ASCII Code of %
    1db8:	8f e2       	ldi	r24, 0x2F	; 47
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	25 c0       	rjmp	.+74     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	22 c0       	rjmp	.+68     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1dc4:	85 e0       	ldi	r24, 0x05	; 5
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	1f c0       	rjmp	.+62     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1dca:	86 e0       	ldi	r24, 0x06	; 6
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	1c c0       	rjmp	.+56     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = MULTIPLICATION; /* ASCII Code of '*' */
    1dd0:	8a e2       	ldi	r24, 0x2A	; 42
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	19 c0       	rjmp	.+50     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	13 c0       	rjmp	.+38     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	10 c0       	rjmp	.+32     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = SUBTRACTION; /* ASCII Code of '-' */
    1de8:	8d e2       	ldi	r24, 0x2D	; 45
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	0d c0       	rjmp	.+26     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = ALL_CLEAR;  /* ASCII of Enter */
    1dee:	8d e0       	ldi	r24, 0x0D	; 13
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	0a c0       	rjmp	.+20     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1df4:	19 82       	std	Y+1, r1	; 0x01
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = EQUAL; /* ASCII Code of '=' */
    1df8:	8d e3       	ldi	r24, 0x3D	; 61
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	05 c0       	rjmp	.+10     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = ADDITION; /* ASCII Code of '+' */
    1dfe:	8b e2       	ldi	r24, 0x2B	; 43
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	2e 97       	sbiw	r28, 0x0e	; 14
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	62 e0       	ldi	r22, 0x02	; 2
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPinDirection>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 ea       	ldi	r26, 0xA0	; 160
    1e46:	b1 e4       	ldi	r27, 0x41	; 65
    1e48:	8b 87       	std	Y+11, r24	; 0x0b
    1e4a:	9c 87       	std	Y+12, r25	; 0x0c
    1e4c:	ad 87       	std	Y+13, r26	; 0x0d
    1e4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a e7       	ldi	r20, 0x7A	; 122
    1e5e:	55 e4       	ldi	r21, 0x45	; 69
    1e60:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8f 83       	std	Y+7, r24	; 0x07
    1e6a:	98 87       	std	Y+8, r25	; 0x08
    1e6c:	a9 87       	std	Y+9, r26	; 0x09
    1e6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e70:	6f 81       	ldd	r22, Y+7	; 0x07
    1e72:	78 85       	ldd	r23, Y+8	; 0x08
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	2c f4       	brge	.+10     	; 0x1e92 <LCD_init+0x7a>
		__ticks = 1;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9e 83       	std	Y+6, r25	; 0x06
    1e8e:	8d 83       	std	Y+5, r24	; 0x05
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1e92:	6f 81       	ldd	r22, Y+7	; 0x07
    1e94:	78 85       	ldd	r23, Y+8	; 0x08
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	4c f5       	brge	.+82     	; 0x1efc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <LCD_init+0xda>
    1ed4:	80 e9       	ldi	r24, 0x90	; 144
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	9c 83       	std	Y+4, r25	; 0x04
    1eda:	8b 83       	std	Y+3, r24	; 0x03
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <LCD_init+0xc8>
    1ee4:	9c 83       	std	Y+4, r25	; 0x04
    1ee6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	69 f7       	brne	.-38     	; 0x1ed4 <LCD_init+0xbc>
    1efa:	14 c0       	rjmp	.+40     	; 0x1f24 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efc:	6f 81       	ldd	r22, Y+7	; 0x07
    1efe:	78 85       	ldd	r23, Y+8	; 0x08
    1f00:	89 85       	ldd	r24, Y+9	; 0x09
    1f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f04:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	9a 83       	std	Y+2, r25	; 0x02
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_init+0x104>
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	6f ef       	ldi	r22, 0xFF	; 255
    1f28:	0e 94 ab 0c 	call	0x1956	; 0x1956 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f2c:	88 e3       	ldi	r24, 0x38	; 56
    1f2e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f32:	8c e0       	ldi	r24, 0x0C	; 12
    1f34:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_sendCommand>
}
    1f3e:	2e 96       	adiw	r28, 0x0e	; 14
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	e9 97       	sbiw	r28, 0x39	; 57
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	61 e0       	ldi	r22, 0x01	; 1
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_writePin>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e8       	ldi	r26, 0x80	; 128
    1f76:	bf e3       	ldi	r27, 0x3F	; 63
    1f78:	8d ab       	std	Y+53, r24	; 0x35
    1f7a:	9e ab       	std	Y+54, r25	; 0x36
    1f7c:	af ab       	std	Y+55, r26	; 0x37
    1f7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	6d a9       	ldd	r22, Y+53	; 0x35
    1f82:	7e a9       	ldd	r23, Y+54	; 0x36
    1f84:	8f a9       	ldd	r24, Y+55	; 0x37
    1f86:	98 ad       	ldd	r25, Y+56	; 0x38
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a e7       	ldi	r20, 0x7A	; 122
    1f8e:	55 e4       	ldi	r21, 0x45	; 69
    1f90:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	89 ab       	std	Y+49, r24	; 0x31
    1f9a:	9a ab       	std	Y+50, r25	; 0x32
    1f9c:	ab ab       	std	Y+51, r26	; 0x33
    1f9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fa0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <LCD_sendCommand+0x72>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	98 ab       	std	Y+48, r25	; 0x30
    1fbe:	8f a7       	std	Y+47, r24	; 0x2f
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1fc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	6d a9       	ldd	r22, Y+53	; 0x35
    1fdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1fde:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	98 ab       	std	Y+48, r25	; 0x30
    2000:	8f a7       	std	Y+47, r24	; 0x2f
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <LCD_sendCommand+0xd2>
    2004:	80 e9       	ldi	r24, 0x90	; 144
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	9e a7       	std	Y+46, r25	; 0x2e
    200a:	8d a7       	std	Y+45, r24	; 0x2d
    200c:	8d a5       	ldd	r24, Y+45	; 0x2d
    200e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_sendCommand+0xc0>
    2014:	9e a7       	std	Y+46, r25	; 0x2e
    2016:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8f a5       	ldd	r24, Y+47	; 0x2f
    201a:	98 a9       	ldd	r25, Y+48	; 0x30
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	98 ab       	std	Y+48, r25	; 0x30
    2020:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8f a5       	ldd	r24, Y+47	; 0x2f
    2024:	98 a9       	ldd	r25, Y+48	; 0x30
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <LCD_sendCommand+0xb4>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	69 a9       	ldd	r22, Y+49	; 0x31
    202e:	7a a9       	ldd	r23, Y+50	; 0x32
    2030:	8b a9       	ldd	r24, Y+51	; 0x33
    2032:	9c a9       	ldd	r25, Y+52	; 0x34
    2034:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	98 ab       	std	Y+48, r25	; 0x30
    203e:	8f a7       	std	Y+47, r24	; 0x2f
    2040:	8f a5       	ldd	r24, Y+47	; 0x2f
    2042:	98 a9       	ldd	r25, Y+48	; 0x30
    2044:	9c a7       	std	Y+44, r25	; 0x2c
    2046:	8b a7       	std	Y+43, r24	; 0x2b
    2048:	8b a5       	ldd	r24, Y+43	; 0x2b
    204a:	9c a5       	ldd	r25, Y+44	; 0x2c
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_sendCommand+0xfc>
    2050:	9c a7       	std	Y+44, r25	; 0x2c
    2052:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	62 e0       	ldi	r22, 0x02	; 2
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_writePin>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a0 e8       	ldi	r26, 0x80	; 128
    2064:	bf e3       	ldi	r27, 0x3F	; 63
    2066:	8f a3       	std	Y+39, r24	; 0x27
    2068:	98 a7       	std	Y+40, r25	; 0x28
    206a:	a9 a7       	std	Y+41, r26	; 0x29
    206c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	6f a1       	ldd	r22, Y+39	; 0x27
    2070:	78 a5       	ldd	r23, Y+40	; 0x28
    2072:	89 a5       	ldd	r24, Y+41	; 0x29
    2074:	9a a5       	ldd	r25, Y+42	; 0x2a
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a e7       	ldi	r20, 0x7A	; 122
    207c:	55 e4       	ldi	r21, 0x45	; 69
    207e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8b a3       	std	Y+35, r24	; 0x23
    2088:	9c a3       	std	Y+36, r25	; 0x24
    208a:	ad a3       	std	Y+37, r26	; 0x25
    208c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    208e:	6b a1       	ldd	r22, Y+35	; 0x23
    2090:	7c a1       	ldd	r23, Y+36	; 0x24
    2092:	8d a1       	ldd	r24, Y+37	; 0x25
    2094:	9e a1       	ldd	r25, Y+38	; 0x26
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <LCD_sendCommand+0x160>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9a a3       	std	Y+34, r25	; 0x22
    20ac:	89 a3       	std	Y+33, r24	; 0x21
    20ae:	3f c0       	rjmp	.+126    	; 0x212e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    20b0:	6b a1       	ldd	r22, Y+35	; 0x23
    20b2:	7c a1       	ldd	r23, Y+36	; 0x24
    20b4:	8d a1       	ldd	r24, Y+37	; 0x25
    20b6:	9e a1       	ldd	r25, Y+38	; 0x26
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	4c f5       	brge	.+82     	; 0x211a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ca:	78 a5       	ldd	r23, Y+40	; 0x28
    20cc:	89 a5       	ldd	r24, Y+41	; 0x29
    20ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9a a3       	std	Y+34, r25	; 0x22
    20ee:	89 a3       	std	Y+33, r24	; 0x21
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <LCD_sendCommand+0x1c0>
    20f2:	80 e9       	ldi	r24, 0x90	; 144
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	98 a3       	std	Y+32, r25	; 0x20
    20f8:	8f 8f       	std	Y+31, r24	; 0x1f
    20fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20fc:	98 a1       	ldd	r25, Y+32	; 0x20
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_sendCommand+0x1ae>
    2102:	98 a3       	std	Y+32, r25	; 0x20
    2104:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	89 a1       	ldd	r24, Y+33	; 0x21
    2108:	9a a1       	ldd	r25, Y+34	; 0x22
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9a a3       	std	Y+34, r25	; 0x22
    210e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2110:	89 a1       	ldd	r24, Y+33	; 0x21
    2112:	9a a1       	ldd	r25, Y+34	; 0x22
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	69 f7       	brne	.-38     	; 0x20f2 <LCD_sendCommand+0x1a2>
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	6b a1       	ldd	r22, Y+35	; 0x23
    211c:	7c a1       	ldd	r23, Y+36	; 0x24
    211e:	8d a1       	ldd	r24, Y+37	; 0x25
    2120:	9e a1       	ldd	r25, Y+38	; 0x26
    2122:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9a a3       	std	Y+34, r25	; 0x22
    212c:	89 a3       	std	Y+33, r24	; 0x21
    212e:	89 a1       	ldd	r24, Y+33	; 0x21
    2130:	9a a1       	ldd	r25, Y+34	; 0x22
    2132:	9e 8f       	std	Y+30, r25	; 0x1e
    2134:	8d 8f       	std	Y+29, r24	; 0x1d
    2136:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2138:	9e 8d       	ldd	r25, Y+30	; 0x1e
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_sendCommand+0x1ea>
    213e:	9e 8f       	std	Y+30, r25	; 0x1e
    2140:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	69 ad       	ldd	r22, Y+57	; 0x39
    2146:	0e 94 ef 0c 	call	0x19de	; 0x19de <GPIO_writePort>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e8       	ldi	r26, 0x80	; 128
    2150:	bf e3       	ldi	r27, 0x3F	; 63
    2152:	89 8f       	std	Y+25, r24	; 0x19
    2154:	9a 8f       	std	Y+26, r25	; 0x1a
    2156:	ab 8f       	std	Y+27, r26	; 0x1b
    2158:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	69 8d       	ldd	r22, Y+25	; 0x19
    215c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2160:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	55 e4       	ldi	r21, 0x45	; 69
    216a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8d 8b       	std	Y+21, r24	; 0x15
    2174:	9e 8b       	std	Y+22, r25	; 0x16
    2176:	af 8b       	std	Y+23, r26	; 0x17
    2178:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    217a:	6d 89       	ldd	r22, Y+21	; 0x15
    217c:	7e 89       	ldd	r23, Y+22	; 0x16
    217e:	8f 89       	ldd	r24, Y+23	; 0x17
    2180:	98 8d       	ldd	r25, Y+24	; 0x18
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_sendCommand+0x24c>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 8b       	std	Y+20, r25	; 0x14
    2198:	8b 8b       	std	Y+19, r24	; 0x13
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    219c:	6d 89       	ldd	r22, Y+21	; 0x15
    219e:	7e 89       	ldd	r23, Y+22	; 0x16
    21a0:	8f 89       	ldd	r24, Y+23	; 0x17
    21a2:	98 8d       	ldd	r25, Y+24	; 0x18
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	69 8d       	ldd	r22, Y+25	; 0x19
    21b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9c 8b       	std	Y+20, r25	; 0x14
    21da:	8b 8b       	std	Y+19, r24	; 0x13
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_sendCommand+0x2ac>
    21de:	80 e9       	ldi	r24, 0x90	; 144
    21e0:	91 e0       	ldi	r25, 0x01	; 1
    21e2:	9a 8b       	std	Y+18, r25	; 0x12
    21e4:	89 8b       	std	Y+17, r24	; 0x11
    21e6:	89 89       	ldd	r24, Y+17	; 0x11
    21e8:	9a 89       	ldd	r25, Y+18	; 0x12
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_sendCommand+0x29a>
    21ee:	9a 8b       	std	Y+18, r25	; 0x12
    21f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	8b 89       	ldd	r24, Y+19	; 0x13
    21f4:	9c 89       	ldd	r25, Y+20	; 0x14
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9c 8b       	std	Y+20, r25	; 0x14
    21fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	8b 89       	ldd	r24, Y+19	; 0x13
    21fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_sendCommand+0x28e>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6d 89       	ldd	r22, Y+21	; 0x15
    2208:	7e 89       	ldd	r23, Y+22	; 0x16
    220a:	8f 89       	ldd	r24, Y+23	; 0x17
    220c:	98 8d       	ldd	r25, Y+24	; 0x18
    220e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9c 8b       	std	Y+20, r25	; 0x14
    2218:	8b 8b       	std	Y+19, r24	; 0x13
    221a:	8b 89       	ldd	r24, Y+19	; 0x13
    221c:	9c 89       	ldd	r25, Y+20	; 0x14
    221e:	98 8b       	std	Y+16, r25	; 0x10
    2220:	8f 87       	std	Y+15, r24	; 0x0f
    2222:	8f 85       	ldd	r24, Y+15	; 0x0f
    2224:	98 89       	ldd	r25, Y+16	; 0x10
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_sendCommand+0x2d6>
    222a:	98 8b       	std	Y+16, r25	; 0x10
    222c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	62 e0       	ldi	r22, 0x02	; 2
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_writePin>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	a0 e8       	ldi	r26, 0x80	; 128
    223e:	bf e3       	ldi	r27, 0x3F	; 63
    2240:	8b 87       	std	Y+11, r24	; 0x0b
    2242:	9c 87       	std	Y+12, r25	; 0x0c
    2244:	ad 87       	std	Y+13, r26	; 0x0d
    2246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2248:	6b 85       	ldd	r22, Y+11	; 0x0b
    224a:	7c 85       	ldd	r23, Y+12	; 0x0c
    224c:	8d 85       	ldd	r24, Y+13	; 0x0d
    224e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	4a e7       	ldi	r20, 0x7A	; 122
    2256:	55 e4       	ldi	r21, 0x45	; 69
    2258:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	8f 83       	std	Y+7, r24	; 0x07
    2262:	98 87       	std	Y+8, r25	; 0x08
    2264:	a9 87       	std	Y+9, r26	; 0x09
    2266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	2c f4       	brge	.+10     	; 0x228a <LCD_sendCommand+0x33a>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
    2288:	3f c0       	rjmp	.+126    	; 0x2308 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	3f ef       	ldi	r19, 0xFF	; 255
    2296:	4f e7       	ldi	r20, 0x7F	; 127
    2298:	57 e4       	ldi	r21, 0x47	; 71
    229a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    229e:	18 16       	cp	r1, r24
    22a0:	4c f5       	brge	.+82     	; 0x22f4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e2       	ldi	r20, 0x20	; 32
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	0f c0       	rjmp	.+30     	; 0x22ea <LCD_sendCommand+0x39a>
    22cc:	80 e9       	ldi	r24, 0x90	; 144
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <LCD_sendCommand+0x388>
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	9e 83       	std	Y+6, r25	; 0x06
    22e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	69 f7       	brne	.-38     	; 0x22cc <LCD_sendCommand+0x37c>
    22f2:	14 c0       	rjmp	.+40     	; 0x231c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f4:	6f 81       	ldd	r22, Y+7	; 0x07
    22f6:	78 85       	ldd	r23, Y+8	; 0x08
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_sendCommand+0x3c4>
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    231c:	e9 96       	adiw	r28, 0x39	; 57
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	e9 97       	sbiw	r28, 0x39	; 57
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	61 e0       	ldi	r22, 0x01	; 1
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_writePin>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e8       	ldi	r26, 0x80	; 128
    2354:	bf e3       	ldi	r27, 0x3F	; 63
    2356:	8d ab       	std	Y+53, r24	; 0x35
    2358:	9e ab       	std	Y+54, r25	; 0x36
    235a:	af ab       	std	Y+55, r26	; 0x37
    235c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	6d a9       	ldd	r22, Y+53	; 0x35
    2360:	7e a9       	ldd	r23, Y+54	; 0x36
    2362:	8f a9       	ldd	r24, Y+55	; 0x37
    2364:	98 ad       	ldd	r25, Y+56	; 0x38
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a e7       	ldi	r20, 0x7A	; 122
    236c:	55 e4       	ldi	r21, 0x45	; 69
    236e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	89 ab       	std	Y+49, r24	; 0x31
    2378:	9a ab       	std	Y+50, r25	; 0x32
    237a:	ab ab       	std	Y+51, r26	; 0x33
    237c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    237e:	69 a9       	ldd	r22, Y+49	; 0x31
    2380:	7a a9       	ldd	r23, Y+50	; 0x32
    2382:	8b a9       	ldd	r24, Y+51	; 0x33
    2384:	9c a9       	ldd	r25, Y+52	; 0x34
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	98 ab       	std	Y+48, r25	; 0x30
    239c:	8f a7       	std	Y+47, r24	; 0x2f
    239e:	3f c0       	rjmp	.+126    	; 0x241e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    23a0:	69 a9       	ldd	r22, Y+49	; 0x31
    23a2:	7a a9       	ldd	r23, Y+50	; 0x32
    23a4:	8b a9       	ldd	r24, Y+51	; 0x33
    23a6:	9c a9       	ldd	r25, Y+52	; 0x34
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ba:	7e a9       	ldd	r23, Y+54	; 0x36
    23bc:	8f a9       	ldd	r24, Y+55	; 0x37
    23be:	98 ad       	ldd	r25, Y+56	; 0x38
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	98 ab       	std	Y+48, r25	; 0x30
    23de:	8f a7       	std	Y+47, r24	; 0x2f
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <LCD_displayCharacter+0xd2>
    23e2:	80 e9       	ldi	r24, 0x90	; 144
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	9e a7       	std	Y+46, r25	; 0x2e
    23e8:	8d a7       	std	Y+45, r24	; 0x2d
    23ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    23ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_displayCharacter+0xc0>
    23f2:	9e a7       	std	Y+46, r25	; 0x2e
    23f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f8:	98 a9       	ldd	r25, Y+48	; 0x30
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	98 ab       	std	Y+48, r25	; 0x30
    23fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8f a5       	ldd	r24, Y+47	; 0x2f
    2402:	98 a9       	ldd	r25, Y+48	; 0x30
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <LCD_displayCharacter+0xb4>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	69 a9       	ldd	r22, Y+49	; 0x31
    240c:	7a a9       	ldd	r23, Y+50	; 0x32
    240e:	8b a9       	ldd	r24, Y+51	; 0x33
    2410:	9c a9       	ldd	r25, Y+52	; 0x34
    2412:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	98 ab       	std	Y+48, r25	; 0x30
    241c:	8f a7       	std	Y+47, r24	; 0x2f
    241e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2420:	98 a9       	ldd	r25, Y+48	; 0x30
    2422:	9c a7       	std	Y+44, r25	; 0x2c
    2424:	8b a7       	std	Y+43, r24	; 0x2b
    2426:	8b a5       	ldd	r24, Y+43	; 0x2b
    2428:	9c a5       	ldd	r25, Y+44	; 0x2c
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <LCD_displayCharacter+0xfc>
    242e:	9c a7       	std	Y+44, r25	; 0x2c
    2430:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	62 e0       	ldi	r22, 0x02	; 2
    2436:	41 e0       	ldi	r20, 0x01	; 1
    2438:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_writePin>
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a0 e8       	ldi	r26, 0x80	; 128
    2442:	bf e3       	ldi	r27, 0x3F	; 63
    2444:	8f a3       	std	Y+39, r24	; 0x27
    2446:	98 a7       	std	Y+40, r25	; 0x28
    2448:	a9 a7       	std	Y+41, r26	; 0x29
    244a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244c:	6f a1       	ldd	r22, Y+39	; 0x27
    244e:	78 a5       	ldd	r23, Y+40	; 0x28
    2450:	89 a5       	ldd	r24, Y+41	; 0x29
    2452:	9a a5       	ldd	r25, Y+42	; 0x2a
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	4a e7       	ldi	r20, 0x7A	; 122
    245a:	55 e4       	ldi	r21, 0x45	; 69
    245c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8b a3       	std	Y+35, r24	; 0x23
    2466:	9c a3       	std	Y+36, r25	; 0x24
    2468:	ad a3       	std	Y+37, r26	; 0x25
    246a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    246c:	6b a1       	ldd	r22, Y+35	; 0x23
    246e:	7c a1       	ldd	r23, Y+36	; 0x24
    2470:	8d a1       	ldd	r24, Y+37	; 0x25
    2472:	9e a1       	ldd	r25, Y+38	; 0x26
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e8       	ldi	r20, 0x80	; 128
    247a:	5f e3       	ldi	r21, 0x3F	; 63
    247c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2480:	88 23       	and	r24, r24
    2482:	2c f4       	brge	.+10     	; 0x248e <LCD_displayCharacter+0x160>
		__ticks = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9a a3       	std	Y+34, r25	; 0x22
    248a:	89 a3       	std	Y+33, r24	; 0x21
    248c:	3f c0       	rjmp	.+126    	; 0x250c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    248e:	6b a1       	ldd	r22, Y+35	; 0x23
    2490:	7c a1       	ldd	r23, Y+36	; 0x24
    2492:	8d a1       	ldd	r24, Y+37	; 0x25
    2494:	9e a1       	ldd	r25, Y+38	; 0x26
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	3f ef       	ldi	r19, 0xFF	; 255
    249a:	4f e7       	ldi	r20, 0x7F	; 127
    249c:	57 e4       	ldi	r21, 0x47	; 71
    249e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    24a2:	18 16       	cp	r1, r24
    24a4:	4c f5       	brge	.+82     	; 0x24f8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a6:	6f a1       	ldd	r22, Y+39	; 0x27
    24a8:	78 a5       	ldd	r23, Y+40	; 0x28
    24aa:	89 a5       	ldd	r24, Y+41	; 0x29
    24ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e2       	ldi	r20, 0x20	; 32
    24b4:	51 e4       	ldi	r21, 0x41	; 65
    24b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9a a3       	std	Y+34, r25	; 0x22
    24cc:	89 a3       	std	Y+33, r24	; 0x21
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <LCD_displayCharacter+0x1c0>
    24d0:	80 e9       	ldi	r24, 0x90	; 144
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	98 a3       	std	Y+32, r25	; 0x20
    24d6:	8f 8f       	std	Y+31, r24	; 0x1f
    24d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24da:	98 a1       	ldd	r25, Y+32	; 0x20
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <LCD_displayCharacter+0x1ae>
    24e0:	98 a3       	std	Y+32, r25	; 0x20
    24e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e4:	89 a1       	ldd	r24, Y+33	; 0x21
    24e6:	9a a1       	ldd	r25, Y+34	; 0x22
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	9a a3       	std	Y+34, r25	; 0x22
    24ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ee:	89 a1       	ldd	r24, Y+33	; 0x21
    24f0:	9a a1       	ldd	r25, Y+34	; 0x22
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	69 f7       	brne	.-38     	; 0x24d0 <LCD_displayCharacter+0x1a2>
    24f6:	14 c0       	rjmp	.+40     	; 0x2520 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f8:	6b a1       	ldd	r22, Y+35	; 0x23
    24fa:	7c a1       	ldd	r23, Y+36	; 0x24
    24fc:	8d a1       	ldd	r24, Y+37	; 0x25
    24fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2500:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9a a3       	std	Y+34, r25	; 0x22
    250a:	89 a3       	std	Y+33, r24	; 0x21
    250c:	89 a1       	ldd	r24, Y+33	; 0x21
    250e:	9a a1       	ldd	r25, Y+34	; 0x22
    2510:	9e 8f       	std	Y+30, r25	; 0x1e
    2512:	8d 8f       	std	Y+29, r24	; 0x1d
    2514:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2516:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_displayCharacter+0x1ea>
    251c:	9e 8f       	std	Y+30, r25	; 0x1e
    251e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	69 ad       	ldd	r22, Y+57	; 0x39
    2524:	0e 94 ef 0c 	call	0x19de	; 0x19de <GPIO_writePort>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a0 e8       	ldi	r26, 0x80	; 128
    252e:	bf e3       	ldi	r27, 0x3F	; 63
    2530:	89 8f       	std	Y+25, r24	; 0x19
    2532:	9a 8f       	std	Y+26, r25	; 0x1a
    2534:	ab 8f       	std	Y+27, r26	; 0x1b
    2536:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	69 8d       	ldd	r22, Y+25	; 0x19
    253a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	55 e4       	ldi	r21, 0x45	; 69
    2548:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8d 8b       	std	Y+21, r24	; 0x15
    2552:	9e 8b       	std	Y+22, r25	; 0x16
    2554:	af 8b       	std	Y+23, r26	; 0x17
    2556:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2558:	6d 89       	ldd	r22, Y+21	; 0x15
    255a:	7e 89       	ldd	r23, Y+22	; 0x16
    255c:	8f 89       	ldd	r24, Y+23	; 0x17
    255e:	98 8d       	ldd	r25, Y+24	; 0x18
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 8b       	std	Y+20, r25	; 0x14
    2576:	8b 8b       	std	Y+19, r24	; 0x13
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    257a:	6d 89       	ldd	r22, Y+21	; 0x15
    257c:	7e 89       	ldd	r23, Y+22	; 0x16
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	69 8d       	ldd	r22, Y+25	; 0x19
    2594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9c 8b       	std	Y+20, r25	; 0x14
    25b8:	8b 8b       	std	Y+19, r24	; 0x13
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <LCD_displayCharacter+0x2ac>
    25bc:	80 e9       	ldi	r24, 0x90	; 144
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	9a 8b       	std	Y+18, r25	; 0x12
    25c2:	89 8b       	std	Y+17, r24	; 0x11
    25c4:	89 89       	ldd	r24, Y+17	; 0x11
    25c6:	9a 89       	ldd	r25, Y+18	; 0x12
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_displayCharacter+0x29a>
    25cc:	9a 8b       	std	Y+18, r25	; 0x12
    25ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	9c 89       	ldd	r25, Y+20	; 0x14
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9c 8b       	std	Y+20, r25	; 0x14
    25d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <LCD_displayCharacter+0x28e>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6d 89       	ldd	r22, Y+21	; 0x15
    25e6:	7e 89       	ldd	r23, Y+22	; 0x16
    25e8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ea:	98 8d       	ldd	r25, Y+24	; 0x18
    25ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9c 8b       	std	Y+20, r25	; 0x14
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	9c 89       	ldd	r25, Y+20	; 0x14
    25fc:	98 8b       	std	Y+16, r25	; 0x10
    25fe:	8f 87       	std	Y+15, r24	; 0x0f
    2600:	8f 85       	ldd	r24, Y+15	; 0x0f
    2602:	98 89       	ldd	r25, Y+16	; 0x10
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_displayCharacter+0x2d6>
    2608:	98 8b       	std	Y+16, r25	; 0x10
    260a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	62 e0       	ldi	r22, 0x02	; 2
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_writePin>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a0 e8       	ldi	r26, 0x80	; 128
    261c:	bf e3       	ldi	r27, 0x3F	; 63
    261e:	8b 87       	std	Y+11, r24	; 0x0b
    2620:	9c 87       	std	Y+12, r25	; 0x0c
    2622:	ad 87       	std	Y+13, r26	; 0x0d
    2624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	6b 85       	ldd	r22, Y+11	; 0x0b
    2628:	7c 85       	ldd	r23, Y+12	; 0x0c
    262a:	8d 85       	ldd	r24, Y+13	; 0x0d
    262c:	9e 85       	ldd	r25, Y+14	; 0x0e
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a e7       	ldi	r20, 0x7A	; 122
    2634:	55 e4       	ldi	r21, 0x45	; 69
    2636:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8f 83       	std	Y+7, r24	; 0x07
    2640:	98 87       	std	Y+8, r25	; 0x08
    2642:	a9 87       	std	Y+9, r26	; 0x09
    2644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	2c f4       	brge	.+10     	; 0x2668 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
    2666:	3f c0       	rjmp	.+126    	; 0x26e6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	57 e4       	ldi	r21, 0x47	; 71
    2678:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	4c f5       	brge	.+82     	; 0x26d2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	6b 85       	ldd	r22, Y+11	; 0x0b
    2682:	7c 85       	ldd	r23, Y+12	; 0x0c
    2684:	8d 85       	ldd	r24, Y+13	; 0x0d
    2686:	9e 85       	ldd	r25, Y+14	; 0x0e
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <LCD_displayCharacter+0x39a>
    26aa:	80 e9       	ldi	r24, 0x90	; 144
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_displayCharacter+0x388>
    26ba:	9c 83       	std	Y+4, r25	; 0x04
    26bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <LCD_displayCharacter+0x37c>
    26d0:	14 c0       	rjmp	.+40     	; 0x26fa <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	6f 81       	ldd	r22, Y+7	; 0x07
    26d4:	78 85       	ldd	r23, Y+8	; 0x08
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <LCD_displayCharacter+0x3c4>
    26f6:	9a 83       	std	Y+2, r25	; 0x02
    26f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    26fa:	e9 96       	adiw	r28, 0x39	; 57
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <LCD_displayString+0x6>
    2712:	0f 92       	push	r0
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	9b 83       	std	Y+3, r25	; 0x03
    271a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    271c:	19 82       	std	Y+1, r1	; 0x01
    271e:	0e c0       	rjmp	.+28     	; 0x273c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	28 2f       	mov	r18, r24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	9b 81       	ldd	r25, Y+3	; 0x03
    272a:	fc 01       	movw	r30, r24
    272c:	e2 0f       	add	r30, r18
    272e:	f3 1f       	adc	r31, r19
    2730:	80 81       	ld	r24, Z
    2732:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayCharacter>
		i++;
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	8f 5f       	subi	r24, 0xFF	; 255
    273a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	9b 81       	ldd	r25, Y+3	; 0x03
    2746:	fc 01       	movw	r30, r24
    2748:	e2 0f       	add	r30, r18
    274a:	f3 1f       	adc	r31, r19
    274c:	80 81       	ld	r24, Z
    274e:	88 23       	and	r24, r24
    2750:	39 f7       	brne	.-50     	; 0x2720 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	00 d0       	rcall	.+0      	; 0x2764 <LCD_moveCursor+0x6>
    2764:	00 d0       	rcall	.+0      	; 0x2766 <LCD_moveCursor+0x8>
    2766:	0f 92       	push	r0
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	8a 83       	std	Y+2, r24	; 0x02
    276e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	3d 83       	std	Y+5, r19	; 0x05
    2778:	2c 83       	std	Y+4, r18	; 0x04
    277a:	8c 81       	ldd	r24, Y+4	; 0x04
    277c:	9d 81       	ldd	r25, Y+5	; 0x05
    277e:	81 30       	cpi	r24, 0x01	; 1
    2780:	91 05       	cpc	r25, r1
    2782:	c1 f0       	breq	.+48     	; 0x27b4 <LCD_moveCursor+0x56>
    2784:	2c 81       	ldd	r18, Y+4	; 0x04
    2786:	3d 81       	ldd	r19, Y+5	; 0x05
    2788:	22 30       	cpi	r18, 0x02	; 2
    278a:	31 05       	cpc	r19, r1
    278c:	2c f4       	brge	.+10     	; 0x2798 <LCD_moveCursor+0x3a>
    278e:	8c 81       	ldd	r24, Y+4	; 0x04
    2790:	9d 81       	ldd	r25, Y+5	; 0x05
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	61 f0       	breq	.+24     	; 0x27ae <LCD_moveCursor+0x50>
    2796:	19 c0       	rjmp	.+50     	; 0x27ca <LCD_moveCursor+0x6c>
    2798:	2c 81       	ldd	r18, Y+4	; 0x04
    279a:	3d 81       	ldd	r19, Y+5	; 0x05
    279c:	22 30       	cpi	r18, 0x02	; 2
    279e:	31 05       	cpc	r19, r1
    27a0:	69 f0       	breq	.+26     	; 0x27bc <LCD_moveCursor+0x5e>
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	9d 81       	ldd	r25, Y+5	; 0x05
    27a6:	83 30       	cpi	r24, 0x03	; 3
    27a8:	91 05       	cpc	r25, r1
    27aa:	61 f0       	breq	.+24     	; 0x27c4 <LCD_moveCursor+0x66>
    27ac:	0e c0       	rjmp	.+28     	; 0x27ca <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	0b c0       	rjmp	.+22     	; 0x27ca <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	80 5c       	subi	r24, 0xC0	; 192
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	07 c0       	rjmp	.+14     	; 0x27ca <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	80 5f       	subi	r24, 0xF0	; 240
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	80 5b       	subi	r24, 0xB0	; 176
    27c8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	80 68       	ori	r24, 0x80	; 128
    27ce:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_sendCommand>
}
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <LCD_displayStringRowColumn+0x6>
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <LCD_displayStringRowColumn+0x8>
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	6a 83       	std	Y+2, r22	; 0x02
    27f2:	5c 83       	std	Y+4, r21	; 0x04
    27f4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	6a 81       	ldd	r22, Y+2	; 0x02
    27fa:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	0e 94 86 13 	call	0x270c	; 0x270c <LCD_displayString>
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	62 97       	sbiw	r28, 0x12	; 18
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	9a 8b       	std	Y+18, r25	; 0x12
    282a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    282c:	89 89       	ldd	r24, Y+17	; 0x11
    282e:	9a 89       	ldd	r25, Y+18	; 0x12
    2830:	9e 01       	movw	r18, r28
    2832:	2f 5f       	subi	r18, 0xFF	; 255
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	b9 01       	movw	r22, r18
    2838:	4a e0       	ldi	r20, 0x0A	; 10
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	0e 94 bd 14 	call	0x297a	; 0x297a <itoa>
   LCD_displayString(buff); /* Display the string */
    2840:	ce 01       	movw	r24, r28
    2842:	01 96       	adiw	r24, 0x01	; 1
    2844:	0e 94 86 13 	call	0x270c	; 0x270c <LCD_displayString>
}
    2848:	62 96       	adiw	r28, 0x12	; 18
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <LCD_floatToString>:

void LCD_floatToString(float data)
{
    285a:	0f 93       	push	r16
    285c:	1f 93       	push	r17
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	64 97       	sbiw	r28, 0x14	; 20
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	69 8b       	std	Y+17, r22	; 0x11
    2874:	7a 8b       	std	Y+18, r23	; 0x12
    2876:	8b 8b       	std	Y+19, r24	; 0x13
    2878:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ascii result */
   dtostrf(data,2,2,buff);
    287a:	89 89       	ldd	r24, Y+17	; 0x11
    287c:	9a 89       	ldd	r25, Y+18	; 0x12
    287e:	ab 89       	ldd	r26, Y+19	; 0x13
    2880:	bc 89       	ldd	r27, Y+20	; 0x14
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	42 e0       	ldi	r20, 0x02	; 2
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	22 e0       	ldi	r18, 0x02	; 2
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	fe 01       	movw	r30, r28
    2890:	31 96       	adiw	r30, 0x01	; 1
    2892:	8f 01       	movw	r16, r30
    2894:	0e 94 9c 14 	call	0x2938	; 0x2938 <dtostrf>
   LCD_displayString(buff); /* Display the string */
    2898:	ce 01       	movw	r24, r28
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	0e 94 86 13 	call	0x270c	; 0x270c <LCD_displayString>
}
    28a0:	64 96       	adiw	r28, 0x14	; 20
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	1f 91       	pop	r17
    28b2:	0f 91       	pop	r16
    28b4:	08 95       	ret

000028b6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_sendCommand>
}
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <__prologue_saves__>:
    28ca:	2f 92       	push	r2
    28cc:	3f 92       	push	r3
    28ce:	4f 92       	push	r4
    28d0:	5f 92       	push	r5
    28d2:	6f 92       	push	r6
    28d4:	7f 92       	push	r7
    28d6:	8f 92       	push	r8
    28d8:	9f 92       	push	r9
    28da:	af 92       	push	r10
    28dc:	bf 92       	push	r11
    28de:	cf 92       	push	r12
    28e0:	df 92       	push	r13
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	ca 1b       	sub	r28, r26
    28f4:	db 0b       	sbc	r29, r27
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	09 94       	ijmp

00002902 <__epilogue_restores__>:
    2902:	2a 88       	ldd	r2, Y+18	; 0x12
    2904:	39 88       	ldd	r3, Y+17	; 0x11
    2906:	48 88       	ldd	r4, Y+16	; 0x10
    2908:	5f 84       	ldd	r5, Y+15	; 0x0f
    290a:	6e 84       	ldd	r6, Y+14	; 0x0e
    290c:	7d 84       	ldd	r7, Y+13	; 0x0d
    290e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2910:	9b 84       	ldd	r9, Y+11	; 0x0b
    2912:	aa 84       	ldd	r10, Y+10	; 0x0a
    2914:	b9 84       	ldd	r11, Y+9	; 0x09
    2916:	c8 84       	ldd	r12, Y+8	; 0x08
    2918:	df 80       	ldd	r13, Y+7	; 0x07
    291a:	ee 80       	ldd	r14, Y+6	; 0x06
    291c:	fd 80       	ldd	r15, Y+5	; 0x05
    291e:	0c 81       	ldd	r16, Y+4	; 0x04
    2920:	1b 81       	ldd	r17, Y+3	; 0x03
    2922:	aa 81       	ldd	r26, Y+2	; 0x02
    2924:	b9 81       	ldd	r27, Y+1	; 0x01
    2926:	ce 0f       	add	r28, r30
    2928:	d1 1d       	adc	r29, r1
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	ed 01       	movw	r28, r26
    2936:	08 95       	ret

00002938 <dtostrf>:
    2938:	ef 92       	push	r14
    293a:	ff 92       	push	r15
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	f2 2f       	mov	r31, r18
    2942:	f0 2e       	mov	r15, r16
    2944:	47 fd       	sbrc	r20, 7
    2946:	02 c0       	rjmp	.+4      	; 0x294c <dtostrf+0x14>
    2948:	e4 e0       	ldi	r30, 0x04	; 4
    294a:	01 c0       	rjmp	.+2      	; 0x294e <dtostrf+0x16>
    294c:	e4 e1       	ldi	r30, 0x14	; 20
    294e:	24 2f       	mov	r18, r20
    2950:	33 27       	eor	r19, r19
    2952:	27 fd       	sbrc	r18, 7
    2954:	30 95       	com	r19
    2956:	37 ff       	sbrs	r19, 7
    2958:	03 c0       	rjmp	.+6      	; 0x2960 <dtostrf+0x28>
    295a:	30 95       	com	r19
    295c:	21 95       	neg	r18
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	4f 2d       	mov	r20, r15
    2962:	51 2f       	mov	r21, r17
    2964:	0f 2f       	mov	r16, r31
    2966:	ee 2e       	mov	r14, r30
    2968:	0e 94 de 14 	call	0x29bc	; 0x29bc <dtoa_prf>
    296c:	8f 2d       	mov	r24, r15
    296e:	91 2f       	mov	r25, r17
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	ff 90       	pop	r15
    2976:	ef 90       	pop	r14
    2978:	08 95       	ret

0000297a <itoa>:
    297a:	fb 01       	movw	r30, r22
    297c:	9f 01       	movw	r18, r30
    297e:	e8 94       	clt
    2980:	42 30       	cpi	r20, 0x02	; 2
    2982:	c4 f0       	brlt	.+48     	; 0x29b4 <itoa+0x3a>
    2984:	45 32       	cpi	r20, 0x25	; 37
    2986:	b4 f4       	brge	.+44     	; 0x29b4 <itoa+0x3a>
    2988:	4a 30       	cpi	r20, 0x0A	; 10
    298a:	29 f4       	brne	.+10     	; 0x2996 <itoa+0x1c>
    298c:	97 fb       	bst	r25, 7
    298e:	1e f4       	brtc	.+6      	; 0x2996 <itoa+0x1c>
    2990:	90 95       	com	r25
    2992:	81 95       	neg	r24
    2994:	9f 4f       	sbci	r25, 0xFF	; 255
    2996:	64 2f       	mov	r22, r20
    2998:	77 27       	eor	r23, r23
    299a:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__udivmodhi4>
    299e:	80 5d       	subi	r24, 0xD0	; 208
    29a0:	8a 33       	cpi	r24, 0x3A	; 58
    29a2:	0c f0       	brlt	.+2      	; 0x29a6 <itoa+0x2c>
    29a4:	89 5d       	subi	r24, 0xD9	; 217
    29a6:	81 93       	st	Z+, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	a1 f7       	brne	.-24     	; 0x2996 <itoa+0x1c>
    29ae:	16 f4       	brtc	.+4      	; 0x29b4 <itoa+0x3a>
    29b0:	5d e2       	ldi	r21, 0x2D	; 45
    29b2:	51 93       	st	Z+, r21
    29b4:	10 82       	st	Z, r1
    29b6:	c9 01       	movw	r24, r18
    29b8:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <strrev>

000029bc <dtoa_prf>:
    29bc:	a9 e0       	ldi	r26, 0x09	; 9
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e4 ee       	ldi	r30, 0xE4	; 228
    29c2:	f4 e1       	ldi	r31, 0x14	; 20
    29c4:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <__prologue_saves__+0x8>
    29c8:	6a 01       	movw	r12, r20
    29ca:	12 2f       	mov	r17, r18
    29cc:	a0 2e       	mov	r10, r16
    29ce:	be 2c       	mov	r11, r14
    29d0:	2b e3       	ldi	r18, 0x3B	; 59
    29d2:	20 17       	cp	r18, r16
    29d4:	18 f4       	brcc	.+6      	; 0x29dc <dtoa_prf+0x20>
    29d6:	2c e3       	ldi	r18, 0x3C	; 60
    29d8:	92 2e       	mov	r9, r18
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <dtoa_prf+0x24>
    29dc:	90 2e       	mov	r9, r16
    29de:	93 94       	inc	r9
    29e0:	ae 01       	movw	r20, r28
    29e2:	4f 5f       	subi	r20, 0xFF	; 255
    29e4:	5f 4f       	sbci	r21, 0xFF	; 255
    29e6:	27 e0       	ldi	r18, 0x07	; 7
    29e8:	09 2d       	mov	r16, r9
    29ea:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__ftoa_engine>
    29ee:	bc 01       	movw	r22, r24
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	e8 2e       	mov	r14, r24
    29f4:	ff 24       	eor	r15, r15
    29f6:	c7 01       	movw	r24, r14
    29f8:	89 70       	andi	r24, 0x09	; 9
    29fa:	90 70       	andi	r25, 0x00	; 0
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	11 f4       	brne	.+4      	; 0x2a04 <dtoa_prf+0x48>
    2a00:	ad e2       	ldi	r26, 0x2D	; 45
    2a02:	09 c0       	rjmp	.+18     	; 0x2a16 <dtoa_prf+0x5a>
    2a04:	b1 fe       	sbrs	r11, 1
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <dtoa_prf+0x50>
    2a08:	ab e2       	ldi	r26, 0x2B	; 43
    2a0a:	05 c0       	rjmp	.+10     	; 0x2a16 <dtoa_prf+0x5a>
    2a0c:	b0 fc       	sbrc	r11, 0
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <dtoa_prf+0x58>
    2a10:	a0 e0       	ldi	r26, 0x00	; 0
    2a12:	01 c0       	rjmp	.+2      	; 0x2a16 <dtoa_prf+0x5a>
    2a14:	a0 e2       	ldi	r26, 0x20	; 32
    2a16:	e3 fe       	sbrs	r14, 3
    2a18:	3b c0       	rjmp	.+118    	; 0x2a90 <dtoa_prf+0xd4>
    2a1a:	aa 23       	and	r26, r26
    2a1c:	11 f4       	brne	.+4      	; 0x2a22 <dtoa_prf+0x66>
    2a1e:	23 e0       	ldi	r18, 0x03	; 3
    2a20:	01 c0       	rjmp	.+2      	; 0x2a24 <dtoa_prf+0x68>
    2a22:	24 e0       	ldi	r18, 0x04	; 4
    2a24:	21 17       	cp	r18, r17
    2a26:	10 f0       	brcs	.+4      	; 0x2a2c <dtoa_prf+0x70>
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <dtoa_prf+0x74>
    2a2c:	12 1b       	sub	r17, r18
    2a2e:	21 2f       	mov	r18, r17
    2a30:	eb 2c       	mov	r14, r11
    2a32:	b4 fe       	sbrs	r11, 4
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <dtoa_prf+0x7e>
    2a36:	32 2f       	mov	r19, r18
    2a38:	0a c0       	rjmp	.+20     	; 0x2a4e <dtoa_prf+0x92>
    2a3a:	f6 01       	movw	r30, r12
    2a3c:	32 2f       	mov	r19, r18
    2a3e:	80 e2       	ldi	r24, 0x20	; 32
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <dtoa_prf+0x8a>
    2a42:	81 93       	st	Z+, r24
    2a44:	31 50       	subi	r19, 0x01	; 1
    2a46:	33 23       	and	r19, r19
    2a48:	e1 f7       	brne	.-8      	; 0x2a42 <dtoa_prf+0x86>
    2a4a:	c2 0e       	add	r12, r18
    2a4c:	d1 1c       	adc	r13, r1
    2a4e:	aa 23       	and	r26, r26
    2a50:	19 f0       	breq	.+6      	; 0x2a58 <dtoa_prf+0x9c>
    2a52:	f6 01       	movw	r30, r12
    2a54:	a1 93       	st	Z+, r26
    2a56:	6f 01       	movw	r12, r30
    2a58:	f6 01       	movw	r30, r12
    2a5a:	31 96       	adiw	r30, 0x01	; 1
    2a5c:	e2 fe       	sbrs	r14, 2
    2a5e:	05 c0       	rjmp	.+10     	; 0x2a6a <dtoa_prf+0xae>
    2a60:	9e e4       	ldi	r25, 0x4E	; 78
    2a62:	d6 01       	movw	r26, r12
    2a64:	9c 93       	st	X, r25
    2a66:	81 e4       	ldi	r24, 0x41	; 65
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <dtoa_prf+0xb6>
    2a6a:	9e e6       	ldi	r25, 0x6E	; 110
    2a6c:	d6 01       	movw	r26, r12
    2a6e:	9c 93       	st	X, r25
    2a70:	81 e6       	ldi	r24, 0x61	; 97
    2a72:	11 96       	adiw	r26, 0x01	; 1
    2a74:	8c 93       	st	X, r24
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	32 96       	adiw	r30, 0x02	; 2
    2a7a:	df 01       	movw	r26, r30
    2a7c:	83 2f       	mov	r24, r19
    2a7e:	90 e2       	ldi	r25, 0x20	; 32
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <dtoa_prf+0xca>
    2a82:	9d 93       	st	X+, r25
    2a84:	81 50       	subi	r24, 0x01	; 1
    2a86:	88 23       	and	r24, r24
    2a88:	e1 f7       	brne	.-8      	; 0x2a82 <dtoa_prf+0xc6>
    2a8a:	e3 0f       	add	r30, r19
    2a8c:	f1 1d       	adc	r31, r1
    2a8e:	40 c0       	rjmp	.+128    	; 0x2b10 <dtoa_prf+0x154>
    2a90:	e2 fe       	sbrs	r14, 2
    2a92:	42 c0       	rjmp	.+132    	; 0x2b18 <dtoa_prf+0x15c>
    2a94:	aa 23       	and	r26, r26
    2a96:	11 f4       	brne	.+4      	; 0x2a9c <dtoa_prf+0xe0>
    2a98:	23 e0       	ldi	r18, 0x03	; 3
    2a9a:	01 c0       	rjmp	.+2      	; 0x2a9e <dtoa_prf+0xe2>
    2a9c:	24 e0       	ldi	r18, 0x04	; 4
    2a9e:	21 17       	cp	r18, r17
    2aa0:	10 f0       	brcs	.+4      	; 0x2aa6 <dtoa_prf+0xea>
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <dtoa_prf+0xee>
    2aa6:	12 1b       	sub	r17, r18
    2aa8:	21 2f       	mov	r18, r17
    2aaa:	eb 2c       	mov	r14, r11
    2aac:	b4 fe       	sbrs	r11, 4
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <dtoa_prf+0xf8>
    2ab0:	92 2f       	mov	r25, r18
    2ab2:	0a c0       	rjmp	.+20     	; 0x2ac8 <dtoa_prf+0x10c>
    2ab4:	f6 01       	movw	r30, r12
    2ab6:	92 2f       	mov	r25, r18
    2ab8:	80 e2       	ldi	r24, 0x20	; 32
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <dtoa_prf+0x104>
    2abc:	81 93       	st	Z+, r24
    2abe:	91 50       	subi	r25, 0x01	; 1
    2ac0:	99 23       	and	r25, r25
    2ac2:	e1 f7       	brne	.-8      	; 0x2abc <dtoa_prf+0x100>
    2ac4:	c2 0e       	add	r12, r18
    2ac6:	d1 1c       	adc	r13, r1
    2ac8:	aa 23       	and	r26, r26
    2aca:	19 f0       	breq	.+6      	; 0x2ad2 <dtoa_prf+0x116>
    2acc:	f6 01       	movw	r30, r12
    2ace:	a1 93       	st	Z+, r26
    2ad0:	6f 01       	movw	r12, r30
    2ad2:	f6 01       	movw	r30, r12
    2ad4:	31 96       	adiw	r30, 0x01	; 1
    2ad6:	e2 fe       	sbrs	r14, 2
    2ad8:	08 c0       	rjmp	.+16     	; 0x2aea <dtoa_prf+0x12e>
    2ada:	89 e4       	ldi	r24, 0x49	; 73
    2adc:	d6 01       	movw	r26, r12
    2ade:	8c 93       	st	X, r24
    2ae0:	8e e4       	ldi	r24, 0x4E	; 78
    2ae2:	11 96       	adiw	r26, 0x01	; 1
    2ae4:	8c 93       	st	X, r24
    2ae6:	86 e4       	ldi	r24, 0x46	; 70
    2ae8:	07 c0       	rjmp	.+14     	; 0x2af8 <dtoa_prf+0x13c>
    2aea:	89 e6       	ldi	r24, 0x69	; 105
    2aec:	d6 01       	movw	r26, r12
    2aee:	8c 93       	st	X, r24
    2af0:	8e e6       	ldi	r24, 0x6E	; 110
    2af2:	11 96       	adiw	r26, 0x01	; 1
    2af4:	8c 93       	st	X, r24
    2af6:	86 e6       	ldi	r24, 0x66	; 102
    2af8:	81 83       	std	Z+1, r24	; 0x01
    2afa:	32 96       	adiw	r30, 0x02	; 2
    2afc:	df 01       	movw	r26, r30
    2afe:	89 2f       	mov	r24, r25
    2b00:	20 e2       	ldi	r18, 0x20	; 32
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <dtoa_prf+0x14c>
    2b04:	2d 93       	st	X+, r18
    2b06:	81 50       	subi	r24, 0x01	; 1
    2b08:	88 23       	and	r24, r24
    2b0a:	e1 f7       	brne	.-8      	; 0x2b04 <dtoa_prf+0x148>
    2b0c:	e9 0f       	add	r30, r25
    2b0e:	f1 1d       	adc	r31, r1
    2b10:	10 82       	st	Z, r1
    2b12:	2e ef       	ldi	r18, 0xFE	; 254
    2b14:	3f ef       	ldi	r19, 0xFF	; 255
    2b16:	af c0       	rjmp	.+350    	; 0x2c76 <dtoa_prf+0x2ba>
    2b18:	16 16       	cp	r1, r22
    2b1a:	17 06       	cpc	r1, r23
    2b1c:	1c f0       	brlt	.+6      	; 0x2b24 <dtoa_prf+0x168>
    2b1e:	41 e0       	ldi	r20, 0x01	; 1
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	03 c0       	rjmp	.+6      	; 0x2b2a <dtoa_prf+0x16e>
    2b24:	ab 01       	movw	r20, r22
    2b26:	4f 5f       	subi	r20, 0xFF	; 255
    2b28:	5f 4f       	sbci	r21, 0xFF	; 255
    2b2a:	aa 20       	and	r10, r10
    2b2c:	19 f4       	brne	.+6      	; 0x2b34 <dtoa_prf+0x178>
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	03 c0       	rjmp	.+6      	; 0x2b3a <dtoa_prf+0x17e>
    2b34:	8a 2d       	mov	r24, r10
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	aa 23       	and	r26, r26
    2b40:	11 f0       	breq	.+4      	; 0x2b46 <dtoa_prf+0x18a>
    2b42:	21 e0       	ldi	r18, 0x01	; 1
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	24 0f       	add	r18, r20
    2b48:	35 1f       	adc	r19, r21
    2b4a:	28 0f       	add	r18, r24
    2b4c:	39 1f       	adc	r19, r25
    2b4e:	81 2f       	mov	r24, r17
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	28 17       	cp	r18, r24
    2b54:	39 07       	cpc	r19, r25
    2b56:	14 f0       	brlt	.+4      	; 0x2b5c <dtoa_prf+0x1a0>
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <dtoa_prf+0x1a4>
    2b5c:	12 1b       	sub	r17, r18
    2b5e:	21 2f       	mov	r18, r17
    2b60:	4b 2d       	mov	r20, r11
    2b62:	50 e0       	ldi	r21, 0x00	; 0
    2b64:	ca 01       	movw	r24, r20
    2b66:	80 71       	andi	r24, 0x10	; 16
    2b68:	90 70       	andi	r25, 0x00	; 0
    2b6a:	b4 fc       	sbrc	r11, 4
    2b6c:	0d c0       	rjmp	.+26     	; 0x2b88 <dtoa_prf+0x1cc>
    2b6e:	b3 fc       	sbrc	r11, 3
    2b70:	0b c0       	rjmp	.+22     	; 0x2b88 <dtoa_prf+0x1cc>
    2b72:	f6 01       	movw	r30, r12
    2b74:	32 2f       	mov	r19, r18
    2b76:	40 e2       	ldi	r20, 0x20	; 32
    2b78:	02 c0       	rjmp	.+4      	; 0x2b7e <dtoa_prf+0x1c2>
    2b7a:	41 93       	st	Z+, r20
    2b7c:	31 50       	subi	r19, 0x01	; 1
    2b7e:	33 23       	and	r19, r19
    2b80:	e1 f7       	brne	.-8      	; 0x2b7a <dtoa_prf+0x1be>
    2b82:	c2 0e       	add	r12, r18
    2b84:	d1 1c       	adc	r13, r1
    2b86:	01 c0       	rjmp	.+2      	; 0x2b8a <dtoa_prf+0x1ce>
    2b88:	32 2f       	mov	r19, r18
    2b8a:	aa 23       	and	r26, r26
    2b8c:	19 f0       	breq	.+6      	; 0x2b94 <dtoa_prf+0x1d8>
    2b8e:	f6 01       	movw	r30, r12
    2b90:	a1 93       	st	Z+, r26
    2b92:	6f 01       	movw	r12, r30
    2b94:	89 2b       	or	r24, r25
    2b96:	11 f0       	breq	.+4      	; 0x2b9c <dtoa_prf+0x1e0>
    2b98:	13 2f       	mov	r17, r19
    2b9a:	0a c0       	rjmp	.+20     	; 0x2bb0 <dtoa_prf+0x1f4>
    2b9c:	f6 01       	movw	r30, r12
    2b9e:	13 2f       	mov	r17, r19
    2ba0:	80 e3       	ldi	r24, 0x30	; 48
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <dtoa_prf+0x1ec>
    2ba4:	81 93       	st	Z+, r24
    2ba6:	11 50       	subi	r17, 0x01	; 1
    2ba8:	11 23       	and	r17, r17
    2baa:	e1 f7       	brne	.-8      	; 0x2ba4 <dtoa_prf+0x1e8>
    2bac:	c3 0e       	add	r12, r19
    2bae:	d1 1c       	adc	r13, r1
    2bb0:	09 2d       	mov	r16, r9
    2bb2:	06 0f       	add	r16, r22
    2bb4:	ba 80       	ldd	r11, Y+2	; 0x02
    2bb6:	90 e1       	ldi	r25, 0x10	; 16
    2bb8:	89 2e       	mov	r8, r25
    2bba:	91 2c       	mov	r9, r1
    2bbc:	8e 20       	and	r8, r14
    2bbe:	9f 20       	and	r9, r15
    2bc0:	e4 fe       	sbrs	r14, 4
    2bc2:	04 c0       	rjmp	.+8      	; 0x2bcc <dtoa_prf+0x210>
    2bc4:	f1 e3       	ldi	r31, 0x31	; 49
    2bc6:	bf 16       	cp	r11, r31
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <dtoa_prf+0x210>
    2bca:	01 50       	subi	r16, 0x01	; 1
    2bcc:	10 16       	cp	r1, r16
    2bce:	14 f0       	brlt	.+4      	; 0x2bd4 <dtoa_prf+0x218>
    2bd0:	01 e0       	ldi	r16, 0x01	; 1
    2bd2:	03 c0       	rjmp	.+6      	; 0x2bda <dtoa_prf+0x21e>
    2bd4:	09 30       	cpi	r16, 0x09	; 9
    2bd6:	08 f0       	brcs	.+2      	; 0x2bda <dtoa_prf+0x21e>
    2bd8:	08 e0       	ldi	r16, 0x08	; 8
    2bda:	9b 01       	movw	r18, r22
    2bdc:	77 ff       	sbrs	r23, 7
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <dtoa_prf+0x228>
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	cb 01       	movw	r24, r22
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	82 1b       	sub	r24, r18
    2bea:	93 0b       	sbc	r25, r19
    2bec:	fe 01       	movw	r30, r28
    2bee:	31 96       	adiw	r30, 0x01	; 1
    2bf0:	e8 0f       	add	r30, r24
    2bf2:	f9 1f       	adc	r31, r25
    2bf4:	8e e2       	ldi	r24, 0x2E	; 46
    2bf6:	f8 2e       	mov	r15, r24
    2bf8:	3b 01       	movw	r6, r22
    2bfa:	60 1a       	sub	r6, r16
    2bfc:	71 08       	sbc	r7, r1
    2bfe:	8a 2d       	mov	r24, r10
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	44 27       	eor	r20, r20
    2c04:	55 27       	eor	r21, r21
    2c06:	48 1b       	sub	r20, r24
    2c08:	59 0b       	sbc	r21, r25
    2c0a:	8f ef       	ldi	r24, 0xFF	; 255
    2c0c:	2f 3f       	cpi	r18, 0xFF	; 255
    2c0e:	38 07       	cpc	r19, r24
    2c10:	19 f4       	brne	.+6      	; 0x2c18 <dtoa_prf+0x25c>
    2c12:	d6 01       	movw	r26, r12
    2c14:	fd 92       	st	X+, r15
    2c16:	6d 01       	movw	r12, r26
    2c18:	62 17       	cp	r22, r18
    2c1a:	73 07       	cpc	r23, r19
    2c1c:	2c f0       	brlt	.+10     	; 0x2c28 <dtoa_prf+0x26c>
    2c1e:	62 16       	cp	r6, r18
    2c20:	73 06       	cpc	r7, r19
    2c22:	14 f4       	brge	.+4      	; 0x2c28 <dtoa_prf+0x26c>
    2c24:	80 81       	ld	r24, Z
    2c26:	01 c0       	rjmp	.+2      	; 0x2c2a <dtoa_prf+0x26e>
    2c28:	80 e3       	ldi	r24, 0x30	; 48
    2c2a:	21 50       	subi	r18, 0x01	; 1
    2c2c:	30 40       	sbci	r19, 0x00	; 0
    2c2e:	31 96       	adiw	r30, 0x01	; 1
    2c30:	24 17       	cp	r18, r20
    2c32:	35 07       	cpc	r19, r21
    2c34:	24 f0       	brlt	.+8      	; 0x2c3e <dtoa_prf+0x282>
    2c36:	d6 01       	movw	r26, r12
    2c38:	8d 93       	st	X+, r24
    2c3a:	6d 01       	movw	r12, r26
    2c3c:	e6 cf       	rjmp	.-52     	; 0x2c0a <dtoa_prf+0x24e>
    2c3e:	26 17       	cp	r18, r22
    2c40:	37 07       	cpc	r19, r23
    2c42:	49 f4       	brne	.+18     	; 0x2c56 <dtoa_prf+0x29a>
    2c44:	b5 e3       	ldi	r27, 0x35	; 53
    2c46:	bb 15       	cp	r27, r11
    2c48:	28 f0       	brcs	.+10     	; 0x2c54 <dtoa_prf+0x298>
    2c4a:	bb 16       	cp	r11, r27
    2c4c:	21 f4       	brne	.+8      	; 0x2c56 <dtoa_prf+0x29a>
    2c4e:	81 14       	cp	r8, r1
    2c50:	91 04       	cpc	r9, r1
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <dtoa_prf+0x29a>
    2c54:	81 e3       	ldi	r24, 0x31	; 49
    2c56:	f6 01       	movw	r30, r12
    2c58:	81 93       	st	Z+, r24
    2c5a:	d6 01       	movw	r26, r12
    2c5c:	81 2f       	mov	r24, r17
    2c5e:	90 e2       	ldi	r25, 0x20	; 32
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <dtoa_prf+0x2aa>
    2c62:	9c 93       	st	X, r25
    2c64:	81 50       	subi	r24, 0x01	; 1
    2c66:	11 96       	adiw	r26, 0x01	; 1
    2c68:	88 23       	and	r24, r24
    2c6a:	d9 f7       	brne	.-10     	; 0x2c62 <dtoa_prf+0x2a6>
    2c6c:	e1 0f       	add	r30, r17
    2c6e:	f1 1d       	adc	r31, r1
    2c70:	10 82       	st	Z, r1
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	c9 01       	movw	r24, r18
    2c78:	29 96       	adiw	r28, 0x09	; 9
    2c7a:	ee e0       	ldi	r30, 0x0E	; 14
    2c7c:	0c 94 85 14 	jmp	0x290a	; 0x290a <__epilogue_restores__+0x8>

00002c80 <__ftoa_engine>:
    2c80:	28 30       	cpi	r18, 0x08	; 8
    2c82:	08 f0       	brcs	.+2      	; 0x2c86 <__ftoa_engine+0x6>
    2c84:	27 e0       	ldi	r18, 0x07	; 7
    2c86:	33 27       	eor	r19, r19
    2c88:	da 01       	movw	r26, r20
    2c8a:	99 0f       	add	r25, r25
    2c8c:	31 1d       	adc	r19, r1
    2c8e:	87 fd       	sbrc	r24, 7
    2c90:	91 60       	ori	r25, 0x01	; 1
    2c92:	00 96       	adiw	r24, 0x00	; 0
    2c94:	61 05       	cpc	r22, r1
    2c96:	71 05       	cpc	r23, r1
    2c98:	39 f4       	brne	.+14     	; 0x2ca8 <__ftoa_engine+0x28>
    2c9a:	32 60       	ori	r19, 0x02	; 2
    2c9c:	2e 5f       	subi	r18, 0xFE	; 254
    2c9e:	3d 93       	st	X+, r19
    2ca0:	30 e3       	ldi	r19, 0x30	; 48
    2ca2:	2a 95       	dec	r18
    2ca4:	e1 f7       	brne	.-8      	; 0x2c9e <__ftoa_engine+0x1e>
    2ca6:	08 95       	ret
    2ca8:	9f 3f       	cpi	r25, 0xFF	; 255
    2caa:	30 f0       	brcs	.+12     	; 0x2cb8 <__ftoa_engine+0x38>
    2cac:	80 38       	cpi	r24, 0x80	; 128
    2cae:	71 05       	cpc	r23, r1
    2cb0:	61 05       	cpc	r22, r1
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <__ftoa_engine+0x36>
    2cb4:	3c 5f       	subi	r19, 0xFC	; 252
    2cb6:	3c 5f       	subi	r19, 0xFC	; 252
    2cb8:	3d 93       	st	X+, r19
    2cba:	91 30       	cpi	r25, 0x01	; 1
    2cbc:	08 f0       	brcs	.+2      	; 0x2cc0 <__ftoa_engine+0x40>
    2cbe:	80 68       	ori	r24, 0x80	; 128
    2cc0:	91 1d       	adc	r25, r1
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	1f 93       	push	r17
    2cc8:	0f 93       	push	r16
    2cca:	ff 92       	push	r15
    2ccc:	ef 92       	push	r14
    2cce:	19 2f       	mov	r17, r25
    2cd0:	98 7f       	andi	r25, 0xF8	; 248
    2cd2:	96 95       	lsr	r25
    2cd4:	e9 2f       	mov	r30, r25
    2cd6:	96 95       	lsr	r25
    2cd8:	96 95       	lsr	r25
    2cda:	e9 0f       	add	r30, r25
    2cdc:	ff 27       	eor	r31, r31
    2cde:	e2 55       	subi	r30, 0x52	; 82
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	99 27       	eor	r25, r25
    2ce4:	33 27       	eor	r19, r19
    2ce6:	ee 24       	eor	r14, r14
    2ce8:	ff 24       	eor	r15, r15
    2cea:	a7 01       	movw	r20, r14
    2cec:	e7 01       	movw	r28, r14
    2cee:	05 90       	lpm	r0, Z+
    2cf0:	08 94       	sec
    2cf2:	07 94       	ror	r0
    2cf4:	28 f4       	brcc	.+10     	; 0x2d00 <__ftoa_engine+0x80>
    2cf6:	36 0f       	add	r19, r22
    2cf8:	e7 1e       	adc	r14, r23
    2cfa:	f8 1e       	adc	r15, r24
    2cfc:	49 1f       	adc	r20, r25
    2cfe:	51 1d       	adc	r21, r1
    2d00:	66 0f       	add	r22, r22
    2d02:	77 1f       	adc	r23, r23
    2d04:	88 1f       	adc	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	06 94       	lsr	r0
    2d0a:	a1 f7       	brne	.-24     	; 0x2cf4 <__ftoa_engine+0x74>
    2d0c:	05 90       	lpm	r0, Z+
    2d0e:	07 94       	ror	r0
    2d10:	28 f4       	brcc	.+10     	; 0x2d1c <__ftoa_engine+0x9c>
    2d12:	e7 0e       	add	r14, r23
    2d14:	f8 1e       	adc	r15, r24
    2d16:	49 1f       	adc	r20, r25
    2d18:	56 1f       	adc	r21, r22
    2d1a:	c1 1d       	adc	r28, r1
    2d1c:	77 0f       	add	r23, r23
    2d1e:	88 1f       	adc	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	66 1f       	adc	r22, r22
    2d24:	06 94       	lsr	r0
    2d26:	a1 f7       	brne	.-24     	; 0x2d10 <__ftoa_engine+0x90>
    2d28:	05 90       	lpm	r0, Z+
    2d2a:	07 94       	ror	r0
    2d2c:	28 f4       	brcc	.+10     	; 0x2d38 <__ftoa_engine+0xb8>
    2d2e:	f8 0e       	add	r15, r24
    2d30:	49 1f       	adc	r20, r25
    2d32:	56 1f       	adc	r21, r22
    2d34:	c7 1f       	adc	r28, r23
    2d36:	d1 1d       	adc	r29, r1
    2d38:	88 0f       	add	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	66 1f       	adc	r22, r22
    2d3e:	77 1f       	adc	r23, r23
    2d40:	06 94       	lsr	r0
    2d42:	a1 f7       	brne	.-24     	; 0x2d2c <__ftoa_engine+0xac>
    2d44:	05 90       	lpm	r0, Z+
    2d46:	07 94       	ror	r0
    2d48:	20 f4       	brcc	.+8      	; 0x2d52 <__ftoa_engine+0xd2>
    2d4a:	49 0f       	add	r20, r25
    2d4c:	56 1f       	adc	r21, r22
    2d4e:	c7 1f       	adc	r28, r23
    2d50:	d8 1f       	adc	r29, r24
    2d52:	99 0f       	add	r25, r25
    2d54:	66 1f       	adc	r22, r22
    2d56:	77 1f       	adc	r23, r23
    2d58:	88 1f       	adc	r24, r24
    2d5a:	06 94       	lsr	r0
    2d5c:	a9 f7       	brne	.-22     	; 0x2d48 <__ftoa_engine+0xc8>
    2d5e:	84 91       	lpm	r24, Z+
    2d60:	10 95       	com	r17
    2d62:	17 70       	andi	r17, 0x07	; 7
    2d64:	41 f0       	breq	.+16     	; 0x2d76 <__ftoa_engine+0xf6>
    2d66:	d6 95       	lsr	r29
    2d68:	c7 95       	ror	r28
    2d6a:	57 95       	ror	r21
    2d6c:	47 95       	ror	r20
    2d6e:	f7 94       	ror	r15
    2d70:	e7 94       	ror	r14
    2d72:	1a 95       	dec	r17
    2d74:	c1 f7       	brne	.-16     	; 0x2d66 <__ftoa_engine+0xe6>
    2d76:	e4 e5       	ldi	r30, 0x54	; 84
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	68 94       	set
    2d7c:	15 90       	lpm	r1, Z+
    2d7e:	15 91       	lpm	r17, Z+
    2d80:	35 91       	lpm	r19, Z+
    2d82:	65 91       	lpm	r22, Z+
    2d84:	95 91       	lpm	r25, Z+
    2d86:	05 90       	lpm	r0, Z+
    2d88:	7f e2       	ldi	r23, 0x2F	; 47
    2d8a:	73 95       	inc	r23
    2d8c:	e1 18       	sub	r14, r1
    2d8e:	f1 0a       	sbc	r15, r17
    2d90:	43 0b       	sbc	r20, r19
    2d92:	56 0b       	sbc	r21, r22
    2d94:	c9 0b       	sbc	r28, r25
    2d96:	d0 09       	sbc	r29, r0
    2d98:	c0 f7       	brcc	.-16     	; 0x2d8a <__ftoa_engine+0x10a>
    2d9a:	e1 0c       	add	r14, r1
    2d9c:	f1 1e       	adc	r15, r17
    2d9e:	43 1f       	adc	r20, r19
    2da0:	56 1f       	adc	r21, r22
    2da2:	c9 1f       	adc	r28, r25
    2da4:	d0 1d       	adc	r29, r0
    2da6:	7e f4       	brtc	.+30     	; 0x2dc6 <__ftoa_engine+0x146>
    2da8:	70 33       	cpi	r23, 0x30	; 48
    2daa:	11 f4       	brne	.+4      	; 0x2db0 <__ftoa_engine+0x130>
    2dac:	8a 95       	dec	r24
    2dae:	e6 cf       	rjmp	.-52     	; 0x2d7c <__ftoa_engine+0xfc>
    2db0:	e8 94       	clt
    2db2:	01 50       	subi	r16, 0x01	; 1
    2db4:	30 f0       	brcs	.+12     	; 0x2dc2 <__ftoa_engine+0x142>
    2db6:	08 0f       	add	r16, r24
    2db8:	0a f4       	brpl	.+2      	; 0x2dbc <__ftoa_engine+0x13c>
    2dba:	00 27       	eor	r16, r16
    2dbc:	02 17       	cp	r16, r18
    2dbe:	08 f4       	brcc	.+2      	; 0x2dc2 <__ftoa_engine+0x142>
    2dc0:	20 2f       	mov	r18, r16
    2dc2:	23 95       	inc	r18
    2dc4:	02 2f       	mov	r16, r18
    2dc6:	7a 33       	cpi	r23, 0x3A	; 58
    2dc8:	28 f0       	brcs	.+10     	; 0x2dd4 <__ftoa_engine+0x154>
    2dca:	79 e3       	ldi	r23, 0x39	; 57
    2dcc:	7d 93       	st	X+, r23
    2dce:	2a 95       	dec	r18
    2dd0:	e9 f7       	brne	.-6      	; 0x2dcc <__ftoa_engine+0x14c>
    2dd2:	10 c0       	rjmp	.+32     	; 0x2df4 <__ftoa_engine+0x174>
    2dd4:	7d 93       	st	X+, r23
    2dd6:	2a 95       	dec	r18
    2dd8:	89 f6       	brne	.-94     	; 0x2d7c <__ftoa_engine+0xfc>
    2dda:	06 94       	lsr	r0
    2ddc:	97 95       	ror	r25
    2dde:	67 95       	ror	r22
    2de0:	37 95       	ror	r19
    2de2:	17 95       	ror	r17
    2de4:	17 94       	ror	r1
    2de6:	e1 18       	sub	r14, r1
    2de8:	f1 0a       	sbc	r15, r17
    2dea:	43 0b       	sbc	r20, r19
    2dec:	56 0b       	sbc	r21, r22
    2dee:	c9 0b       	sbc	r28, r25
    2df0:	d0 09       	sbc	r29, r0
    2df2:	98 f0       	brcs	.+38     	; 0x2e1a <__ftoa_engine+0x19a>
    2df4:	23 95       	inc	r18
    2df6:	7e 91       	ld	r23, -X
    2df8:	73 95       	inc	r23
    2dfa:	7a 33       	cpi	r23, 0x3A	; 58
    2dfc:	08 f0       	brcs	.+2      	; 0x2e00 <__ftoa_engine+0x180>
    2dfe:	70 e3       	ldi	r23, 0x30	; 48
    2e00:	7c 93       	st	X, r23
    2e02:	20 13       	cpse	r18, r16
    2e04:	b8 f7       	brcc	.-18     	; 0x2df4 <__ftoa_engine+0x174>
    2e06:	7e 91       	ld	r23, -X
    2e08:	70 61       	ori	r23, 0x10	; 16
    2e0a:	7d 93       	st	X+, r23
    2e0c:	30 f0       	brcs	.+12     	; 0x2e1a <__ftoa_engine+0x19a>
    2e0e:	83 95       	inc	r24
    2e10:	71 e3       	ldi	r23, 0x31	; 49
    2e12:	7d 93       	st	X+, r23
    2e14:	70 e3       	ldi	r23, 0x30	; 48
    2e16:	2a 95       	dec	r18
    2e18:	e1 f7       	brne	.-8      	; 0x2e12 <__ftoa_engine+0x192>
    2e1a:	11 24       	eor	r1, r1
    2e1c:	ef 90       	pop	r14
    2e1e:	ff 90       	pop	r15
    2e20:	0f 91       	pop	r16
    2e22:	1f 91       	pop	r17
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	99 27       	eor	r25, r25
    2e2a:	87 fd       	sbrc	r24, 7
    2e2c:	90 95       	com	r25
    2e2e:	08 95       	ret

00002e30 <strrev>:
    2e30:	dc 01       	movw	r26, r24
    2e32:	fc 01       	movw	r30, r24
    2e34:	67 2f       	mov	r22, r23
    2e36:	71 91       	ld	r23, Z+
    2e38:	77 23       	and	r23, r23
    2e3a:	e1 f7       	brne	.-8      	; 0x2e34 <strrev+0x4>
    2e3c:	32 97       	sbiw	r30, 0x02	; 2
    2e3e:	04 c0       	rjmp	.+8      	; 0x2e48 <strrev+0x18>
    2e40:	7c 91       	ld	r23, X
    2e42:	6d 93       	st	X+, r22
    2e44:	70 83       	st	Z, r23
    2e46:	62 91       	ld	r22, -Z
    2e48:	ae 17       	cp	r26, r30
    2e4a:	bf 07       	cpc	r27, r31
    2e4c:	c8 f3       	brcs	.-14     	; 0x2e40 <strrev+0x10>
    2e4e:	08 95       	ret

00002e50 <__udivmodhi4>:
    2e50:	aa 1b       	sub	r26, r26
    2e52:	bb 1b       	sub	r27, r27
    2e54:	51 e1       	ldi	r21, 0x11	; 17
    2e56:	07 c0       	rjmp	.+14     	; 0x2e66 <__udivmodhi4_ep>

00002e58 <__udivmodhi4_loop>:
    2e58:	aa 1f       	adc	r26, r26
    2e5a:	bb 1f       	adc	r27, r27
    2e5c:	a6 17       	cp	r26, r22
    2e5e:	b7 07       	cpc	r27, r23
    2e60:	10 f0       	brcs	.+4      	; 0x2e66 <__udivmodhi4_ep>
    2e62:	a6 1b       	sub	r26, r22
    2e64:	b7 0b       	sbc	r27, r23

00002e66 <__udivmodhi4_ep>:
    2e66:	88 1f       	adc	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	5a 95       	dec	r21
    2e6c:	a9 f7       	brne	.-22     	; 0x2e58 <__udivmodhi4_loop>
    2e6e:	80 95       	com	r24
    2e70:	90 95       	com	r25
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	08 95       	ret

00002e78 <_exit>:
    2e78:	f8 94       	cli

00002e7a <__stop_program>:
    2e7a:	ff cf       	rjmp	.-2      	; 0x2e7a <__stop_program>
